-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_open is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_we0 : OUT STD_LOGIC;
    m_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mlen_ce0 : OUT STD_LOGIC;
    mlen_we0 : OUT STD_LOGIC;
    mlen_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sm_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    smlen : IN STD_LOGIC_VECTOR (63 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_we0 : OUT STD_LOGIC;
    viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_open is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign_open,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=317,HLS_SYN_DSP=2,HLS_SYN_FF=34240,HLS_SYN_LUT=94011,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFB : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFC : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal pubkey_0_params_fu_312_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal pubkey_0_params_reg_534 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_38_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_38_reg_545 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln576_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_39_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_39_reg_558 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln581_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sm_load_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sm_load_1_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal signature_len_fu_448_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal signature_len_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln146_fu_473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln146_reg_601 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln142_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal message_len_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal message_len_reg_607 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln154_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln154_reg_617 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal loop_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln154_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pubkey_0_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_0_plaintext_ce0 : STD_LOGIC;
    signal pubkey_0_plaintext_we0 : STD_LOGIC;
    signal pubkey_0_plaintext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_0_plaintext_ce1 : STD_LOGIC;
    signal pubkey_0_plaintext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_0_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_0_ciphertext_ce0 : STD_LOGIC;
    signal pubkey_0_ciphertext_we0 : STD_LOGIC;
    signal pubkey_0_ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_0_ciphertext_ce1 : STD_LOGIC;
    signal pubkey_0_ciphertext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_verify_fu_288_ap_start : STD_LOGIC;
    signal grp_picnic_verify_fu_288_ap_done : STD_LOGIC;
    signal grp_picnic_verify_fu_288_ap_idle : STD_LOGIC;
    signal grp_picnic_verify_fu_288_ap_ready : STD_LOGIC;
    signal grp_picnic_verify_fu_288_pk_0_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_verify_fu_288_pk_0_plaintext_ce0 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_pk_0_plaintext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_verify_fu_288_pk_0_plaintext_ce1 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_pk_0_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_verify_fu_288_pk_0_ciphertext_ce0 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_pk_0_ciphertext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_verify_fu_288_pk_0_ciphertext_ce1 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_message_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_picnic_verify_fu_288_message_ce0 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_message_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_picnic_verify_fu_288_message_ce1 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_viewOutputs_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_picnic_verify_fu_288_viewOutputs_ce0 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_viewOutputs_we0 : STD_LOGIC;
    signal grp_picnic_verify_fu_288_viewOutputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_verify_fu_288_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_i_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_189_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_1_i_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal loop_0_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_0_reg_268 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_picnic_verify_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln577_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln577_1_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln582_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln582_1_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln155_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_178_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_180_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_179_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_182_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_181_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_184_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_183_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_186_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_185_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_188_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_187_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln581_fu_416_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln582_1_fu_432_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln142_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln142_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln155_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component picnic_verify IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pk_0_params_read : IN STD_LOGIC_VECTOR (3 downto 0);
        pk_0_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_0_plaintext_ce0 : OUT STD_LOGIC;
        pk_0_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_0_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_0_plaintext_ce1 : OUT STD_LOGIC;
        pk_0_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_0_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_0_ciphertext_ce0 : OUT STD_LOGIC;
        pk_0_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_0_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_0_ciphertext_ce1 : OUT STD_LOGIC;
        pk_0_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_ce1 : OUT STD_LOGIC;
        message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_len : IN STD_LOGIC_VECTOR (63 downto 0);
        signature_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        signature_len : IN STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce0 : OUT STD_LOGIC;
        viewOutputs_we0 : OUT STD_LOGIC;
        viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crypto_sign_open_Mgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    pubkey_0_plaintext_U : component crypto_sign_open_Mgi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pubkey_0_plaintext_address0,
        ce0 => pubkey_0_plaintext_ce0,
        we0 => pubkey_0_plaintext_we0,
        d0 => pk_q0,
        q0 => pubkey_0_plaintext_q0,
        address1 => grp_picnic_verify_fu_288_pk_0_plaintext_address1,
        ce1 => pubkey_0_plaintext_ce1,
        q1 => pubkey_0_plaintext_q1);

    pubkey_0_ciphertext_U : component crypto_sign_open_Mgi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pubkey_0_ciphertext_address0,
        ce0 => pubkey_0_ciphertext_ce0,
        we0 => pubkey_0_ciphertext_we0,
        d0 => pk_q0,
        q0 => pubkey_0_ciphertext_q0,
        address1 => grp_picnic_verify_fu_288_pk_0_ciphertext_address1,
        ce1 => pubkey_0_ciphertext_ce1,
        q1 => pubkey_0_ciphertext_q1);

    grp_picnic_verify_fu_288 : component picnic_verify
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_picnic_verify_fu_288_ap_start,
        ap_done => grp_picnic_verify_fu_288_ap_done,
        ap_idle => grp_picnic_verify_fu_288_ap_idle,
        ap_ready => grp_picnic_verify_fu_288_ap_ready,
        pk_0_params_read => pubkey_0_params_reg_534,
        pk_0_plaintext_address0 => grp_picnic_verify_fu_288_pk_0_plaintext_address0,
        pk_0_plaintext_ce0 => grp_picnic_verify_fu_288_pk_0_plaintext_ce0,
        pk_0_plaintext_q0 => pubkey_0_plaintext_q0,
        pk_0_plaintext_address1 => grp_picnic_verify_fu_288_pk_0_plaintext_address1,
        pk_0_plaintext_ce1 => grp_picnic_verify_fu_288_pk_0_plaintext_ce1,
        pk_0_plaintext_q1 => pubkey_0_plaintext_q1,
        pk_0_ciphertext_address0 => grp_picnic_verify_fu_288_pk_0_ciphertext_address0,
        pk_0_ciphertext_ce0 => grp_picnic_verify_fu_288_pk_0_ciphertext_ce0,
        pk_0_ciphertext_q0 => pubkey_0_ciphertext_q0,
        pk_0_ciphertext_address1 => grp_picnic_verify_fu_288_pk_0_ciphertext_address1,
        pk_0_ciphertext_ce1 => grp_picnic_verify_fu_288_pk_0_ciphertext_ce1,
        pk_0_ciphertext_q1 => pubkey_0_ciphertext_q1,
        message_address0 => grp_picnic_verify_fu_288_message_address0,
        message_ce0 => grp_picnic_verify_fu_288_message_ce0,
        message_q0 => sm_q0,
        message_address1 => grp_picnic_verify_fu_288_message_address1,
        message_ce1 => grp_picnic_verify_fu_288_message_ce1,
        message_q1 => sm_q1,
        message_len => message_len_reg_607,
        signature_offset => sub_ln146_reg_601,
        signature_len => signature_len_reg_593,
        viewOutputs_address0 => grp_picnic_verify_fu_288_viewOutputs_address0,
        viewOutputs_ce0 => grp_picnic_verify_fu_288_viewOutputs_ce0,
        viewOutputs_we0 => grp_picnic_verify_fu_288_viewOutputs_we0,
        viewOutputs_d0 => grp_picnic_verify_fu_288_viewOutputs_d0,
        viewOutputs_q0 => viewOutputs_q0,
        ap_return => grp_picnic_verify_fu_288_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_picnic_verify_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_picnic_verify_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_picnic_verify_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_picnic_verify_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_picnic_verify_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_0_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (empty_189_fu_388_p2 = ap_const_lv1_0))) then 
                loop_0_i_reg_233 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                loop_0_i_reg_233 <= loop_38_reg_545;
            end if; 
        end if;
    end process;

    loop_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_picnic_verify_fu_288_ap_done = ap_const_logic_1) and (grp_picnic_verify_fu_288_ap_return = ap_const_lv1_0))) then 
                loop_0_reg_257 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                loop_0_reg_257 <= loop_reg_625;
            end if; 
        end if;
    end process;

    loop_1_i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln576_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                loop_1_i_reg_245 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                loop_1_i_reg_245 <= loop_39_reg_558;
            end if; 
        end if;
    end process;

    p_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_picnic_verify_fu_288_ap_done = ap_const_logic_1) and (grp_picnic_verify_fu_288_ap_return = ap_const_lv1_1))) then 
                p_0_reg_268 <= ap_const_lv2_3;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (empty_189_fu_388_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln142_fu_467_p2 = ap_const_lv1_1)))) then 
                p_0_reg_268 <= ap_const_lv2_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln154_fu_487_p2 = ap_const_lv1_0))) then 
                p_0_reg_268 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                loop_38_reg_545 <= loop_38_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                loop_39_reg_558 <= loop_39_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                loop_reg_625 <= loop_fu_492_p2;
                sext_ln154_reg_617 <= sext_ln154_fu_483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                message_len_reg_607 <= message_len_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                pubkey_0_params_reg_534 <= pubkey_0_params_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                signature_len_reg_593 <= signature_len_fu_448_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sm_load_1_reg_583 <= sm_q1;
                sm_load_reg_578 <= sm_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln142_fu_467_p2 = ap_const_lv1_0))) then
                sub_ln146_reg_601 <= sub_ln146_fu_473_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln576_fu_394_p2, ap_CS_fsm_state5, icmp_ln581_fu_420_p2, ap_CS_fsm_state8, icmp_ln142_fu_467_p2, ap_CS_fsm_state12, icmp_ln154_fu_487_p2, grp_picnic_verify_fu_288_ap_done, grp_picnic_verify_fu_288_ap_return, empty_189_fu_388_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (empty_189_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln576_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln581_fu_420_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln142_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_picnic_verify_fu_288_ap_done = ap_const_logic_1) and (grp_picnic_verify_fu_288_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_picnic_verify_fu_288_ap_done = ap_const_logic_1) and (grp_picnic_verify_fu_288_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln154_fu_487_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln142_fu_462_p2 <= std_logic_vector(unsigned(smlen) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFB));
    add_ln155_fu_498_p2 <= std_logic_vector(signed(loop_0_reg_257) + signed(ap_const_lv32_4));
    add_ln582_1_fu_432_p2 <= std_logic_vector(unsigned(zext_ln581_fu_416_p1) + unsigned(ap_const_lv6_11));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0_reg_268),32));

    empty_178_fu_322_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_E) else "0";
    empty_179_fu_328_p2 <= (empty_fu_316_p2 or empty_178_fu_322_p2);
    empty_180_fu_334_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_D) else "0";
    empty_181_fu_340_p2 <= (empty_180_fu_334_p2 or empty_179_fu_328_p2);
    empty_182_fu_346_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_C) else "0";
    empty_183_fu_352_p2 <= (empty_182_fu_346_p2 or empty_181_fu_340_p2);
    empty_184_fu_358_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_B) else "0";
    empty_185_fu_364_p2 <= (empty_184_fu_358_p2 or empty_183_fu_352_p2);
    empty_186_fu_370_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_A) else "0";
    empty_187_fu_376_p2 <= (empty_186_fu_370_p2 or empty_185_fu_364_p2);
    empty_188_fu_382_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_0) else "0";
    empty_189_fu_388_p2 <= (empty_188_fu_382_p2 or empty_187_fu_376_p2);
    empty_fu_316_p2 <= "1" when (pubkey_0_params_fu_312_p1 = ap_const_lv4_F) else "0";
    grp_picnic_verify_fu_288_ap_start <= grp_picnic_verify_fu_288_ap_start_reg;
    icmp_ln142_fu_467_p2 <= "1" when (unsigned(zext_ln142_fu_458_p1) > unsigned(add_ln142_fu_462_p2)) else "0";
    icmp_ln154_fu_487_p2 <= "1" when (unsigned(sext_ln154_fu_483_p1) < unsigned(message_len_reg_607)) else "0";
    icmp_ln576_fu_394_p2 <= "1" when (loop_0_i_reg_233 = ap_const_lv5_10) else "0";
    icmp_ln581_fu_420_p2 <= "1" when (loop_1_i_reg_245 = ap_const_lv5_10) else "0";
    loop_38_fu_400_p2 <= std_logic_vector(unsigned(loop_0_i_reg_233) + unsigned(ap_const_lv5_1));
    loop_39_fu_426_p2 <= std_logic_vector(unsigned(loop_1_i_reg_245) + unsigned(ap_const_lv5_1));
    loop_fu_492_p2 <= std_logic_vector(signed(loop_0_reg_257) + signed(ap_const_lv32_1));
    m_address0 <= sext_ln154_reg_617(12 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_d0 <= sm_q0;

    m_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;

    message_len_fu_478_p2 <= std_logic_vector(unsigned(sub_ln146_reg_601) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFC));
    mlen_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    mlen_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mlen_ce0 <= ap_const_logic_1;
        else 
            mlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_d0 <= message_len_reg_607;

    mlen_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln154_fu_487_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln154_fu_487_p2 = ap_const_lv1_0))) then 
            mlen_we0 <= ap_const_logic_1;
        else 
            mlen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln577_fu_406_p1, zext_ln582_fu_438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_address0 <= zext_ln582_fu_438_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pk_address0 <= zext_ln577_fu_406_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            pk_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            pk_address0 <= "XXXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            pk_ce0 <= ap_const_logic_1;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_0_ciphertext_address0_assign_proc : process(grp_picnic_verify_fu_288_pk_0_ciphertext_address0, ap_CS_fsm_state4, ap_CS_fsm_state11, zext_ln577_1_fu_411_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pubkey_0_ciphertext_address0 <= zext_ln577_1_fu_411_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_ciphertext_address0 <= grp_picnic_verify_fu_288_pk_0_ciphertext_address0;
        else 
            pubkey_0_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    pubkey_0_ciphertext_ce0_assign_proc : process(grp_picnic_verify_fu_288_pk_0_ciphertext_ce0, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pubkey_0_ciphertext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_ciphertext_ce0 <= grp_picnic_verify_fu_288_pk_0_ciphertext_ce0;
        else 
            pubkey_0_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_0_ciphertext_ce1_assign_proc : process(grp_picnic_verify_fu_288_pk_0_ciphertext_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_ciphertext_ce1 <= grp_picnic_verify_fu_288_pk_0_ciphertext_ce1;
        else 
            pubkey_0_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_0_ciphertext_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pubkey_0_ciphertext_we0 <= ap_const_logic_1;
        else 
            pubkey_0_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pubkey_0_params_fu_312_p1 <= pk_q0(4 - 1 downto 0);

    pubkey_0_plaintext_address0_assign_proc : process(grp_picnic_verify_fu_288_pk_0_plaintext_address0, ap_CS_fsm_state6, ap_CS_fsm_state11, zext_ln582_1_fu_443_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pubkey_0_plaintext_address0 <= zext_ln582_1_fu_443_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_plaintext_address0 <= grp_picnic_verify_fu_288_pk_0_plaintext_address0;
        else 
            pubkey_0_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    pubkey_0_plaintext_ce0_assign_proc : process(grp_picnic_verify_fu_288_pk_0_plaintext_ce0, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pubkey_0_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_plaintext_ce0 <= grp_picnic_verify_fu_288_pk_0_plaintext_ce0;
        else 
            pubkey_0_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_0_plaintext_ce1_assign_proc : process(grp_picnic_verify_fu_288_pk_0_plaintext_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pubkey_0_plaintext_ce1 <= grp_picnic_verify_fu_288_pk_0_plaintext_ce1;
        else 
            pubkey_0_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_0_plaintext_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pubkey_0_plaintext_we0 <= ap_const_logic_1;
        else 
            pubkey_0_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln154_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(loop_0_reg_257),64));

        sext_ln155_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln155_fu_498_p2),64));

    signature_len_fu_448_p5 <= (((sm_load_reg_578 & sm_load_1_reg_583) & sm_q0) & sm_q1);

    sm_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state12, grp_picnic_verify_fu_288_message_address0, ap_CS_fsm_state11, sext_ln155_fu_504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sm_address0 <= sext_ln155_fu_504_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address0 <= ap_const_lv64_1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_address0 <= ap_const_lv64_3(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sm_address0 <= grp_picnic_verify_fu_288_message_address0;
        else 
            sm_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sm_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, grp_picnic_verify_fu_288_message_address1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address1 <= ap_const_lv64_0(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_address1 <= ap_const_lv64_2(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sm_address1 <= grp_picnic_verify_fu_288_message_address1;
        else 
            sm_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state12, grp_picnic_verify_fu_288_message_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sm_ce0 <= grp_picnic_verify_fu_288_message_ce0;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, grp_picnic_verify_fu_288_message_ce1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sm_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sm_ce1 <= grp_picnic_verify_fu_288_message_ce1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln146_fu_473_p2 <= std_logic_vector(unsigned(smlen) - unsigned(zext_ln142_fu_458_p1));
    viewOutputs_address0 <= grp_picnic_verify_fu_288_viewOutputs_address0;
    viewOutputs_ce0 <= grp_picnic_verify_fu_288_viewOutputs_ce0;
    viewOutputs_d0 <= grp_picnic_verify_fu_288_viewOutputs_d0;
    viewOutputs_we0 <= grp_picnic_verify_fu_288_viewOutputs_we0;
    zext_ln142_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(signature_len_fu_448_p5),64));
    zext_ln577_1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_233),64));
    zext_ln577_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_38_fu_400_p2),64));
    zext_ln581_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_i_reg_245),6));
    zext_ln582_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_i_reg_245),64));
    zext_ln582_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln582_1_fu_432_p2),64));
end behav;
