-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity picnic_verify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_0_params_read : IN STD_LOGIC_VECTOR (3 downto 0);
    pk_0_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_0_plaintext_ce0 : OUT STD_LOGIC;
    pk_0_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_0_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_0_plaintext_ce1 : OUT STD_LOGIC;
    pk_0_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_0_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_0_ciphertext_ce0 : OUT STD_LOGIC;
    pk_0_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_0_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_0_ciphertext_ce1 : OUT STD_LOGIC;
    pk_0_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    message_ce1 : OUT STD_LOGIC;
    message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_len : IN STD_LOGIC_VECTOR (63 downto 0);
    signature_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    signature_len : IN STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_we0 : OUT STD_LOGIC;
    viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of picnic_verify is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_5B : STD_LOGIC_VECTOR (6 downto 0) := "1011011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal paramset_transform_fu_500_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal paramset_transform_reg_669 : STD_LOGIC_VECTOR (1 downto 0);
    signal paramset_UnruhGWitho_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal paramset_UnruhGWitho_reg_674 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_deserializeSignature_fu_364_ap_ready : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_ap_done : STD_LOGIC;
    signal add_ln465_fu_524_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln465_1_fu_541_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln466_fu_572_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln466_reg_711 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln467_1_reg_722 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_737 : STD_LOGIC_VECTOR (5 downto 0);
    signal pk_0_ciphertext_loa_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal pk_0_ciphertext_loa_1_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal pk_0_plaintext_load_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal pk_0_plaintext_load_1_reg_767 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln474_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_verify_fu_336_ap_ready : STD_LOGIC;
    signal grp_verify_fu_336_ap_done : STD_LOGIC;
    signal sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal sig_0_proofs_seed1_we0 : STD_LOGIC;
    signal sig_0_proofs_seed1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal sig_0_proofs_seed2_we0 : STD_LOGIC;
    signal sig_0_proofs_seed2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal sig_0_proofs_inputS_we0 : STD_LOGIC;
    signal sig_0_proofs_inputS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal sig_0_proofs_commun_we0 : STD_LOGIC;
    signal sig_0_proofs_commun_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal sig_0_proofs_view3C_we0 : STD_LOGIC;
    signal sig_0_proofs_view3C_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sig_0_challengeBits_ce0 : STD_LOGIC;
    signal sig_0_challengeBits_we0 : STD_LOGIC;
    signal sig_0_challengeBits_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sig_0_salt_ce0 : STD_LOGIC;
    signal sig_0_salt_we0 : STD_LOGIC;
    signal sig_0_salt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_ce0 : STD_LOGIC;
    signal temp2_we0 : STD_LOGIC;
    signal temp2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_verify_fu_336_ap_start : STD_LOGIC;
    signal grp_verify_fu_336_ap_idle : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_verify_fu_336_sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_verify_fu_336_sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_verify_fu_336_sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_verify_fu_336_sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_verify_fu_336_sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_verify_fu_336_sig_0_challengeBits_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_verify_fu_336_sig_0_salt_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_pubKey_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_verify_fu_336_pubKey_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_verify_fu_336_plaintext_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_message_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_verify_fu_336_message_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_viewOutputs_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_verify_fu_336_viewOutputs_ce0 : STD_LOGIC;
    signal grp_verify_fu_336_viewOutputs_we0 : STD_LOGIC;
    signal grp_verify_fu_336_viewOutputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_verify_fu_336_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deserializeSignature_fu_364_ap_start : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_ap_idle : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed1_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed2_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_seed2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_inputS_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_inputS_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_commun_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_commun_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_view3C_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_proofs_view3C_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_challengeBits_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_challengeBits_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_challengeBits_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_deserializeSignature_fu_364_sig_0_salt_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_salt_we0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sig_0_salt_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_deserializeSignature_fu_364_sigBytes_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_deserializeSignature_fu_364_sigBytes_ce0 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_sigBytes_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_deserializeSignature_fu_364_sigBytes_ce1 : STD_LOGIC;
    signal grp_deserializeSignature_fu_364_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln465_reg_292 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln465_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln465_1_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln465_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_314 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal UnifiedRetVal_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_verify_fu_336_ap_start_reg : STD_LOGIC := '0';
    signal grp_deserializeSignature_fu_364_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln465_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln465_1_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln467_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln467_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln467_2_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln467_3_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln467_4_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln467_5_fu_626_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln468_2_fu_642_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_4_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_5_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_2_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_3_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_7_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_8_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_4_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_6_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_5_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_3_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_6_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_7_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln157_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln467_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln467_1_fu_604_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln467_2_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component verify IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
        sig_0_proofs_commun_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sig_0_challengeBits_ce0 : OUT STD_LOGIC;
        sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sig_0_salt_ce0 : OUT STD_LOGIC;
        sig_0_salt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pubKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        pubKey_ce0 : OUT STD_LOGIC;
        pubKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0);
        viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce0 : OUT STD_LOGIC;
        viewOutputs_we0 : OUT STD_LOGIC;
        viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component deserializeSignature IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
        sig_0_proofs_commun_we0 : OUT STD_LOGIC;
        sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sig_0_challengeBits_ce0 : OUT STD_LOGIC;
        sig_0_challengeBits_we0 : OUT STD_LOGIC;
        sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sig_0_salt_ce0 : OUT STD_LOGIC;
        sig_0_salt_we0 : OUT STD_LOGIC;
        sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sigBytes_ce0 : OUT STD_LOGIC;
        sigBytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sigBytes_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sigBytes_ce1 : OUT STD_LOGIC;
        sigBytes_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        sigBytesLen : IN STD_LOGIC_VECTOR (31 downto 0);
        params_UnruhGWithout : IN STD_LOGIC_VECTOR (6 downto 0);
        params_transform_rea : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component picnic_verify_sigFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_verify_sigHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component picnic_verify_sigIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_verify_sigJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component verify_challenge_vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component verify_hash IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_verify_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sig_0_proofs_seed1_U : component picnic_verify_sigFfa
    generic map (
        DataWidth => 8,
        AddressRange => 3504,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_seed1_address0,
        ce0 => sig_0_proofs_seed1_ce0,
        we0 => sig_0_proofs_seed1_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed1_d0,
        q0 => sig_0_proofs_seed1_q0);

    sig_0_proofs_seed2_U : component picnic_verify_sigFfa
    generic map (
        DataWidth => 8,
        AddressRange => 3504,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_seed2_address0,
        ce0 => sig_0_proofs_seed2_ce0,
        we0 => sig_0_proofs_seed2_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed2_d0,
        q0 => sig_0_proofs_seed2_q0);

    sig_0_proofs_inputS_U : component picnic_verify_sigHfu
    generic map (
        DataWidth => 32,
        AddressRange => 876,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_inputS_address0,
        ce0 => sig_0_proofs_inputS_ce0,
        we0 => sig_0_proofs_inputS_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_proofs_inputS_d0,
        q0 => sig_0_proofs_inputS_q0);

    sig_0_proofs_commun_U : component picnic_verify_sigIfE
    generic map (
        DataWidth => 8,
        AddressRange => 16425,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_commun_address0,
        ce0 => sig_0_proofs_commun_ce0,
        we0 => sig_0_proofs_commun_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_proofs_commun_d0,
        q0 => sig_0_proofs_commun_q0);

    sig_0_proofs_view3C_U : component picnic_verify_sigJfO
    generic map (
        DataWidth => 8,
        AddressRange => 7008,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_view3C_address0,
        ce0 => sig_0_proofs_view3C_ce0,
        we0 => sig_0_proofs_view3C_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_proofs_view3C_d0,
        q0 => sig_0_proofs_view3C_q0);

    sig_0_challengeBits_U : component verify_challenge_vdy
    generic map (
        DataWidth => 8,
        AddressRange => 55,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_challengeBits_address0,
        ce0 => sig_0_challengeBits_ce0,
        we0 => sig_0_challengeBits_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_challengeBits_d0,
        q0 => sig_0_challengeBits_q0);

    sig_0_salt_U : component verify_hash
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_salt_address0,
        ce0 => sig_0_salt_ce0,
        we0 => sig_0_salt_we0,
        d0 => grp_deserializeSignature_fu_364_sig_0_salt_d0,
        q0 => sig_0_salt_q0);

    temp_U : component picnic_verify_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    temp2_U : component picnic_verify_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_address0,
        ce0 => temp2_ce0,
        we0 => temp2_we0,
        d0 => temp2_d0,
        q0 => temp2_q0);

    grp_verify_fu_336 : component verify
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_verify_fu_336_ap_start,
        ap_done => grp_verify_fu_336_ap_done,
        ap_idle => grp_verify_fu_336_ap_idle,
        ap_ready => grp_verify_fu_336_ap_ready,
        sig_0_proofs_seed1_address0 => grp_verify_fu_336_sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0 => grp_verify_fu_336_sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_q0 => sig_0_proofs_seed1_q0,
        sig_0_proofs_seed2_address0 => grp_verify_fu_336_sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0 => grp_verify_fu_336_sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_q0 => sig_0_proofs_seed2_q0,
        sig_0_proofs_inputS_address0 => grp_verify_fu_336_sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0 => grp_verify_fu_336_sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_q0 => sig_0_proofs_inputS_q0,
        sig_0_proofs_commun_address0 => grp_verify_fu_336_sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0 => grp_verify_fu_336_sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_q0 => sig_0_proofs_commun_q0,
        sig_0_proofs_view3C_address0 => grp_verify_fu_336_sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0 => grp_verify_fu_336_sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_q0 => sig_0_proofs_view3C_q0,
        sig_0_challengeBits_address0 => grp_verify_fu_336_sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0 => grp_verify_fu_336_sig_0_challengeBits_ce0,
        sig_0_challengeBits_q0 => sig_0_challengeBits_q0,
        sig_0_salt_address0 => grp_verify_fu_336_sig_0_salt_address0,
        sig_0_salt_ce0 => grp_verify_fu_336_sig_0_salt_ce0,
        sig_0_salt_q0 => sig_0_salt_q0,
        pubKey_address0 => grp_verify_fu_336_pubKey_address0,
        pubKey_ce0 => grp_verify_fu_336_pubKey_ce0,
        pubKey_q0 => temp_q0,
        plaintext_address0 => grp_verify_fu_336_plaintext_address0,
        plaintext_ce0 => grp_verify_fu_336_plaintext_ce0,
        plaintext_q0 => temp2_q0,
        message_address0 => grp_verify_fu_336_message_address0,
        message_ce0 => grp_verify_fu_336_message_ce0,
        message_q0 => message_q0,
        messageByteLength => message_len,
        viewOutputs_address0 => grp_verify_fu_336_viewOutputs_address0,
        viewOutputs_ce0 => grp_verify_fu_336_viewOutputs_ce0,
        viewOutputs_we0 => grp_verify_fu_336_viewOutputs_we0,
        viewOutputs_d0 => grp_verify_fu_336_viewOutputs_d0,
        viewOutputs_q0 => viewOutputs_q0,
        ap_return => grp_verify_fu_336_ap_return);

    grp_deserializeSignature_fu_364 : component deserializeSignature
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_deserializeSignature_fu_364_ap_start,
        ap_done => grp_deserializeSignature_fu_364_ap_done,
        ap_idle => grp_deserializeSignature_fu_364_ap_idle,
        ap_ready => grp_deserializeSignature_fu_364_ap_ready,
        sig_0_proofs_seed1_address0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_we0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed1_we0,
        sig_0_proofs_seed1_d0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed1_d0,
        sig_0_proofs_seed2_address0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_we0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed2_we0,
        sig_0_proofs_seed2_d0 => grp_deserializeSignature_fu_364_sig_0_proofs_seed2_d0,
        sig_0_proofs_inputS_address0 => grp_deserializeSignature_fu_364_sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0 => grp_deserializeSignature_fu_364_sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_we0 => grp_deserializeSignature_fu_364_sig_0_proofs_inputS_we0,
        sig_0_proofs_inputS_d0 => grp_deserializeSignature_fu_364_sig_0_proofs_inputS_d0,
        sig_0_proofs_commun_address0 => grp_deserializeSignature_fu_364_sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0 => grp_deserializeSignature_fu_364_sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_we0 => grp_deserializeSignature_fu_364_sig_0_proofs_commun_we0,
        sig_0_proofs_commun_d0 => grp_deserializeSignature_fu_364_sig_0_proofs_commun_d0,
        sig_0_proofs_view3C_address0 => grp_deserializeSignature_fu_364_sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0 => grp_deserializeSignature_fu_364_sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_we0 => grp_deserializeSignature_fu_364_sig_0_proofs_view3C_we0,
        sig_0_proofs_view3C_d0 => grp_deserializeSignature_fu_364_sig_0_proofs_view3C_d0,
        sig_0_challengeBits_address0 => grp_deserializeSignature_fu_364_sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0 => grp_deserializeSignature_fu_364_sig_0_challengeBits_ce0,
        sig_0_challengeBits_we0 => grp_deserializeSignature_fu_364_sig_0_challengeBits_we0,
        sig_0_challengeBits_d0 => grp_deserializeSignature_fu_364_sig_0_challengeBits_d0,
        sig_0_challengeBits_q0 => sig_0_challengeBits_q0,
        sig_0_salt_address0 => grp_deserializeSignature_fu_364_sig_0_salt_address0,
        sig_0_salt_ce0 => grp_deserializeSignature_fu_364_sig_0_salt_ce0,
        sig_0_salt_we0 => grp_deserializeSignature_fu_364_sig_0_salt_we0,
        sig_0_salt_d0 => grp_deserializeSignature_fu_364_sig_0_salt_d0,
        sigBytes_address0 => grp_deserializeSignature_fu_364_sigBytes_address0,
        sigBytes_ce0 => grp_deserializeSignature_fu_364_sigBytes_ce0,
        sigBytes_q0 => message_q0,
        sigBytes_address1 => grp_deserializeSignature_fu_364_sigBytes_address1,
        sigBytes_ce1 => grp_deserializeSignature_fu_364_sigBytes_ce1,
        sigBytes_q1 => message_q1,
        sigBytes_offset => signature_offset,
        sigBytesLen => signature_len,
        params_UnruhGWithout => paramset_UnruhGWitho_reg_674,
        params_transform_rea => paramset_transform_reg_669,
        ap_return => grp_deserializeSignature_fu_364_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_return_preg <= UnifiedRetVal_reg_325;
                end if; 
            end if;
        end if;
    end process;


    grp_deserializeSignature_fu_364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_deserializeSignature_fu_364_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_deserializeSignature_fu_364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_deserializeSignature_fu_364_ap_ready = ap_const_logic_1)) then 
                    grp_deserializeSignature_fu_364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_verify_fu_336_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_verify_fu_336_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_558_p3 = ap_const_lv1_1))) then 
                    grp_verify_fu_336_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_verify_fu_336_ap_ready = ap_const_logic_1)) then 
                    grp_verify_fu_336_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_deserializeSignature_fu_364_ap_done = ap_const_logic_1) and (grp_deserializeSignature_fu_364_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                UnifiedRetVal_reg_325 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_verify_fu_336_ap_done = ap_const_logic_1))) then 
                UnifiedRetVal_reg_325 <= icmp_ln474_fu_653_p2;
            end if; 
        end if;
    end process;

    loop_0_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln465_1_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                loop_0_reg_314 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                loop_0_reg_314 <= loop_reg_737;
            end if; 
        end if;
    end process;

    phi_ln465_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln465_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln465_1_reg_303 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln465_1_fu_552_p2 = ap_const_lv1_0))) then 
                phi_ln465_1_reg_303 <= add_ln465_1_fu_541_p2;
            end if; 
        end if;
    end process;

    phi_ln465_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_deserializeSignature_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_deserializeSignature_fu_364_ap_return = ap_const_lv1_0))) then 
                phi_ln465_reg_292 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln465_fu_535_p2 = ap_const_lv1_0))) then 
                phi_ln465_reg_292 <= add_ln465_fu_524_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_558_p3 = ap_const_lv1_0))) then
                loop_reg_737 <= loop_fu_598_p2;
                trunc_ln466_reg_711 <= trunc_ln466_fu_572_p1;
                trunc_ln467_1_reg_722 <= loop_0_reg_314(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    paramset_UnruhGWitho_reg_674(1 downto 0) <= paramset_UnruhGWitho_fu_515_p3(1 downto 0);    paramset_UnruhGWitho_reg_674(4 downto 3) <= paramset_UnruhGWitho_fu_515_p3(4 downto 3);    paramset_UnruhGWitho_reg_674(6) <= paramset_UnruhGWitho_fu_515_p3(6);
                paramset_transform_reg_669 <= paramset_transform_fu_500_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                pk_0_ciphertext_loa_1_reg_747 <= pk_0_ciphertext_q1;
                pk_0_ciphertext_loa_reg_742 <= pk_0_ciphertext_q0;
                pk_0_plaintext_load_1_reg_767 <= pk_0_plaintext_q1;
                pk_0_plaintext_load_reg_762 <= pk_0_plaintext_q0;
            end if;
        end if;
    end process;
    paramset_UnruhGWitho_reg_674(2) <= '0';
    paramset_UnruhGWitho_reg_674(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_deserializeSignature_fu_364_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_fu_558_p3, ap_CS_fsm_state8, grp_verify_fu_336_ap_done, grp_deserializeSignature_fu_364_ap_return, icmp_ln465_fu_535_p2, icmp_ln465_1_fu_552_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_deserializeSignature_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_deserializeSignature_fu_364_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((grp_deserializeSignature_fu_364_ap_done = ap_const_logic_1) and (grp_deserializeSignature_fu_364_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln465_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln465_1_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_558_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_verify_fu_336_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln465_1_fu_541_p2 <= std_logic_vector(unsigned(phi_ln465_1_reg_303) + unsigned(ap_const_lv3_1));
    add_ln465_fu_524_p2 <= std_logic_vector(unsigned(phi_ln465_reg_292) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(UnifiedRetVal_reg_325, ap_return_preg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return <= UnifiedRetVal_reg_325;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_deserializeSignature_fu_364_ap_start <= grp_deserializeSignature_fu_364_ap_start_reg;
    grp_verify_fu_336_ap_start <= grp_verify_fu_336_ap_start_reg;
    icmp_ln157_fu_509_p2 <= "1" when (paramset_transform_fu_500_p3 = ap_const_lv2_1) else "0";
    icmp_ln33_1_fu_396_p2 <= "1" when (pk_0_params_read = ap_const_lv4_4) else "0";
    icmp_ln33_2_fu_402_p2 <= "1" when (pk_0_params_read = ap_const_lv4_6) else "0";
    icmp_ln33_3_fu_420_p2 <= "1" when (pk_0_params_read = ap_const_lv4_1) else "0";
    icmp_ln33_4_fu_426_p2 <= "1" when (pk_0_params_read = ap_const_lv4_3) else "0";
    icmp_ln33_5_fu_432_p2 <= "1" when (pk_0_params_read = ap_const_lv4_5) else "0";
    icmp_ln33_6_fu_438_p2 <= "1" when (pk_0_params_read = ap_const_lv4_7) else "0";
    icmp_ln33_7_fu_444_p2 <= "1" when (pk_0_params_read = ap_const_lv4_8) else "0";
    icmp_ln33_8_fu_450_p2 <= "1" when (pk_0_params_read = ap_const_lv4_9) else "0";
    icmp_ln33_fu_390_p2 <= "1" when (pk_0_params_read = ap_const_lv4_2) else "0";
    icmp_ln465_1_fu_552_p2 <= "1" when (phi_ln465_1_reg_303 = ap_const_lv3_7) else "0";
    icmp_ln465_fu_535_p2 <= "1" when (phi_ln465_reg_292 = ap_const_lv3_7) else "0";
    icmp_ln474_fu_653_p2 <= "0" when (grp_verify_fu_336_ap_return = ap_const_lv32_0) else "1";
    loop_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(loop_0_reg_314));

    message_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_message_address0, grp_deserializeSignature_fu_364_sigBytes_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_address0 <= grp_deserializeSignature_fu_364_sigBytes_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            message_address0 <= grp_verify_fu_336_message_address0;
        else 
            message_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    message_address1 <= grp_deserializeSignature_fu_364_sigBytes_address1;

    message_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_message_ce0, grp_deserializeSignature_fu_364_sigBytes_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_ce0 <= grp_deserializeSignature_fu_364_sigBytes_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            message_ce0 <= grp_verify_fu_336_message_ce0;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_ce1_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sigBytes_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_ce1 <= grp_deserializeSignature_fu_364_sigBytes_ce1;
        else 
            message_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln33_1_fu_414_p2 <= (or_ln33_fu_408_p2 or icmp_ln33_fu_390_p2);
    or_ln33_2_fu_456_p2 <= (icmp_ln33_5_fu_432_p2 or icmp_ln33_4_fu_426_p2);
    or_ln33_3_fu_462_p2 <= (or_ln33_2_fu_456_p2 or icmp_ln33_3_fu_420_p2);
    or_ln33_4_fu_468_p2 <= (icmp_ln33_8_fu_450_p2 or icmp_ln33_7_fu_444_p2);
    or_ln33_5_fu_474_p2 <= (or_ln33_4_fu_468_p2 or icmp_ln33_6_fu_438_p2);
    or_ln33_6_fu_480_p2 <= (or_ln33_5_fu_474_p2 or or_ln33_3_fu_462_p2);
    or_ln33_7_fu_494_p2 <= (or_ln33_6_fu_480_p2 or or_ln33_1_fu_414_p2);
    or_ln33_fu_408_p2 <= (icmp_ln33_2_fu_402_p2 or icmp_ln33_1_fu_396_p2);
    or_ln467_1_fu_604_p2 <= (trunc_ln466_reg_711 or ap_const_lv5_2);
    or_ln467_2_fu_615_p2 <= (trunc_ln466_reg_711 or ap_const_lv5_3);
    or_ln467_5_fu_626_p5 <= (((pk_0_ciphertext_q1 & pk_0_ciphertext_q0) & pk_0_ciphertext_loa_1_reg_747) & pk_0_ciphertext_loa_reg_742);
    or_ln467_fu_576_p2 <= (trunc_ln466_fu_572_p1 or ap_const_lv5_1);
    or_ln468_2_fu_642_p5 <= (((pk_0_plaintext_q1 & pk_0_plaintext_q0) & pk_0_plaintext_load_1_reg_767) & pk_0_plaintext_load_reg_762);
    paramset_UnruhGWitho_fu_515_p3 <= 
        ap_const_lv7_5B when (icmp_ln157_fu_509_p2(0) = '1') else 
        ap_const_lv7_0;
    paramset_transform_fu_500_p3 <= 
        select_ln33_fu_486_p3 when (or_ln33_7_fu_494_p2(0) = '1') else 
        ap_const_lv2_3;

    pk_0_ciphertext_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln467_fu_566_p1, zext_ln467_2_fu_609_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_0_ciphertext_address0 <= zext_ln467_2_fu_609_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_0_ciphertext_address0 <= zext_ln467_fu_566_p1(5 - 1 downto 0);
        else 
            pk_0_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_0_ciphertext_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln467_1_fu_582_p1, zext_ln467_3_fu_620_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_0_ciphertext_address1 <= zext_ln467_3_fu_620_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_0_ciphertext_address1 <= zext_ln467_1_fu_582_p1(5 - 1 downto 0);
        else 
            pk_0_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_0_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pk_0_ciphertext_ce0 <= ap_const_logic_1;
        else 
            pk_0_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_0_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pk_0_ciphertext_ce1 <= ap_const_logic_1;
        else 
            pk_0_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_0_plaintext_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln467_fu_566_p1, zext_ln467_2_fu_609_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_0_plaintext_address0 <= zext_ln467_2_fu_609_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_0_plaintext_address0 <= zext_ln467_fu_566_p1(5 - 1 downto 0);
        else 
            pk_0_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_0_plaintext_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln467_1_fu_582_p1, zext_ln467_3_fu_620_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pk_0_plaintext_address1 <= zext_ln467_3_fu_620_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_0_plaintext_address1 <= zext_ln467_1_fu_582_p1(5 - 1 downto 0);
        else 
            pk_0_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_0_plaintext_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pk_0_plaintext_ce0 <= ap_const_logic_1;
        else 
            pk_0_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_0_plaintext_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pk_0_plaintext_ce1 <= ap_const_logic_1;
        else 
            pk_0_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln33_fu_486_p3 <= 
        ap_const_lv2_0 when (or_ln33_6_fu_480_p2(0) = '1') else 
        ap_const_lv2_1;

    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_challengeBits_address0, grp_deserializeSignature_fu_364_sig_0_challengeBits_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_challengeBits_address0 <= grp_deserializeSignature_fu_364_sig_0_challengeBits_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_address0 <= grp_verify_fu_336_sig_0_challengeBits_address0;
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_challengeBits_ce0, grp_deserializeSignature_fu_364_sig_0_challengeBits_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_challengeBits_ce0 <= grp_deserializeSignature_fu_364_sig_0_challengeBits_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_ce0 <= grp_verify_fu_336_sig_0_challengeBits_ce0;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_challengeBits_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_challengeBits_we0 <= grp_deserializeSignature_fu_364_sig_0_challengeBits_we0;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_commun_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_commun_address0, grp_deserializeSignature_fu_364_sig_0_proofs_commun_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_commun_address0 <= grp_deserializeSignature_fu_364_sig_0_proofs_commun_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_commun_address0 <= grp_verify_fu_336_sig_0_proofs_commun_address0;
        else 
            sig_0_proofs_commun_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_commun_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_commun_ce0, grp_deserializeSignature_fu_364_sig_0_proofs_commun_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_commun_ce0 <= grp_deserializeSignature_fu_364_sig_0_proofs_commun_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_commun_ce0 <= grp_verify_fu_336_sig_0_proofs_commun_ce0;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_commun_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_proofs_commun_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_commun_we0 <= grp_deserializeSignature_fu_364_sig_0_proofs_commun_we0;
        else 
            sig_0_proofs_commun_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_inputS_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_inputS_address0, grp_deserializeSignature_fu_364_sig_0_proofs_inputS_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_inputS_address0 <= grp_deserializeSignature_fu_364_sig_0_proofs_inputS_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_inputS_address0 <= grp_verify_fu_336_sig_0_proofs_inputS_address0;
        else 
            sig_0_proofs_inputS_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_inputS_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_inputS_ce0, grp_deserializeSignature_fu_364_sig_0_proofs_inputS_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_inputS_ce0 <= grp_deserializeSignature_fu_364_sig_0_proofs_inputS_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_inputS_ce0 <= grp_verify_fu_336_sig_0_proofs_inputS_ce0;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_inputS_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_proofs_inputS_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_inputS_we0 <= grp_deserializeSignature_fu_364_sig_0_proofs_inputS_we0;
        else 
            sig_0_proofs_inputS_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_seed1_address0, grp_deserializeSignature_fu_364_sig_0_proofs_seed1_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed1_address0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed1_address0 <= grp_verify_fu_336_sig_0_proofs_seed1_address0;
        else 
            sig_0_proofs_seed1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_seed1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_seed1_ce0, grp_deserializeSignature_fu_364_sig_0_proofs_seed1_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed1_ce0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed1_ce0 <= grp_verify_fu_336_sig_0_proofs_seed1_ce0;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed1_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_proofs_seed1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed1_we0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed1_we0;
        else 
            sig_0_proofs_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_seed2_address0, grp_deserializeSignature_fu_364_sig_0_proofs_seed2_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed2_address0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed2_address0 <= grp_verify_fu_336_sig_0_proofs_seed2_address0;
        else 
            sig_0_proofs_seed2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_seed2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_seed2_ce0, grp_deserializeSignature_fu_364_sig_0_proofs_seed2_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed2_ce0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed2_ce0 <= grp_verify_fu_336_sig_0_proofs_seed2_ce0;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed2_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_proofs_seed2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_seed2_we0 <= grp_deserializeSignature_fu_364_sig_0_proofs_seed2_we0;
        else 
            sig_0_proofs_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_view3C_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_view3C_address0, grp_deserializeSignature_fu_364_sig_0_proofs_view3C_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_view3C_address0 <= grp_deserializeSignature_fu_364_sig_0_proofs_view3C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_address0 <= grp_verify_fu_336_sig_0_proofs_view3C_address0;
        else 
            sig_0_proofs_view3C_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_view3C_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_proofs_view3C_ce0, grp_deserializeSignature_fu_364_sig_0_proofs_view3C_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_view3C_ce0 <= grp_deserializeSignature_fu_364_sig_0_proofs_view3C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_ce0 <= grp_verify_fu_336_sig_0_proofs_view3C_ce0;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_view3C_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_proofs_view3C_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_proofs_view3C_we0 <= grp_deserializeSignature_fu_364_sig_0_proofs_view3C_we0;
        else 
            sig_0_proofs_view3C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_salt_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_salt_address0, grp_deserializeSignature_fu_364_sig_0_salt_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_address0 <= grp_deserializeSignature_fu_364_sig_0_salt_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_salt_address0 <= grp_verify_fu_336_sig_0_salt_address0;
        else 
            sig_0_salt_address0 <= "XXXXX";
        end if; 
    end process;


    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_verify_fu_336_sig_0_salt_ce0, grp_deserializeSignature_fu_364_sig_0_salt_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_ce0 <= grp_deserializeSignature_fu_364_sig_0_salt_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_salt_ce0 <= grp_verify_fu_336_sig_0_salt_ce0;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_salt_we0_assign_proc : process(ap_CS_fsm_state2, grp_deserializeSignature_fu_364_sig_0_salt_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_we0 <= grp_deserializeSignature_fu_364_sig_0_salt_we0;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_verify_fu_336_plaintext_address0, ap_CS_fsm_state7, zext_ln465_1_fu_547_p1, zext_ln467_4_fu_637_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp2_address0 <= zext_ln467_4_fu_637_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp2_address0 <= zext_ln465_1_fu_547_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp2_address0 <= grp_verify_fu_336_plaintext_address0;
        else 
            temp2_address0 <= "XXX";
        end if; 
    end process;


    temp2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_verify_fu_336_plaintext_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp2_ce0 <= grp_verify_fu_336_plaintext_ce0;
        else 
            temp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, or_ln468_2_fu_642_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp2_d0 <= or_ln468_2_fu_642_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp2_d0 <= ap_const_lv32_0;
        else 
            temp2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp2_we0 <= ap_const_logic_1;
        else 
            temp2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_verify_fu_336_pubKey_address0, ap_CS_fsm_state7, zext_ln465_fu_530_p1, zext_ln467_4_fu_637_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln467_4_fu_637_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_address0 <= zext_ln465_fu_530_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_address0 <= grp_verify_fu_336_pubKey_address0;
        else 
            temp_address0 <= "XXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_verify_fu_336_pubKey_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_ce0 <= grp_verify_fu_336_pubKey_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, or_ln467_5_fu_626_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d0 <= or_ln467_5_fu_626_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_d0 <= ap_const_lv32_0;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_558_p3 <= loop_0_reg_314(5 downto 5);
    trunc_ln466_fu_572_p1 <= loop_0_reg_314(5 - 1 downto 0);
    viewOutputs_address0 <= grp_verify_fu_336_viewOutputs_address0;
    viewOutputs_ce0 <= grp_verify_fu_336_viewOutputs_ce0;
    viewOutputs_d0 <= grp_verify_fu_336_viewOutputs_d0;
    viewOutputs_we0 <= grp_verify_fu_336_viewOutputs_we0;
    zext_ln465_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln465_1_reg_303),64));
    zext_ln465_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln465_reg_292),64));
    zext_ln467_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln467_fu_576_p2),64));
    zext_ln467_2_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln467_1_fu_604_p2),64));
    zext_ln467_3_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln467_2_fu_615_p2),64));
    zext_ln467_4_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln467_1_reg_722),64));
    zext_ln467_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_314),64));
end behav;
