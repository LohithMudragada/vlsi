-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deserializeSignature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
    sig_0_proofs_commun_we0 : OUT STD_LOGIC;
    sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sig_0_challengeBits_ce0 : OUT STD_LOGIC;
    sig_0_challengeBits_we0 : OUT STD_LOGIC;
    sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sig_0_salt_ce0 : OUT STD_LOGIC;
    sig_0_salt_we0 : OUT STD_LOGIC;
    sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce0 : OUT STD_LOGIC;
    sigBytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce1 : OUT STD_LOGIC;
    sigBytes_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    sigBytesLen : IN STD_LOGIC_VECTOR (31 downto 0);
    params_UnruhGWithout : IN STD_LOGIC_VECTOR (6 downto 0);
    params_transform_rea : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of deserializeSignature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_8B : STD_LOGIC_VECTOR (7 downto 0) := "10001011";
    constant ap_const_lv8_9B : STD_LOGIC_VECTOR (7 downto 0) := "10011011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_7740 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111011101000000";
    constant ap_const_lv16_DB : STD_LOGIC_VECTOR (15 downto 0) := "0000000011011011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_77 : STD_LOGIC_VECTOR (7 downto 0) := "01110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_E2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sigBytesLen_cast1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigBytesLen_cast1_reg_1463 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln54_fu_588_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_reg_1471 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1968_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_20_reg_1486 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln386_fu_604_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_reg_1491 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1940_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_reg_1501 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1977_fu_641_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1977_reg_1507 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputShareSize_2_fu_726_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loop_fu_763_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_1523 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln2039_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_794_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_21_reg_1536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln386_4_fu_800_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_4_reg_1541 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1951_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_32_fu_886_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_32_reg_1557 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln2048_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2052_fu_921_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2052_reg_1567 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln2058_fu_935_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2058_reg_1572 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2052_fu_947_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2052_reg_1578 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_fu_957_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1586 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln2052_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln386_fu_1038_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln386_reg_1596 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln2058_fu_1046_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2058_reg_1601 : STD_LOGIC_VECTOR (16 downto 0);
    signal loop_33_fu_1057_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_33_reg_1612 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln2058_3_fu_1067_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2058_3_reg_1617 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln2057_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_34_fu_1106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_34_reg_1630 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln2071_fu_1116_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2071_reg_1635 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln2070_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_35_fu_1156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_35_reg_1648 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln2075_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_36_fu_1210_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_36_reg_1661 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln2081_fu_1220_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2081_reg_1666 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln2080_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2087_fu_1274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_reg_1679 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln2084_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_63_fu_1284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2087_6_fu_1367_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_6_reg_1700 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_8_fu_1391_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_8_reg_1705 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2087_4_reg_1710 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_37_fu_1406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_37_reg_1715 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigBytes_load_6_reg_1720 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sigBytes_load_7_reg_1725 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2088_fu_1447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal inputShareSize_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_assign_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_0_reg_419 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1979_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal round_assign_2_reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1953_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_1_reg_442 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_01_rec_reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal round_assign_3_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_478 : STD_LOGIC_VECTOR (14 downto 0);
    signal loop_2_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal loop_3_reg_501 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal loop_4_reg_512 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal loop_5_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal loop_6_reg_535 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_sum5_pn_reg_546 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_13_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_2_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_12_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2049_3_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2049_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_14_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2058_3_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2058_5_fu_1096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2071_3_fu_1141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2071_4_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2076_3_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2076_4_fu_1199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2081_3_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2081_4_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_2_fu_1310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_5_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_8_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_11_fu_1416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_12_fu_1438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_608_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_fu_618_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln54_fu_622_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1977_fu_641_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_647_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_fu_654_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_15_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_2_fu_674_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_16_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_8_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_3_fu_670_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_9_fu_690_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_fu_694_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1942_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1942_1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1942_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputShareSize_1_fu_720_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1977_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1976_fu_734_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_1_fu_740_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_2_fu_745_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_1_fu_769_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2040_fu_773_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_6_fu_804_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitNumber_assign_fu_819_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_3_fu_826_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_17_fu_832_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_9_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_4_fu_846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_18_fu_852_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_10_fu_856_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_5_fu_842_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_10_fu_862_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_1_fu_866_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2049_1_fu_892_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2049_fu_896_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2049_2_fu_902_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2049_1_fu_906_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_927_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_939_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln54_8_fu_963_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln386_6_fu_978_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitNumber_assign_4_fu_982_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_5_fu_990_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_19_fu_996_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_11_fu_1000_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_6_fu_1010_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_20_fu_1016_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_12_fu_1020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_7_fu_1006_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_11_fu_1026_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_2_fu_1030_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2052_1_fu_1042_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2058_4_fu_1063_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2058_1_fu_1072_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2058_2_fu_1076_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2058_2_fu_1082_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2058_1_fu_1086_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2071_fu_1112_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln2071_1_fu_1122_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2071_1_fu_1126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2071_2_fu_1132_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2071_2_fu_1136_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2076_1_fu_1162_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2076_1_fu_1166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2076_fu_1172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2076_2_fu_1176_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2076_2_fu_1180_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2076_fu_1190_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2076_fu_1194_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2081_fu_1216_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2081_1_fu_1225_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2081_1_fu_1229_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2081_fu_1235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2081_2_fu_1239_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2081_2_fu_1243_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2084_fu_1253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1258_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2087_fu_1292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_1_fu_1296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_1_fu_1301_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_2_fu_1305_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2086_fu_1315_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2087_fu_1319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_3_fu_1325_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_3_fu_1329_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_4_fu_1334_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_4_fu_1338_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2087_1_fu_1348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_6_fu_1354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_5_fu_1358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_7_fu_1363_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2087_2_fu_1372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_9_fu_1378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_7_fu_1382_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_10_fu_1387_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_1431_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2088_fu_1443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1977_fu_641_p10 : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_return_preg <= p_0_reg_559;
                end if; 
            end if;
        end if;
    end process;


    inputShareSize_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_0))) then 
                inputShareSize_reg_396 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                inputShareSize_reg_396 <= inputShareSize_2_fu_726_p3;
            end if; 
        end if;
    end process;

    loop_0_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_752_p2 = ap_const_lv1_0))) then 
                loop_0_reg_419 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                loop_0_reg_419 <= loop_reg_1523;
            end if; 
        end if;
    end process;

    loop_1_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_788_p2 = ap_const_lv1_0))) then 
                loop_1_reg_442 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_1_reg_442 <= loop_32_reg_1557;
            end if; 
        end if;
    end process;

    loop_2_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                loop_2_reg_490 <= loop_33_reg_1612;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                loop_2_reg_490 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    loop_3_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln2057_fu_1051_p2 = ap_const_lv1_1))) then 
                loop_3_reg_501 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                loop_3_reg_501 <= loop_34_reg_1630;
            end if; 
        end if;
    end process;

    loop_4_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln2070_fu_1100_p2 = ap_const_lv1_1))) then 
                loop_4_reg_512 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                loop_4_reg_512 <= loop_35_reg_1648;
            end if; 
        end if;
    end process;

    loop_5_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln2075_fu_1150_p2 = ap_const_lv1_1))) then 
                loop_5_reg_524 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_5_reg_524 <= loop_36_reg_1661;
            end if; 
        end if;
    end process;

    loop_6_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2084_fu_1268_p2 = ap_const_lv1_1) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_1))) then 
                loop_6_reg_535 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                loop_6_reg_535 <= loop_37_reg_1715;
            end if; 
        end if;
    end process;

    p_01_rec_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2048_fu_880_p2 = ap_const_lv1_1))) then 
                p_01_rec_reg_454 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                p_01_rec_reg_454 <= add_ln2088_fu_1447_p2;
            end if; 
        end if;
    end process;

    p_0_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln2052_fu_951_p2 = ap_const_lv1_1))) then 
                p_0_reg_559 <= ap_const_lv1_0;
            elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_874_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_752_p2 = ap_const_lv1_1)))) then 
                p_0_reg_559 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    p_sum5_pn_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_63_fu_1284_p3 = ap_const_lv1_1))) then 
                p_sum5_pn_reg_546(4) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_1) and (icmp_ln2084_fu_1268_p2 = ap_const_lv1_0))) then 
                p_sum5_pn_reg_546(4) <= '0';
            end if; 
        end if;
    end process;

    phi_mul_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2048_fu_880_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_478 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                phi_mul_reg_478 <= add_ln2052_reg_1567;
            end if; 
        end if;
    end process;

    round_assign_2_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln2039_fu_757_p2 = ap_const_lv1_1))) then 
                round_assign_2_reg_431 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_874_p2 = ap_const_lv1_0))) then 
                round_assign_2_reg_431 <= i_21_reg_1536;
            end if; 
        end if;
    end process;

    round_assign_3_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2048_fu_880_p2 = ap_const_lv1_1))) then 
                round_assign_3_reg_466 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                round_assign_3_reg_466 <= i_reg_1586;
            end if; 
        end if;
    end process;

    round_assign_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_0))) then 
                round_assign_reg_408 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                round_assign_reg_408 <= i_20_reg_1486;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln2052_reg_1567 <= add_ln2052_fu_921_p2;
                i_reg_1586 <= i_fu_957_p2;
                    zext_ln2052_reg_1578(12 downto 5) <= zext_ln2052_fu_947_p1(12 downto 5);
                    zext_ln2058_reg_1572(11 downto 4) <= zext_ln2058_fu_935_p1(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln2057_fu_1051_p2 = ap_const_lv1_0))) then
                add_ln2058_3_reg_1617 <= add_ln2058_3_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln2058_reg_1601 <= add_ln2058_fu_1046_p2;
                    zext_ln386_reg_1596(1 downto 0) <= zext_ln386_fu_1038_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln2070_fu_1100_p2 = ap_const_lv1_0))) then
                add_ln2071_reg_1635 <= add_ln2071_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_0))) then
                add_ln2081_reg_1666 <= add_ln2081_fu_1220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_63_fu_1284_p3 = ap_const_lv1_0))) then
                add_ln2087_6_reg_1700 <= add_ln2087_6_fu_1367_p2;
                add_ln2087_8_reg_1705 <= add_ln2087_8_fu_1391_p2;
                loop_37_reg_1715 <= loop_37_fu_1406_p2;
                trunc_ln2087_4_reg_1710 <= loop_6_reg_535(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2084_fu_1268_p2 = ap_const_lv1_1) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_1))) then
                add_ln2087_reg_1679 <= add_ln2087_fu_1274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_592_p2 = ap_const_lv1_1))) then
                bytesExpected_reg_1501 <= bytesExpected_fu_632_p2;
                mul_ln1977_reg_1507 <= mul_ln1977_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_20_reg_1486 <= i_20_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_21_reg_1536 <= i_21_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                loop_32_reg_1557 <= loop_32_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                loop_33_reg_1612 <= loop_33_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                loop_34_reg_1630 <= loop_34_fu_1106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                loop_35_reg_1648 <= loop_35_fu_1156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                loop_36_reg_1661 <= loop_36_fu_1210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                loop_reg_1523 <= loop_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sigBytesLen_cast1_reg_1463(31 downto 0) <= sigBytesLen_cast1_fu_578_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sigBytes_load_6_reg_1720 <= sigBytes_q0;
                sigBytes_load_7_reg_1725 <= sigBytes_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_788_p2 = ap_const_lv1_1))) then
                trunc_ln386_4_reg_1541 <= trunc_ln386_4_fu_800_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_592_p2 = ap_const_lv1_0))) then
                trunc_ln386_reg_1491 <= trunc_ln386_fu_604_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_0))) then
                trunc_ln54_reg_1471 <= trunc_ln54_fu_588_p1;
            end if;
        end if;
    end process;
    sigBytesLen_cast1_reg_1463(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln2058_reg_1572(3 downto 0) <= "0000";
    zext_ln2058_reg_1572(12) <= '0';
    zext_ln2052_reg_1578(4 downto 0) <= "00000";
    zext_ln2052_reg_1578(13) <= '0';
    zext_ln386_reg_1596(2) <= '0';
    p_sum5_pn_reg_546(3 downto 0) <= "1011";
    p_sum5_pn_reg_546(7 downto 5) <= "100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1968_fu_582_p2, ap_CS_fsm_state2, icmp_ln1940_fu_592_p2, ap_CS_fsm_state5, icmp_ln2039_fu_757_p2, ap_CS_fsm_state7, icmp_ln1951_fu_788_p2, ap_CS_fsm_state9, icmp_ln2048_fu_880_p2, ap_CS_fsm_state11, icmp_ln2052_fu_951_p2, ap_CS_fsm_state13, icmp_ln2057_fu_1051_p2, ap_CS_fsm_state15, icmp_ln2070_fu_1100_p2, ap_CS_fsm_state17, icmp_ln2075_fu_1150_p2, ap_CS_fsm_state19, icmp_ln2080_fu_1204_p2, icmp_ln2084_fu_1268_p2, ap_CS_fsm_state21, tmp_63_fu_1284_p3, ap_CS_fsm_state4, icmp_ln1979_fu_752_p2, ap_CS_fsm_state8, icmp_ln1953_fu_874_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_582_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_592_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_752_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln2039_fu_757_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_788_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_874_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2048_fu_880_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln2052_fu_951_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln2057_fu_1051_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln2070_fu_1100_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln2075_fu_1150_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2084_fu_1268_p2 = ap_const_lv1_1) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2080_fu_1204_p2 = ap_const_lv1_1) and (icmp_ln2084_fu_1268_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_63_fu_1284_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln2040_fu_773_p2 <= std_logic_vector(unsigned(zext_ln2040_1_fu_769_p1) + unsigned(trunc_ln54_reg_1471));
    add_ln2049_1_fu_906_p2 <= std_logic_vector(unsigned(zext_ln2049_2_fu_902_p1) + unsigned(trunc_ln54_reg_1471));
    add_ln2049_fu_896_p2 <= std_logic_vector(unsigned(zext_ln2049_1_fu_892_p1) + unsigned(ap_const_lv7_37));
    add_ln2052_fu_921_p2 <= std_logic_vector(unsigned(phi_mul_reg_478) + unsigned(ap_const_lv15_4B));
    add_ln2058_1_fu_1086_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1601) + unsigned(zext_ln2058_2_fu_1082_p1));
    add_ln2058_2_fu_1076_p2 <= std_logic_vector(unsigned(zext_ln2058_1_fu_1072_p1) + unsigned(ap_const_lv7_57));
    add_ln2058_3_fu_1067_p2 <= std_logic_vector(unsigned(zext_ln2052_reg_1578) + unsigned(zext_ln2058_4_fu_1063_p1));
    add_ln2058_fu_1046_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln2052_1_fu_1042_p1));
    add_ln2071_1_fu_1126_p2 <= std_logic_vector(unsigned(zext_ln2071_1_fu_1122_p1) + unsigned(ap_const_lv8_77));
    add_ln2071_2_fu_1136_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1601) + unsigned(zext_ln2071_2_fu_1132_p1));
    add_ln2071_fu_1116_p2 <= std_logic_vector(unsigned(phi_mul_reg_478) + unsigned(zext_ln2071_fu_1112_p1));
    add_ln2076_1_fu_1166_p2 <= std_logic_vector(unsigned(zext_ln2076_1_fu_1162_p1) + unsigned(ap_const_lv7_42));
    add_ln2076_2_fu_1180_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1601) + unsigned(zext_ln2076_2_fu_1176_p1));
    add_ln2076_fu_1194_p2 <= std_logic_vector(unsigned(zext_ln2058_reg_1572) + unsigned(zext_ln2076_fu_1190_p1));
    add_ln2081_1_fu_1229_p2 <= std_logic_vector(unsigned(zext_ln2081_1_fu_1225_p1) + unsigned(ap_const_lv7_52));
    add_ln2081_2_fu_1243_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1601) + unsigned(zext_ln2081_2_fu_1239_p1));
    add_ln2081_fu_1220_p2 <= std_logic_vector(unsigned(zext_ln2058_reg_1572) + unsigned(zext_ln2081_fu_1216_p1));
    add_ln2084_fu_1253_p2 <= std_logic_vector(unsigned(zext_ln386_reg_1596) + unsigned(ap_const_lv3_7));
    add_ln2087_1_fu_1296_p2 <= std_logic_vector(unsigned(zext_ln2087_fu_1292_p1) + unsigned(add_ln2087_reg_1679));
    add_ln2087_2_fu_1305_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln2087_1_fu_1301_p1));
    add_ln2087_3_fu_1329_p2 <= std_logic_vector(unsigned(zext_ln2087_3_fu_1325_p1) + unsigned(add_ln2087_reg_1679));
    add_ln2087_4_fu_1338_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln2087_4_fu_1334_p1));
    add_ln2087_5_fu_1358_p2 <= std_logic_vector(unsigned(zext_ln2087_6_fu_1354_p1) + unsigned(add_ln2087_reg_1679));
    add_ln2087_6_fu_1367_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln2087_7_fu_1363_p1));
    add_ln2087_7_fu_1382_p2 <= std_logic_vector(unsigned(zext_ln2087_9_fu_1378_p1) + unsigned(add_ln2087_reg_1679));
    add_ln2087_8_fu_1391_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln2087_10_fu_1387_p1));
    add_ln2087_fu_1274_p2 <= std_logic_vector(unsigned(p_01_rec_reg_454) + unsigned(ap_const_lv16_E2));
    add_ln2088_fu_1447_p2 <= std_logic_vector(unsigned(zext_ln2088_fu_1443_p1) + unsigned(p_01_rec_reg_454));
    add_ln54_fu_622_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1471) + unsigned(zext_ln54_fu_618_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_559, ap_return_preg, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_return <= p_0_reg_559;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitNumber_assign_4_fu_982_p3 <= (trunc_ln386_6_fu_978_p1 & ap_const_lv1_0);
    bitNumber_assign_fu_819_p3 <= (trunc_ln386_4_reg_1541 & ap_const_lv1_0);
    bytesExpected_1_fu_740_p2 <= std_logic_vector(unsigned(bytesExpected_reg_1501) + unsigned(zext_ln1977_fu_737_p1));
    bytesExpected_2_fu_745_p3 <= 
        bytesExpected_1_fu_740_p2 when (trunc_ln1976_fu_734_p1(0) = '1') else 
        bytesExpected_reg_1501;
    bytesExpected_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv64_7740) + unsigned(inputShareSize_reg_396));
    challenge_1_fu_866_p3 <= (trunc_ln386_5_fu_842_p1 & trunc_ln54_10_fu_862_p1);
    challenge_2_fu_1030_p3 <= (trunc_ln386_7_fu_1006_p1 & trunc_ln54_11_fu_1026_p1);
    challenge_fu_694_p3 <= (trunc_ln386_3_fu_670_p1 & trunc_ln54_9_fu_690_p1);
    i_20_fu_598_p2 <= std_logic_vector(unsigned(round_assign_reg_408) + unsigned(ap_const_lv8_1));
    i_21_fu_794_p2 <= std_logic_vector(unsigned(round_assign_2_reg_431) + unsigned(ap_const_lv8_1));
    i_fu_957_p2 <= std_logic_vector(unsigned(round_assign_3_reg_466) + unsigned(ap_const_lv8_1));
    icmp_ln1940_fu_592_p2 <= "1" when (round_assign_reg_408 = ap_const_lv8_DB) else "0";
    icmp_ln1942_1_fu_708_p2 <= "1" when (challenge_fu_694_p3 = ap_const_lv2_2) else "0";
    icmp_ln1942_fu_702_p2 <= "1" when (challenge_fu_694_p3 = ap_const_lv2_1) else "0";
    icmp_ln1951_fu_788_p2 <= "1" when (unsigned(round_assign_2_reg_431) < unsigned(ap_const_lv8_DB)) else "0";
    icmp_ln1953_fu_874_p2 <= "1" when (challenge_1_fu_866_p3 = ap_const_lv2_3) else "0";
    icmp_ln1968_fu_582_p2 <= "1" when (unsigned(sigBytesLen) < unsigned(ap_const_lv32_37)) else "0";
    icmp_ln1979_fu_752_p2 <= "1" when (unsigned(bytesExpected_2_fu_745_p3) > unsigned(sigBytesLen_cast1_reg_1463)) else "0";
    icmp_ln2039_fu_757_p2 <= "1" when (loop_0_reg_419 = ap_const_lv6_37) else "0";
    icmp_ln2048_fu_880_p2 <= "1" when (loop_1_reg_442 = ap_const_lv6_20) else "0";
    icmp_ln2052_fu_951_p2 <= "1" when (round_assign_3_reg_466 = ap_const_lv8_DB) else "0";
    icmp_ln2057_fu_1051_p2 <= "1" when (loop_2_reg_490 = ap_const_lv6_20) else "0";
    icmp_ln2070_fu_1100_p2 <= "1" when (loop_3_reg_501 = ap_const_lv7_4B) else "0";
    icmp_ln2075_fu_1150_p2 <= "1" when (loop_4_reg_512 = ap_const_lv5_10) else "0";
    icmp_ln2080_fu_1204_p2 <= "1" when (loop_5_reg_524 = ap_const_lv5_10) else "0";
    icmp_ln2084_fu_1268_p2 <= "1" when (tmp_fu_1258_p4 = ap_const_lv2_0) else "0";
    inputShareSize_1_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv64_10) + unsigned(inputShareSize_reg_396));
    inputShareSize_2_fu_726_p3 <= 
        inputShareSize_1_fu_720_p2 when (or_ln1942_fu_714_p2(0) = '1') else 
        inputShareSize_reg_396;
    loop_32_fu_886_p2 <= std_logic_vector(unsigned(loop_1_reg_442) + unsigned(ap_const_lv6_1));
    loop_33_fu_1057_p2 <= std_logic_vector(unsigned(loop_2_reg_490) + unsigned(ap_const_lv6_1));
    loop_34_fu_1106_p2 <= std_logic_vector(unsigned(loop_3_reg_501) + unsigned(ap_const_lv7_1));
    loop_35_fu_1156_p2 <= std_logic_vector(unsigned(loop_4_reg_512) + unsigned(ap_const_lv5_1));
    loop_36_fu_1210_p2 <= std_logic_vector(unsigned(loop_5_reg_524) + unsigned(ap_const_lv5_1));
    loop_37_fu_1406_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_6_reg_535));
    loop_fu_763_p2 <= std_logic_vector(unsigned(loop_0_reg_419) + unsigned(ap_const_lv6_1));
    lshr_ln54_10_fu_856_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_18_fu_852_p1(8-1 downto 0)))));
    lshr_ln54_11_fu_1000_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_19_fu_996_p1(8-1 downto 0)))));
    lshr_ln54_12_fu_1020_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_20_fu_1016_p1(8-1 downto 0)))));
    lshr_ln54_8_fu_684_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_16_fu_680_p1(8-1 downto 0)))));
    lshr_ln54_9_fu_836_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_17_fu_832_p1(8-1 downto 0)))));
    lshr_ln54_fu_664_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_15_fu_660_p1(8-1 downto 0)))));
    mul_ln1977_fu_641_p1 <= mul_ln1977_fu_641_p10(7 - 1 downto 0);
    mul_ln1977_fu_641_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_UnruhGWithout),16));
    mul_ln1977_fu_641_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_DB) * unsigned(mul_ln1977_fu_641_p1), 16));
    or_ln1942_fu_714_p2 <= (icmp_ln1942_fu_702_p2 or icmp_ln1942_1_fu_708_p2);
    or_ln2087_1_fu_1348_p2 <= (trunc_ln2086_fu_1315_p1 or ap_const_lv4_2);
    or_ln2087_2_fu_1372_p2 <= (trunc_ln2086_fu_1315_p1 or ap_const_lv4_3);
    or_ln2087_fu_1319_p2 <= (trunc_ln2086_fu_1315_p1 or ap_const_lv4_1);
        sext_ln2076_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2076_1_fu_1166_p2),8));

        sext_ln2081_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2081_1_fu_1229_p2),8));

    shl_ln_fu_647_p3 <= (trunc_ln386_reg_1491 & ap_const_lv1_0);
    sigBytesLen_cast1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigBytesLen),64));

    sigBytes_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state22, zext_ln54_13_fu_627_p1, zext_ln2040_2_fu_778_p1, zext_ln2049_3_fu_911_p1, zext_ln2058_3_fu_1091_p1, zext_ln2071_3_fu_1141_p1, zext_ln2076_3_fu_1185_p1, zext_ln2081_3_fu_1248_p1, zext_ln2087_2_fu_1310_p1, zext_ln2087_11_fu_1416_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sigBytes_address0 <= zext_ln2087_11_fu_1416_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sigBytes_address0 <= zext_ln2087_2_fu_1310_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sigBytes_address0 <= zext_ln2081_3_fu_1248_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sigBytes_address0 <= zext_ln2076_3_fu_1185_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sigBytes_address0 <= zext_ln2071_3_fu_1141_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sigBytes_address0 <= zext_ln2058_3_fu_1091_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sigBytes_address0 <= zext_ln2049_3_fu_911_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sigBytes_address0 <= zext_ln2040_2_fu_778_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sigBytes_address0 <= zext_ln54_13_fu_627_p1(16 - 1 downto 0);
        else 
            sigBytes_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_address1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, zext_ln2087_5_fu_1343_p1, zext_ln2087_8_fu_1412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sigBytes_address1 <= zext_ln2087_8_fu_1412_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sigBytes_address1 <= zext_ln2087_5_fu_1343_p1(16 - 1 downto 0);
        else 
            sigBytes_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sigBytes_ce0 <= ap_const_logic_1;
        else 
            sigBytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigBytes_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            sigBytes_ce1 <= ap_const_logic_1;
        else 
            sigBytes_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state6, zext_ln2040_fu_783_p1, zext_ln54_12_fu_814_p1, zext_ln54_14_fu_973_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_0_challengeBits_address0 <= zext_ln54_14_fu_973_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sig_0_challengeBits_address0 <= zext_ln54_12_fu_814_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_0_challengeBits_address0 <= zext_ln2040_fu_783_p1(6 - 1 downto 0);
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sig_0_challengeBits_ce0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_challengeBits_d0 <= sigBytes_q0;

    sig_0_challengeBits_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_0_challengeBits_we0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_address0 <= zext_ln2071_4_fu_1146_p1(15 - 1 downto 0);

    sig_0_proofs_commun_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sig_0_proofs_commun_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_d0 <= sigBytes_q0;

    sig_0_proofs_commun_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sig_0_proofs_commun_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_address0 <= zext_ln2087_12_fu_1438_p1(10 - 1 downto 0);

    sig_0_proofs_inputS_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_d0 <= (((sigBytes_q0 & sigBytes_q1) & sigBytes_load_7_reg_1725) & sigBytes_load_6_reg_1720);

    sig_0_proofs_inputS_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_0_proofs_inputS_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_address0 <= zext_ln2076_4_fu_1199_p1(12 - 1 downto 0);

    sig_0_proofs_seed1_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_d0 <= sigBytes_q0;

    sig_0_proofs_seed1_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_0_proofs_seed1_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_address0 <= zext_ln2081_4_fu_1280_p1(12 - 1 downto 0);

    sig_0_proofs_seed2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_d0 <= sigBytes_q0;

    sig_0_proofs_seed2_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_0_proofs_seed2_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_address0 <= zext_ln2058_5_fu_1096_p1(13 - 1 downto 0);

    sig_0_proofs_view3C_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_d0 <= sigBytes_q0;

    sig_0_proofs_view3C_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_0_proofs_view3C_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_address0 <= zext_ln2049_fu_916_p1(5 - 1 downto 0);

    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_0_salt_ce0 <= ap_const_logic_1;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_d0 <= sigBytes_q0;

    sig_0_salt_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_0_salt_we0 <= ap_const_logic_1;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_939_p3 <= (round_assign_3_reg_466 & ap_const_lv5_0);
    tmp_20_fu_1431_p3 <= (round_assign_3_reg_466 & trunc_ln2087_4_reg_1710);
    tmp_63_fu_1284_p3 <= loop_6_reg_535(4 downto 4);
    tmp_fu_1258_p4 <= add_ln2084_fu_1253_p2(2 downto 1);
    tmp_s_fu_927_p3 <= (round_assign_3_reg_466 & ap_const_lv4_0);
    trunc_ln1976_fu_734_p1 <= params_transform_rea(1 - 1 downto 0);
    trunc_ln2086_fu_1315_p1 <= loop_6_reg_535(4 - 1 downto 0);
    trunc_ln386_3_fu_670_p1 <= lshr_ln54_fu_664_p2(1 - 1 downto 0);
    trunc_ln386_4_fu_800_p1 <= round_assign_2_reg_431(2 - 1 downto 0);
    trunc_ln386_5_fu_842_p1 <= lshr_ln54_9_fu_836_p2(1 - 1 downto 0);
    trunc_ln386_6_fu_978_p1 <= round_assign_3_reg_466(2 - 1 downto 0);
    trunc_ln386_7_fu_1006_p1 <= lshr_ln54_11_fu_1000_p2(1 - 1 downto 0);
    trunc_ln386_fu_604_p1 <= round_assign_reg_408(2 - 1 downto 0);
    trunc_ln54_10_fu_862_p1 <= lshr_ln54_10_fu_856_p2(1 - 1 downto 0);
    trunc_ln54_11_fu_1026_p1 <= lshr_ln54_12_fu_1020_p2(1 - 1 downto 0);
    trunc_ln54_6_fu_804_p4 <= round_assign_2_reg_431(7 downto 2);
    trunc_ln54_8_fu_963_p4 <= round_assign_3_reg_466(7 downto 2);
    trunc_ln54_9_fu_690_p1 <= lshr_ln54_8_fu_684_p2(1 - 1 downto 0);
    trunc_ln54_fu_588_p1 <= sigBytes_offset(17 - 1 downto 0);
    trunc_ln_fu_608_p4 <= round_assign_reg_408(7 downto 2);
    xor_ln54_2_fu_674_p2 <= (shl_ln_fu_647_p3 xor ap_const_lv3_7);
    xor_ln54_3_fu_826_p2 <= (bitNumber_assign_fu_819_p3 xor ap_const_lv3_6);
    xor_ln54_4_fu_846_p2 <= (bitNumber_assign_fu_819_p3 xor ap_const_lv3_7);
    xor_ln54_5_fu_990_p2 <= (bitNumber_assign_4_fu_982_p3 xor ap_const_lv3_6);
    xor_ln54_6_fu_1010_p2 <= (bitNumber_assign_4_fu_982_p3 xor ap_const_lv3_7);
    xor_ln54_fu_654_p2 <= (shl_ln_fu_647_p3 xor ap_const_lv3_6);
    zext_ln1977_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1977_reg_1507),64));
    zext_ln2040_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_419),17));
    zext_ln2040_2_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2040_fu_773_p2),64));
    zext_ln2040_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_419),64));
    zext_ln2049_1_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_442),7));
    zext_ln2049_2_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2049_fu_896_p2),17));
    zext_ln2049_3_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2049_1_fu_906_p2),64));
    zext_ln2049_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_442),64));
    zext_ln2052_1_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_reg_454),17));
    zext_ln2052_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_939_p3),14));
    zext_ln2058_1_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_490),7));
    zext_ln2058_2_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_2_fu_1076_p2),17));
    zext_ln2058_3_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_1_fu_1086_p2),64));
    zext_ln2058_4_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_490),14));
    zext_ln2058_5_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_3_reg_1617),64));
    zext_ln2058_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_927_p3),13));
    zext_ln2071_1_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_501),8));
    zext_ln2071_2_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_1_fu_1126_p2),17));
    zext_ln2071_3_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_2_fu_1136_p2),64));
    zext_ln2071_4_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_reg_1635),64));
    zext_ln2071_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_501),15));
    zext_ln2076_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_512),7));
    zext_ln2076_2_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2076_fu_1172_p1),17));
    zext_ln2076_3_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2076_2_fu_1180_p2),64));
    zext_ln2076_4_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2076_fu_1194_p2),64));
    zext_ln2076_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_512),13));
    zext_ln2081_1_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_524),7));
    zext_ln2081_2_fu_1239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2081_fu_1235_p1),17));
    zext_ln2081_3_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2081_2_fu_1243_p2),64));
    zext_ln2081_4_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2081_reg_1666),64));
    zext_ln2081_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_524),13));
    zext_ln2087_10_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_7_fu_1382_p2),17));
    zext_ln2087_11_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_8_reg_1705),64));
    zext_ln2087_12_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1431_p3),64));
    zext_ln2087_1_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_1_fu_1296_p2),17));
    zext_ln2087_2_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_2_fu_1305_p2),64));
    zext_ln2087_3_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_fu_1319_p2),16));
    zext_ln2087_4_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_3_fu_1329_p2),17));
    zext_ln2087_5_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_4_fu_1338_p2),64));
    zext_ln2087_6_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_1_fu_1348_p2),16));
    zext_ln2087_7_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_5_fu_1358_p2),17));
    zext_ln2087_8_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_6_reg_1700),64));
    zext_ln2087_9_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_2_fu_1372_p2),16));
    zext_ln2087_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_535),16));
    zext_ln2088_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_pn_reg_546),16));
    zext_ln386_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(challenge_2_fu_1030_p3),3));
    zext_ln54_12_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_6_fu_804_p4),64));
    zext_ln54_13_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_622_p2),64));
    zext_ln54_14_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_8_fu_963_p4),64));
    zext_ln54_15_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_654_p2),8));
    zext_ln54_16_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_2_fu_674_p2),8));
    zext_ln54_17_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_3_fu_826_p2),8));
    zext_ln54_18_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_4_fu_846_p2),8));
    zext_ln54_19_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_5_fu_990_p2),8));
    zext_ln54_20_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_6_fu_1010_p2),8));
    zext_ln54_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_608_p4),17));
end behav;
