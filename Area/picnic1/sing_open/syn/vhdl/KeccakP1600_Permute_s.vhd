-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakP1600_Permute_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of KeccakP1600_Permute_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakRhoOffsets_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRhoOffsets_ce0 : STD_LOGIC;
    signal KeccakRhoOffsets_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal KeccakRoundConstants_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRoundConstants_ce0 : STD_LOGIC;
    signal KeccakRoundConstants_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_37_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_37_reg_538 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal stateAsWords_addr_1_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln269_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_257_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_562 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln271_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_38_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_38_reg_575 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln353_fu_348_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln353_reg_588 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln352_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_358_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_596 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln352_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal stateAsWords_addr_3_reg_611 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln353_fu_439_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln353_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_629 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln280_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln6_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln6_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_load_1_reg_644 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_19_fu_493_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce0 : STD_LOGIC;
    signal stateAsWords_we0 : STD_LOGIC;
    signal stateAsWords_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce1 : STD_LOGIC;
    signal stateAsWords_we1 : STD_LOGIC;
    signal stateAsWords_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_theta_fu_225_ap_start : STD_LOGIC;
    signal grp_theta_fu_225_ap_done : STD_LOGIC;
    signal grp_theta_fu_225_ap_idle : STD_LOGIC;
    signal grp_theta_fu_225_ap_ready : STD_LOGIC;
    signal grp_theta_fu_225_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_225_A_ce0 : STD_LOGIC;
    signal grp_theta_fu_225_A_we0 : STD_LOGIC;
    signal grp_theta_fu_225_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_chi_fu_230_ap_start : STD_LOGIC;
    signal grp_chi_fu_230_ap_done : STD_LOGIC;
    signal grp_chi_fu_230_ap_idle : STD_LOGIC;
    signal grp_chi_fu_230_ap_ready : STD_LOGIC;
    signal grp_chi_fu_230_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_230_A_ce0 : STD_LOGIC;
    signal grp_chi_fu_230_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_230_A_ce1 : STD_LOGIC;
    signal grp_chi_fu_230_A_we1 : STD_LOGIC;
    signal grp_chi_fu_230_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_235_ap_start : STD_LOGIC;
    signal grp_pi_fu_235_ap_done : STD_LOGIC;
    signal grp_pi_fu_235_ap_idle : STD_LOGIC;
    signal grp_pi_fu_235_ap_ready : STD_LOGIC;
    signal grp_pi_fu_235_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_235_A_ce0 : STD_LOGIC;
    signal grp_pi_fu_235_A_we0 : STD_LOGIC;
    signal grp_pi_fu_235_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_reg_145 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_i_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indexRound_assign_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal x_0_i_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal y_0_i_reg_191 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_0_i3_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln281_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i5_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_theta_fu_225_ap_start_reg : STD_LOGIC := '0';
    signal grp_chi_fu_230_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_pi_fu_235_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln270_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_3_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_2_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln272_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln382_fu_451_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln272_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln272_fu_295_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln272_1_fu_299_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln272_1_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_2_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln272_fu_311_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_1_fu_364_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln353_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln7_fu_368_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln353_2_fu_381_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln353_1_fu_385_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln353_5_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_4_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln353_fu_417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln353_6_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln353_fu_427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln353_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln353_fu_433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln282_fu_499_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln282_1_fu_503_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln282_1_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln282_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln282_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component theta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component chi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakP1600_Permucud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakP1600_PermudEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakP1600_PermueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakRhoOffsets_U : component KeccakP1600_Permucud
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRhoOffsets_address0,
        ce0 => KeccakRhoOffsets_ce0,
        q0 => KeccakRhoOffsets_q0);

    KeccakRoundConstants_U : component KeccakP1600_PermudEe
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRoundConstants_address0,
        ce0 => KeccakRoundConstants_ce0,
        q0 => KeccakRoundConstants_q0);

    stateAsWords_U : component KeccakP1600_PermueOg
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stateAsWords_address0,
        ce0 => stateAsWords_ce0,
        we0 => stateAsWords_we0,
        d0 => stateAsWords_d0,
        q0 => stateAsWords_q0,
        address1 => stateAsWords_address1,
        ce1 => stateAsWords_ce1,
        we1 => stateAsWords_we1,
        d1 => stateAsWords_d1,
        q1 => stateAsWords_q1);

    grp_theta_fu_225 : component theta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_theta_fu_225_ap_start,
        ap_done => grp_theta_fu_225_ap_done,
        ap_idle => grp_theta_fu_225_ap_idle,
        ap_ready => grp_theta_fu_225_ap_ready,
        A_address0 => grp_theta_fu_225_A_address0,
        A_ce0 => grp_theta_fu_225_A_ce0,
        A_we0 => grp_theta_fu_225_A_we0,
        A_d0 => grp_theta_fu_225_A_d0,
        A_q0 => stateAsWords_q0);

    grp_chi_fu_230 : component chi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chi_fu_230_ap_start,
        ap_done => grp_chi_fu_230_ap_done,
        ap_idle => grp_chi_fu_230_ap_idle,
        ap_ready => grp_chi_fu_230_ap_ready,
        A_address0 => grp_chi_fu_230_A_address0,
        A_ce0 => grp_chi_fu_230_A_ce0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_chi_fu_230_A_address1,
        A_ce1 => grp_chi_fu_230_A_ce1,
        A_we1 => grp_chi_fu_230_A_we1,
        A_d1 => grp_chi_fu_230_A_d1,
        A_q1 => stateAsWords_q1);

    grp_pi_fu_235 : component pi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pi_fu_235_ap_start,
        ap_done => grp_pi_fu_235_ap_done,
        ap_idle => grp_pi_fu_235_ap_idle,
        ap_ready => grp_pi_fu_235_ap_ready,
        A_address0 => grp_pi_fu_235_A_address0,
        A_ce0 => grp_pi_fu_235_A_ce0,
        A_we0 => grp_pi_fu_235_A_we0,
        A_d0 => grp_pi_fu_235_A_d0,
        A_q0 => stateAsWords_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_chi_fu_230_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chi_fu_230_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_chi_fu_230_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chi_fu_230_ap_ready = ap_const_logic_1)) then 
                    grp_chi_fu_230_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pi_fu_235_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pi_fu_235_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln352_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_pi_fu_235_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pi_fu_235_ap_ready = ap_const_logic_1)) then 
                    grp_pi_fu_235_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_theta_fu_225_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_theta_fu_225_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln293_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_theta_fu_225_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_theta_fu_225_ap_ready = ap_const_logic_1)) then 
                    grp_theta_fu_225_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i3_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i3_reg_202 <= ap_const_lv5_0;
            elsif (((icmp_ln281_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_i3_reg_202 <= i_reg_629;
            end if; 
        end if;
    end process;

    i_0_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln271_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_145 <= i_37_reg_538;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_145 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indexRound_assign_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indexRound_assign_reg_168 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indexRound_assign_reg_168 <= i_38_reg_575;
            end if; 
        end if;
    end process;

    j_0_i5_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_0_i5_reg_214 <= ap_const_lv4_0;
            elsif (((icmp_ln281_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j_0_i5_reg_214 <= j_19_fu_493_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_i_reg_156 <= j_reg_562;
            elsif (((icmp_ln269_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_0_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_1_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_i_reg_180 <= x_reg_583;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_theta_fu_225_ap_done = ap_const_logic_1))) then 
                x_0_i_reg_180 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                y_0_i_reg_191 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                y_0_i_reg_191 <= y_reg_596;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_37_reg_538 <= i_37_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_38_reg_575 <= i_38_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_reg_629 <= i_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_1_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                icmp_ln353_reg_606 <= icmp_ln353_fu_397_p2;
                stateAsWords_addr_3_reg_611 <= zext_ln353_3_fu_391_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_562 <= j_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln353_reg_616 <= select_ln353_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    shl_ln6_reg_639(7 downto 3) <= shl_ln6_fu_475_p3(7 downto 3);
                stateAsWords_load_1_reg_644 <= stateAsWords_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_548(7 downto 3) <= shl_ln_fu_257_p3(7 downto 3);
                stateAsWords_addr_1_reg_543 <= zext_ln270_fu_252_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_reg_583 <= x_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                y_reg_596 <= y_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln353_reg_588(2 downto 0) <= zext_ln353_fu_348_p1(2 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_548(2 downto 0) <= "000";
    zext_ln353_reg_588(3) <= '0';
    shl_ln6_reg_639(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln269_fu_240_p2, ap_CS_fsm_state3, icmp_ln271_fu_269_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln352_fu_336_p2, ap_CS_fsm_state8, icmp_ln352_1_fu_352_p2, ap_CS_fsm_state16, icmp_ln280_fu_458_p2, ap_CS_fsm_state18, grp_theta_fu_225_ap_done, grp_chi_fu_230_ap_done, grp_pi_fu_235_ap_done, ap_CS_fsm_state6, icmp_ln281_fu_487_p2, icmp_ln293_fu_324_p2, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln269_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln271_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln293_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_theta_fu_225_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln352_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln352_1_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                if (((grp_pi_fu_235_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_chi_fu_230_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln280_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln281_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    KeccakRhoOffsets_address0 <= zext_ln353_3_fu_391_p1(5 - 1 downto 0);

    KeccakRhoOffsets_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            KeccakRhoOffsets_ce0 <= ap_const_logic_1;
        else 
            KeccakRhoOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakRoundConstants_address0 <= zext_ln382_fu_446_p1(5 - 1 downto 0);

    KeccakRoundConstants_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            KeccakRoundConstants_ce0 <= ap_const_logic_1;
        else 
            KeccakRoundConstants_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln272_fu_281_p2 <= std_logic_vector(unsigned(shl_ln_reg_548) + unsigned(zext_ln271_fu_265_p1));
    add_ln282_fu_525_p2 <= std_logic_vector(unsigned(shl_ln6_reg_639) + unsigned(zext_ln281_fu_483_p1));
    add_ln353_1_fu_385_p2 <= std_logic_vector(unsigned(shl_ln7_fu_368_p3) + unsigned(zext_ln353_2_fu_381_p1));
    add_ln353_fu_376_p2 <= std_logic_vector(unsigned(zext_ln353_reg_588) + unsigned(zext_ln353_1_fu_364_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, icmp_ln280_fu_458_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln280_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln280_fu_458_p2)
    begin
        if (((icmp_ln280_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_chi_fu_230_ap_start <= grp_chi_fu_230_ap_start_reg;
    grp_pi_fu_235_ap_start <= grp_pi_fu_235_ap_start_reg;
    grp_theta_fu_225_ap_start <= grp_theta_fu_225_ap_start_reg;
    i_37_fu_246_p2 <= std_logic_vector(unsigned(i_0_i_reg_145) + unsigned(ap_const_lv5_1));
    i_38_fu_330_p2 <= std_logic_vector(unsigned(indexRound_assign_reg_168) + unsigned(ap_const_lv5_1));
    i_fu_464_p2 <= std_logic_vector(unsigned(i_0_i3_reg_202) + unsigned(ap_const_lv5_1));
    icmp_ln269_fu_240_p2 <= "1" when (i_0_i_reg_145 = ap_const_lv5_19) else "0";
    icmp_ln271_fu_269_p2 <= "1" when (j_0_i_reg_156 = ap_const_lv4_8) else "0";
    icmp_ln280_fu_458_p2 <= "1" when (i_0_i3_reg_202 = ap_const_lv5_19) else "0";
    icmp_ln281_fu_487_p2 <= "1" when (j_0_i5_reg_214 = ap_const_lv4_8) else "0";
    icmp_ln293_fu_324_p2 <= "1" when (indexRound_assign_reg_168 = ap_const_lv5_18) else "0";
    icmp_ln352_1_fu_352_p2 <= "1" when (y_0_i_reg_191 = ap_const_lv3_5) else "0";
    icmp_ln352_fu_336_p2 <= "1" when (x_0_i_reg_180 = ap_const_lv3_5) else "0";
    icmp_ln353_fu_397_p2 <= "1" when (add_ln353_1_fu_385_p2 = ap_const_lv5_0) else "0";
    j_19_fu_493_p2 <= std_logic_vector(unsigned(j_0_i5_reg_214) + unsigned(ap_const_lv4_1));
    j_fu_275_p2 <= std_logic_vector(unsigned(j_0_i_reg_156) + unsigned(ap_const_lv4_1));
    lshr_ln282_fu_515_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_load_1_reg_644),to_integer(unsigned('0' & zext_ln282_1_fu_511_p1(31-1 downto 0)))));
    lshr_ln353_fu_427_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_6_fu_423_p1(31-1 downto 0)))));
    or_ln272_fu_317_p2 <= (stateAsWords_q0 or shl_ln272_fu_311_p2);
    select_ln353_fu_439_p3 <= 
        stateAsWords_q0 when (icmp_ln353_reg_606(0) = '1') else 
        xor_ln353_fu_433_p2;
    shl_ln272_1_fu_299_p3 <= (trunc_ln272_fu_295_p1 & ap_const_lv3_0);
    shl_ln272_fu_311_p2 <= std_logic_vector(shift_left(unsigned(zext_ln272_1_fu_291_p1),to_integer(unsigned('0' & zext_ln272_2_fu_307_p1(31-1 downto 0)))));
    shl_ln282_1_fu_503_p3 <= (trunc_ln282_fu_499_p1 & ap_const_lv3_0);
    shl_ln353_fu_411_p2 <= std_logic_vector(shift_left(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_5_fu_407_p1(31-1 downto 0)))));
    shl_ln6_fu_475_p3 <= (i_0_i3_reg_202 & ap_const_lv3_0);
    shl_ln7_fu_368_p3 <= (y_0_i_reg_191 & ap_const_lv2_0);
    shl_ln_fu_257_p3 <= (i_0_i_reg_145 & ap_const_lv3_0);

    stateAsWords_address0_assign_proc : process(ap_CS_fsm_state2, stateAsWords_addr_1_reg_543, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state16, grp_theta_fu_225_A_address0, grp_chi_fu_230_A_address0, grp_pi_fu_235_A_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state11, zext_ln270_fu_252_p1, zext_ln282_fu_470_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_address0 <= zext_ln282_fu_470_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stateAsWords_address0 <= stateAsWords_addr_1_reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stateAsWords_address0 <= zext_ln270_fu_252_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            stateAsWords_address0 <= grp_pi_fu_235_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_address0 <= grp_chi_fu_230_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_address0 <= grp_theta_fu_225_A_address0;
        else 
            stateAsWords_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_address1_assign_proc : process(ap_CS_fsm_state8, stateAsWords_addr_3_reg_611, ap_CS_fsm_state14, grp_chi_fu_230_A_address1, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state13, zext_ln353_3_fu_391_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            stateAsWords_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_address1 <= stateAsWords_addr_3_reg_611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_address1 <= zext_ln353_3_fu_391_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_address1 <= grp_chi_fu_230_A_address1;
        else 
            stateAsWords_address1 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state16, grp_theta_fu_225_A_ce0, grp_chi_fu_230_A_ce0, grp_pi_fu_235_A_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            stateAsWords_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            stateAsWords_ce0 <= grp_pi_fu_235_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_ce0 <= grp_chi_fu_230_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_ce0 <= grp_theta_fu_225_A_ce0;
        else 
            stateAsWords_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, grp_chi_fu_230_A_ce1, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            stateAsWords_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_ce1 <= grp_chi_fu_230_A_ce1;
        else 
            stateAsWords_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_d0_assign_proc : process(ap_CS_fsm_state2, grp_theta_fu_225_A_d0, grp_pi_fu_235_A_d0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state11, or_ln272_fu_317_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stateAsWords_d0 <= or_ln272_fu_317_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stateAsWords_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            stateAsWords_d0 <= grp_pi_fu_235_A_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_d0 <= grp_theta_fu_225_A_d0;
        else 
            stateAsWords_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_d1_assign_proc : process(select_ln353_reg_616, grp_chi_fu_230_A_d1, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state13, xor_ln382_fu_451_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            stateAsWords_d1 <= xor_ln382_fu_451_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_d1 <= select_ln353_reg_616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_d1 <= grp_chi_fu_230_A_d1;
        else 
            stateAsWords_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln269_fu_240_p2, grp_theta_fu_225_A_we0, grp_pi_fu_235_A_we0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln269_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stateAsWords_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            stateAsWords_we0 <= grp_pi_fu_235_A_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_we0 <= grp_theta_fu_225_A_we0;
        else 
            stateAsWords_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_we1_assign_proc : process(grp_chi_fu_230_A_we1, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            stateAsWords_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            stateAsWords_we1 <= grp_chi_fu_230_A_we1;
        else 
            stateAsWords_we1 <= ap_const_logic_0;
        end if; 
    end process;


    state_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, zext_ln272_fu_286_p1, zext_ln282_2_fu_530_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0 <= zext_ln282_2_fu_530_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= zext_ln272_fu_286_p1(8 - 1 downto 0);
        else 
            state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= lshr_ln282_fu_515_p2(8 - 1 downto 0);

    state_we0_assign_proc : process(ap_CS_fsm_state18, icmp_ln281_fu_487_p2)
    begin
        if (((icmp_ln281_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln353_fu_417_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln353_4_fu_403_p1));
    trunc_ln272_fu_295_p1 <= j_0_i_reg_156(3 - 1 downto 0);
    trunc_ln282_fu_499_p1 <= j_0_i5_reg_214(3 - 1 downto 0);
    x_fu_342_p2 <= std_logic_vector(unsigned(x_0_i_reg_180) + unsigned(ap_const_lv3_1));
    xor_ln353_fu_433_p2 <= (shl_ln353_fu_411_p2 xor lshr_ln353_fu_427_p2);
    xor_ln382_fu_451_p2 <= (stateAsWords_q1 xor KeccakRoundConstants_q0);
    y_fu_358_p2 <= std_logic_vector(unsigned(y_0_i_reg_191) + unsigned(ap_const_lv3_1));
    zext_ln270_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_145),64));
    zext_ln271_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_156),8));
    zext_ln272_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln272_2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln272_1_fu_299_p3),64));
    zext_ln272_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln272_fu_281_p2),64));
    zext_ln281_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i5_reg_214),8));
    zext_ln282_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln282_1_fu_503_p3),64));
    zext_ln282_2_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln282_fu_525_p2),64));
    zext_ln282_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i3_reg_202),64));
    zext_ln353_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_i_reg_191),4));
    zext_ln353_2_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_fu_376_p2),5));
    zext_ln353_3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_1_fu_385_p2),64));
    zext_ln353_4_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),7));
    zext_ln353_5_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),64));
    zext_ln353_6_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln353_fu_417_p2),64));
    zext_ln353_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_i_reg_180),4));
    zext_ln382_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexRound_assign_reg_168),64));
end behav;
