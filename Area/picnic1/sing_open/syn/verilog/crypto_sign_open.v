// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_sign_open,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=317,HLS_SYN_DSP=2,HLS_SYN_FF=34240,HLS_SYN_LUT=94011,HLS_VERSION=2019_2}" *)

module crypto_sign_open (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_address0,
        m_ce0,
        m_we0,
        m_d0,
        mlen_address0,
        mlen_ce0,
        mlen_we0,
        mlen_d0,
        sm_address0,
        sm_ce0,
        sm_q0,
        sm_address1,
        sm_ce1,
        sm_q1,
        smlen,
        pk_address0,
        pk_ce0,
        pk_q0,
        viewOutputs_address0,
        viewOutputs_ce0,
        viewOutputs_we0,
        viewOutputs_d0,
        viewOutputs_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] m_address0;
output   m_ce0;
output   m_we0;
output  [7:0] m_d0;
output  [0:0] mlen_address0;
output   mlen_ce0;
output   mlen_we0;
output  [63:0] mlen_d0;
output  [15:0] sm_address0;
output   sm_ce0;
input  [7:0] sm_q0;
output  [15:0] sm_address1;
output   sm_ce1;
input  [7:0] sm_q1;
input  [63:0] smlen;
output  [5:0] pk_address0;
output   pk_ce0;
input  [7:0] pk_q0;
output  [13:0] viewOutputs_address0;
output   viewOutputs_ce0;
output   viewOutputs_we0;
output  [31:0] viewOutputs_d0;
input  [31:0] viewOutputs_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_ce0;
reg m_we0;
reg mlen_ce0;
reg mlen_we0;
reg[15:0] sm_address0;
reg sm_ce0;
reg[15:0] sm_address1;
reg sm_ce1;
reg[5:0] pk_address0;
reg pk_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [3:0] pubkey_0_params_fu_312_p1;
reg   [3:0] pubkey_0_params_reg_534;
wire   [4:0] loop_38_fu_400_p2;
reg   [4:0] loop_38_reg_545;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln576_fu_394_p2;
wire   [4:0] loop_39_fu_426_p2;
reg   [4:0] loop_39_reg_558;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln581_fu_420_p2;
reg   [7:0] sm_load_reg_578;
wire    ap_CS_fsm_state7;
reg   [7:0] sm_load_1_reg_583;
wire   [31:0] signature_len_fu_448_p5;
reg   [31:0] signature_len_reg_593;
wire    ap_CS_fsm_state8;
wire   [63:0] sub_ln146_fu_473_p2;
reg   [63:0] sub_ln146_reg_601;
wire   [0:0] icmp_ln142_fu_467_p2;
wire   [63:0] message_len_fu_478_p2;
reg   [63:0] message_len_reg_607;
wire    ap_CS_fsm_state9;
wire  signed [63:0] sext_ln154_fu_483_p1;
reg  signed [63:0] sext_ln154_reg_617;
wire    ap_CS_fsm_state12;
wire   [31:0] loop_fu_492_p2;
reg   [31:0] loop_reg_625;
wire   [0:0] icmp_ln154_fu_487_p2;
reg   [4:0] pubkey_0_plaintext_address0;
reg    pubkey_0_plaintext_ce0;
reg    pubkey_0_plaintext_we0;
wire   [7:0] pubkey_0_plaintext_q0;
reg    pubkey_0_plaintext_ce1;
wire   [7:0] pubkey_0_plaintext_q1;
reg   [4:0] pubkey_0_ciphertext_address0;
reg    pubkey_0_ciphertext_ce0;
reg    pubkey_0_ciphertext_we0;
wire   [7:0] pubkey_0_ciphertext_q0;
reg    pubkey_0_ciphertext_ce1;
wire   [7:0] pubkey_0_ciphertext_q1;
wire    grp_picnic_verify_fu_288_ap_start;
wire    grp_picnic_verify_fu_288_ap_done;
wire    grp_picnic_verify_fu_288_ap_idle;
wire    grp_picnic_verify_fu_288_ap_ready;
wire   [4:0] grp_picnic_verify_fu_288_pk_0_plaintext_address0;
wire    grp_picnic_verify_fu_288_pk_0_plaintext_ce0;
wire   [4:0] grp_picnic_verify_fu_288_pk_0_plaintext_address1;
wire    grp_picnic_verify_fu_288_pk_0_plaintext_ce1;
wire   [4:0] grp_picnic_verify_fu_288_pk_0_ciphertext_address0;
wire    grp_picnic_verify_fu_288_pk_0_ciphertext_ce0;
wire   [4:0] grp_picnic_verify_fu_288_pk_0_ciphertext_address1;
wire    grp_picnic_verify_fu_288_pk_0_ciphertext_ce1;
wire   [15:0] grp_picnic_verify_fu_288_message_address0;
wire    grp_picnic_verify_fu_288_message_ce0;
wire   [15:0] grp_picnic_verify_fu_288_message_address1;
wire    grp_picnic_verify_fu_288_message_ce1;
wire   [13:0] grp_picnic_verify_fu_288_viewOutputs_address0;
wire    grp_picnic_verify_fu_288_viewOutputs_ce0;
wire    grp_picnic_verify_fu_288_viewOutputs_we0;
wire   [31:0] grp_picnic_verify_fu_288_viewOutputs_d0;
wire   [0:0] grp_picnic_verify_fu_288_ap_return;
reg   [4:0] loop_0_i_reg_233;
wire    ap_CS_fsm_state4;
wire   [0:0] empty_189_fu_388_p2;
reg   [4:0] loop_1_i_reg_245;
wire    ap_CS_fsm_state6;
reg  signed [31:0] loop_0_reg_257;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state11;
reg   [1:0] p_0_reg_268;
reg    grp_picnic_verify_fu_288_ap_start_reg;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln577_fu_406_p1;
wire   [63:0] zext_ln577_1_fu_411_p1;
wire   [63:0] zext_ln582_fu_438_p1;
wire   [63:0] zext_ln582_1_fu_443_p1;
wire  signed [63:0] sext_ln155_fu_504_p1;
wire   [0:0] empty_178_fu_322_p2;
wire   [0:0] empty_fu_316_p2;
wire   [0:0] empty_180_fu_334_p2;
wire   [0:0] empty_179_fu_328_p2;
wire   [0:0] empty_182_fu_346_p2;
wire   [0:0] empty_181_fu_340_p2;
wire   [0:0] empty_184_fu_358_p2;
wire   [0:0] empty_183_fu_352_p2;
wire   [0:0] empty_186_fu_370_p2;
wire   [0:0] empty_185_fu_364_p2;
wire   [0:0] empty_188_fu_382_p2;
wire   [0:0] empty_187_fu_376_p2;
wire   [5:0] zext_ln581_fu_416_p1;
wire   [5:0] add_ln582_1_fu_432_p2;
wire   [63:0] zext_ln142_fu_458_p1;
wire   [63:0] add_ln142_fu_462_p2;
wire   [31:0] add_ln155_fu_498_p2;
wire    ap_CS_fsm_state14;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_picnic_verify_fu_288_ap_start_reg = 1'b0;
end

crypto_sign_open_Mgi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
pubkey_0_plaintext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pubkey_0_plaintext_address0),
    .ce0(pubkey_0_plaintext_ce0),
    .we0(pubkey_0_plaintext_we0),
    .d0(pk_q0),
    .q0(pubkey_0_plaintext_q0),
    .address1(grp_picnic_verify_fu_288_pk_0_plaintext_address1),
    .ce1(pubkey_0_plaintext_ce1),
    .q1(pubkey_0_plaintext_q1)
);

crypto_sign_open_Mgi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
pubkey_0_ciphertext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pubkey_0_ciphertext_address0),
    .ce0(pubkey_0_ciphertext_ce0),
    .we0(pubkey_0_ciphertext_we0),
    .d0(pk_q0),
    .q0(pubkey_0_ciphertext_q0),
    .address1(grp_picnic_verify_fu_288_pk_0_ciphertext_address1),
    .ce1(pubkey_0_ciphertext_ce1),
    .q1(pubkey_0_ciphertext_q1)
);

picnic_verify grp_picnic_verify_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_picnic_verify_fu_288_ap_start),
    .ap_done(grp_picnic_verify_fu_288_ap_done),
    .ap_idle(grp_picnic_verify_fu_288_ap_idle),
    .ap_ready(grp_picnic_verify_fu_288_ap_ready),
    .pk_0_params_read(pubkey_0_params_reg_534),
    .pk_0_plaintext_address0(grp_picnic_verify_fu_288_pk_0_plaintext_address0),
    .pk_0_plaintext_ce0(grp_picnic_verify_fu_288_pk_0_plaintext_ce0),
    .pk_0_plaintext_q0(pubkey_0_plaintext_q0),
    .pk_0_plaintext_address1(grp_picnic_verify_fu_288_pk_0_plaintext_address1),
    .pk_0_plaintext_ce1(grp_picnic_verify_fu_288_pk_0_plaintext_ce1),
    .pk_0_plaintext_q1(pubkey_0_plaintext_q1),
    .pk_0_ciphertext_address0(grp_picnic_verify_fu_288_pk_0_ciphertext_address0),
    .pk_0_ciphertext_ce0(grp_picnic_verify_fu_288_pk_0_ciphertext_ce0),
    .pk_0_ciphertext_q0(pubkey_0_ciphertext_q0),
    .pk_0_ciphertext_address1(grp_picnic_verify_fu_288_pk_0_ciphertext_address1),
    .pk_0_ciphertext_ce1(grp_picnic_verify_fu_288_pk_0_ciphertext_ce1),
    .pk_0_ciphertext_q1(pubkey_0_ciphertext_q1),
    .message_address0(grp_picnic_verify_fu_288_message_address0),
    .message_ce0(grp_picnic_verify_fu_288_message_ce0),
    .message_q0(sm_q0),
    .message_address1(grp_picnic_verify_fu_288_message_address1),
    .message_ce1(grp_picnic_verify_fu_288_message_ce1),
    .message_q1(sm_q1),
    .message_len(message_len_reg_607),
    .signature_offset(sub_ln146_reg_601),
    .signature_len(signature_len_reg_593),
    .viewOutputs_address0(grp_picnic_verify_fu_288_viewOutputs_address0),
    .viewOutputs_ce0(grp_picnic_verify_fu_288_viewOutputs_ce0),
    .viewOutputs_we0(grp_picnic_verify_fu_288_viewOutputs_we0),
    .viewOutputs_d0(grp_picnic_verify_fu_288_viewOutputs_d0),
    .viewOutputs_q0(viewOutputs_q0),
    .ap_return(grp_picnic_verify_fu_288_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_picnic_verify_fu_288_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_picnic_verify_fu_288_ap_start_reg <= 1'b1;
        end else if ((grp_picnic_verify_fu_288_ap_ready == 1'b1)) begin
            grp_picnic_verify_fu_288_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (empty_189_fu_388_p2 == 1'd0))) begin
        loop_0_i_reg_233 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        loop_0_i_reg_233 <= loop_38_reg_545;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_picnic_verify_fu_288_ap_done == 1'b1) & (grp_picnic_verify_fu_288_ap_return == 1'd0))) begin
        loop_0_reg_257 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        loop_0_reg_257 <= loop_reg_625;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln576_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        loop_1_i_reg_245 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        loop_1_i_reg_245 <= loop_39_reg_558;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_picnic_verify_fu_288_ap_done == 1'b1) & (grp_picnic_verify_fu_288_ap_return == 1'd1))) begin
        p_0_reg_268 <= 2'd3;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (empty_189_fu_388_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln142_fu_467_p2 == 1'd1)))) begin
        p_0_reg_268 <= 2'd2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln154_fu_487_p2 == 1'd0))) begin
        p_0_reg_268 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_38_reg_545 <= loop_38_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_39_reg_558 <= loop_39_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_reg_625 <= loop_fu_492_p2;
        sext_ln154_reg_617 <= sext_ln154_fu_483_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        message_len_reg_607 <= message_len_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_0_params_reg_534 <= pubkey_0_params_fu_312_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        signature_len_reg_593 <= signature_len_fu_448_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sm_load_1_reg_583 <= sm_q1;
        sm_load_reg_578 <= sm_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln142_fu_467_p2 == 1'd0))) begin
        sub_ln146_reg_601 <= sub_ln146_fu_473_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mlen_ce0 = 1'b1;
    end else begin
        mlen_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln154_fu_487_p2 == 1'd0))) begin
        mlen_we0 = 1'b1;
    end else begin
        mlen_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pk_address0 = zext_ln582_fu_438_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pk_address0 = zext_ln577_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pk_address0 = 64'd0;
    end else begin
        pk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        pk_ce0 = 1'b1;
    end else begin
        pk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pubkey_0_ciphertext_address0 = zext_ln577_1_fu_411_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_ciphertext_address0 = grp_picnic_verify_fu_288_pk_0_ciphertext_address0;
    end else begin
        pubkey_0_ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pubkey_0_ciphertext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_ciphertext_ce0 = grp_picnic_verify_fu_288_pk_0_ciphertext_ce0;
    end else begin
        pubkey_0_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_ciphertext_ce1 = grp_picnic_verify_fu_288_pk_0_ciphertext_ce1;
    end else begin
        pubkey_0_ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pubkey_0_ciphertext_we0 = 1'b1;
    end else begin
        pubkey_0_ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pubkey_0_plaintext_address0 = zext_ln582_1_fu_443_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_plaintext_address0 = grp_picnic_verify_fu_288_pk_0_plaintext_address0;
    end else begin
        pubkey_0_plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pubkey_0_plaintext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_plaintext_ce0 = grp_picnic_verify_fu_288_pk_0_plaintext_ce0;
    end else begin
        pubkey_0_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pubkey_0_plaintext_ce1 = grp_picnic_verify_fu_288_pk_0_plaintext_ce1;
    end else begin
        pubkey_0_plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pubkey_0_plaintext_we0 = 1'b1;
    end else begin
        pubkey_0_plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sm_address0 = sext_ln155_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sm_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sm_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sm_address0 = grp_picnic_verify_fu_288_message_address0;
    end else begin
        sm_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sm_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sm_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sm_address1 = grp_picnic_verify_fu_288_message_address1;
    end else begin
        sm_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        sm_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sm_ce0 = grp_picnic_verify_fu_288_message_ce0;
    end else begin
        sm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        sm_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sm_ce1 = grp_picnic_verify_fu_288_message_ce1;
    end else begin
        sm_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (empty_189_fu_388_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln576_fu_394_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln581_fu_420_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln142_fu_467_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_picnic_verify_fu_288_ap_done == 1'b1) & (grp_picnic_verify_fu_288_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state11) & (grp_picnic_verify_fu_288_ap_done == 1'b1) & (grp_picnic_verify_fu_288_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln154_fu_487_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln142_fu_462_p2 = ($signed(smlen) + $signed(64'd18446744073709551611));

assign add_ln155_fu_498_p2 = ($signed(loop_0_reg_257) + $signed(32'd4));

assign add_ln582_1_fu_432_p2 = (zext_ln581_fu_416_p1 + 6'd17);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = $signed(p_0_reg_268);

assign empty_178_fu_322_p2 = ((pubkey_0_params_fu_312_p1 == 4'd14) ? 1'b1 : 1'b0);

assign empty_179_fu_328_p2 = (empty_fu_316_p2 | empty_178_fu_322_p2);

assign empty_180_fu_334_p2 = ((pubkey_0_params_fu_312_p1 == 4'd13) ? 1'b1 : 1'b0);

assign empty_181_fu_340_p2 = (empty_180_fu_334_p2 | empty_179_fu_328_p2);

assign empty_182_fu_346_p2 = ((pubkey_0_params_fu_312_p1 == 4'd12) ? 1'b1 : 1'b0);

assign empty_183_fu_352_p2 = (empty_182_fu_346_p2 | empty_181_fu_340_p2);

assign empty_184_fu_358_p2 = ((pubkey_0_params_fu_312_p1 == 4'd11) ? 1'b1 : 1'b0);

assign empty_185_fu_364_p2 = (empty_184_fu_358_p2 | empty_183_fu_352_p2);

assign empty_186_fu_370_p2 = ((pubkey_0_params_fu_312_p1 == 4'd10) ? 1'b1 : 1'b0);

assign empty_187_fu_376_p2 = (empty_186_fu_370_p2 | empty_185_fu_364_p2);

assign empty_188_fu_382_p2 = ((pubkey_0_params_fu_312_p1 == 4'd0) ? 1'b1 : 1'b0);

assign empty_189_fu_388_p2 = (empty_188_fu_382_p2 | empty_187_fu_376_p2);

assign empty_fu_316_p2 = ((pubkey_0_params_fu_312_p1 == 4'd15) ? 1'b1 : 1'b0);

assign grp_picnic_verify_fu_288_ap_start = grp_picnic_verify_fu_288_ap_start_reg;

assign icmp_ln142_fu_467_p2 = ((zext_ln142_fu_458_p1 > add_ln142_fu_462_p2) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_487_p2 = ((sext_ln154_fu_483_p1 < message_len_reg_607) ? 1'b1 : 1'b0);

assign icmp_ln576_fu_394_p2 = ((loop_0_i_reg_233 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_420_p2 = ((loop_1_i_reg_245 == 5'd16) ? 1'b1 : 1'b0);

assign loop_38_fu_400_p2 = (loop_0_i_reg_233 + 5'd1);

assign loop_39_fu_426_p2 = (loop_1_i_reg_245 + 5'd1);

assign loop_fu_492_p2 = ($signed(loop_0_reg_257) + $signed(32'd1));

assign m_address0 = sext_ln154_reg_617;

assign m_d0 = sm_q0;

assign message_len_fu_478_p2 = ($signed(sub_ln146_reg_601) + $signed(64'd18446744073709551612));

assign mlen_address0 = 64'd0;

assign mlen_d0 = message_len_reg_607;

assign pubkey_0_params_fu_312_p1 = pk_q0[3:0];

assign sext_ln154_fu_483_p1 = loop_0_reg_257;

assign sext_ln155_fu_504_p1 = $signed(add_ln155_fu_498_p2);

assign signature_len_fu_448_p5 = {{{{sm_load_reg_578}, {sm_load_1_reg_583}}, {sm_q0}}, {sm_q1}};

assign sub_ln146_fu_473_p2 = (smlen - zext_ln142_fu_458_p1);

assign viewOutputs_address0 = grp_picnic_verify_fu_288_viewOutputs_address0;

assign viewOutputs_ce0 = grp_picnic_verify_fu_288_viewOutputs_ce0;

assign viewOutputs_d0 = grp_picnic_verify_fu_288_viewOutputs_d0;

assign viewOutputs_we0 = grp_picnic_verify_fu_288_viewOutputs_we0;

assign zext_ln142_fu_458_p1 = signature_len_fu_448_p5;

assign zext_ln577_1_fu_411_p1 = loop_0_i_reg_233;

assign zext_ln577_fu_406_p1 = loop_38_fu_400_p2;

assign zext_ln581_fu_416_p1 = loop_1_i_reg_245;

assign zext_ln582_1_fu_443_p1 = loop_1_i_reg_245;

assign zext_ln582_fu_438_p1 = add_ln582_1_fu_432_p2;

endmodule //crypto_sign_open
