// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _HashFinal_HH_
#define _HashFinal_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeccakP1600_Permute_s.h"

namespace ap_rtl {

struct HashFinal : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > ctx_sponge_state_address0;
    sc_out< sc_logic > ctx_sponge_state_ce0;
    sc_out< sc_logic > ctx_sponge_state_we0;
    sc_out< sc_lv<8> > ctx_sponge_state_d0;
    sc_in< sc_lv<8> > ctx_sponge_state_q0;
    sc_in< sc_lv<32> > ctx_sponge_byteIOInd;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;


    // Module declarations
    HashFinal(sc_module_name name);
    SC_HAS_PROCESS(HashFinal);

    ~HashFinal();

    sc_trace_file* mVcdFile;

    KeccakP1600_Permute_s* grp_KeccakP1600_Permute_s_fu_54;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > ctx_sponge_state_add_reg_95;
    sc_signal< sc_lv<8> > ctx_sponge_state_add_1_reg_100;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_ap_start;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_ap_done;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_ap_idle;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_ap_ready;
    sc_signal< sc_lv<8> > grp_KeccakP1600_Permute_s_fu_54_state_address0;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_state_ce0;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_state_we0;
    sc_signal< sc_lv<8> > grp_KeccakP1600_Permute_s_fu_54_state_d0;
    sc_signal< sc_logic > grp_KeccakP1600_Permute_s_fu_54_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln149_fu_64_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > xor_ln149_fu_69_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > xor_ln149_11_fu_76_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<64> ap_const_lv64_A7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_1F;
    static const sc_lv<8> ap_const_lv8_80;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ctx_sponge_state_add_1_reg_100();
    void thread_ctx_sponge_state_address0();
    void thread_ctx_sponge_state_ce0();
    void thread_ctx_sponge_state_d0();
    void thread_ctx_sponge_state_we0();
    void thread_grp_KeccakP1600_Permute_s_fu_54_ap_start();
    void thread_xor_ln149_11_fu_76_p2();
    void thread_xor_ln149_fu_69_p2();
    void thread_zext_ln149_fu_64_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
