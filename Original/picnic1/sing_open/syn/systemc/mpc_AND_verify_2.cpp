// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mpc_AND_verify_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mpc_AND_verify_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mpc_AND_verify_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> mpc_AND_verify_2::ap_ST_fsm_state1 = "1";
const sc_lv<3> mpc_AND_verify_2::ap_ST_fsm_state2 = "10";
const sc_lv<3> mpc_AND_verify_2::ap_ST_fsm_state3 = "100";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_1 = "1";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_2 = "10";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_3 = "11";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_1F = "11111";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_12 = "10010";
const sc_lv<32> mpc_AND_verify_2::ap_const_lv32_C = "1100";
const sc_lv<10> mpc_AND_verify_2::ap_const_lv10_A6 = "10100110";
const sc_lv<3> mpc_AND_verify_2::ap_const_lv3_7 = "111";
const sc_lv<8> mpc_AND_verify_2::ap_const_lv8_1 = "1";
const sc_lv<8> mpc_AND_verify_2::ap_const_lv8_FF = "11111111";
const sc_lv<16> mpc_AND_verify_2::ap_const_lv16_4B = "1001011";
const sc_lv<8> mpc_AND_verify_2::ap_const_lv8_0 = "00000000";
const bool mpc_AND_verify_2::ap_const_boolean_1 = true;

mpc_AND_verify_2::mpc_AND_verify_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    crypto_sign_open_hbi_U74 = new crypto_sign_open_hbi<1,1,8,8,16,16>("crypto_sign_open_hbi_U74");
    crypto_sign_open_hbi_U74->din0(grp_fu_351_p0);
    crypto_sign_open_hbi_U74->din1(grp_fu_351_p1);
    crypto_sign_open_hbi_U74->din2(zext_ln54_cast1_reg_372);
    crypto_sign_open_hbi_U74->dout(grp_fu_351_p3);
    crypto_sign_open_hbi_U75 = new crypto_sign_open_hbi<1,1,8,8,16,16>("crypto_sign_open_hbi_U75");
    crypto_sign_open_hbi_U75->din0(grp_fu_359_p0);
    crypto_sign_open_hbi_U75->din1(grp_fu_359_p1);
    crypto_sign_open_hbi_U75->din2(zext_ln54_cast1_reg_372);
    crypto_sign_open_hbi_U75->dout(grp_fu_359_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln54_fu_182_p2);
    sensitive << ( zext_ln54_cast_fu_172_p4 );

    SC_METHOD(thread_add_ln756_fu_329_p2);
    sensitive << ( rand_0_pos_read );

    SC_METHOD(thread_and_ln66_fu_303_p2);
    sensitive << ( view1_communicatedBi_q0 );
    sensitive << ( xor_ln66_fu_293_p2 );

    SC_METHOD(thread_and_ln752_1_fu_248_p2);
    sensitive << ( in1_1_read );
    sensitive << ( in2_0_read );

    SC_METHOD(thread_and_ln752_2_fu_254_p2);
    sensitive << ( in1_0_read );
    sensitive << ( in2_0_read );

    SC_METHOD(thread_and_ln752_fu_242_p2);
    sensitive << ( in1_0_read );
    sensitive << ( in2_1_read );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( add_ln756_fu_329_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( xor_ln752_3_reg_410 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln54_12_fu_325_p1 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_grp_fu_351_p0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_351_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_351_p10 );

    SC_METHOD(thread_grp_fu_351_p10);
    sensitive << ( view2_communicatedBits_offset );

    SC_METHOD(thread_grp_fu_359_p0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_359_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_359_p10 );

    SC_METHOD(thread_grp_fu_359_p10);
    sensitive << ( view1_communicatedBits_offset );

    SC_METHOD(thread_lshr_ln54_6_fu_232_p2);
    sensitive << ( rand_0_tape_q1 );
    sensitive << ( zext_ln54_11_fu_218_p1 );

    SC_METHOD(thread_lshr_ln54_7_fu_316_p2);
    sensitive << ( view2_communicatedBi_q0 );
    sensitive << ( zext_ln54_11_reg_403 );

    SC_METHOD(thread_lshr_ln54_fu_222_p2);
    sensitive << ( rand_0_tape_q0 );
    sensitive << ( zext_ln54_11_fu_218_p1 );

    SC_METHOD(thread_lshr_ln_fu_147_p4);
    sensitive << ( rand_0_pos_read );

    SC_METHOD(thread_rand_0_tape_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln54_fu_157_p1 );

    SC_METHOD(thread_rand_0_tape_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln54_fu_188_p1 );

    SC_METHOD(thread_rand_0_tape_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rand_0_tape_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sext_ln54_1_fu_209_p1);
    sensitive << ( grp_fu_351_p3 );

    SC_METHOD(thread_sext_ln54_fu_188_p1);
    sensitive << ( add_ln54_fu_182_p2 );

    SC_METHOD(thread_sext_ln66_fu_205_p1);
    sensitive << ( grp_fu_359_p3 );

    SC_METHOD(thread_shl_ln66_6_fu_299_p2);
    sensitive << ( zext_ln54_11_reg_403 );
    sensitive << ( xor_ln752_3_reg_410 );

    SC_METHOD(thread_shl_ln66_fu_288_p2);
    sensitive << ( zext_ln54_11_reg_403 );

    SC_METHOD(thread_trunc_ln52_fu_228_p1);
    sensitive << ( lshr_ln54_fu_222_p2 );

    SC_METHOD(thread_trunc_ln54_7_fu_321_p1);
    sensitive << ( lshr_ln54_7_fu_316_p2 );

    SC_METHOD(thread_trunc_ln54_fu_193_p1);
    sensitive << ( rand_0_pos_read );

    SC_METHOD(thread_trunc_ln752_fu_238_p1);
    sensitive << ( lshr_ln54_6_fu_232_p2 );

    SC_METHOD(thread_view1_communicatedBi_address0);
    sensitive << ( view1_communicatedBi_2_reg_393 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln66_fu_205_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_view1_communicatedBi_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_view1_communicatedBi_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( and_ln66_fu_303_p2 );
    sensitive << ( shl_ln66_6_fu_299_p2 );

    SC_METHOD(thread_view1_communicatedBi_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_view2_communicatedBi_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln54_1_fu_209_p1 );

    SC_METHOD(thread_view2_communicatedBi_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_xor_ln54_fu_213_p2);
    sensitive << ( trunc_ln54_reg_388 );

    SC_METHOD(thread_xor_ln66_fu_293_p2);
    sensitive << ( shl_ln66_fu_288_p2 );

    SC_METHOD(thread_xor_ln752_1_fu_270_p2);
    sensitive << ( and_ln752_fu_242_p2 );
    sensitive << ( and_ln752_1_fu_248_p2 );

    SC_METHOD(thread_xor_ln752_2_fu_276_p2);
    sensitive << ( zext_ln752_fu_266_p1 );
    sensitive << ( and_ln752_2_fu_254_p2 );

    SC_METHOD(thread_xor_ln752_3_fu_282_p2);
    sensitive << ( xor_ln752_2_fu_276_p2 );
    sensitive << ( xor_ln752_1_fu_270_p2 );

    SC_METHOD(thread_xor_ln752_fu_260_p2);
    sensitive << ( trunc_ln752_fu_238_p1 );
    sensitive << ( trunc_ln52_fu_228_p1 );

    SC_METHOD(thread_zext_ln54_11_fu_218_p1);
    sensitive << ( xor_ln54_fu_213_p2 );

    SC_METHOD(thread_zext_ln54_12_fu_325_p1);
    sensitive << ( trunc_ln54_7_fu_321_p1 );

    SC_METHOD(thread_zext_ln54_cast_fu_172_p4);
    sensitive << ( rand_0_pos_read );

    SC_METHOD(thread_zext_ln54_fu_157_p1);
    sensitive << ( lshr_ln_fu_147_p4 );

    SC_METHOD(thread_zext_ln752_fu_266_p1);
    sensitive << ( xor_ln752_fu_260_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000";
    ap_return_2_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mpc_AND_verify_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1_0_read, "(port)in1_0_read");
    sc_trace(mVcdFile, in1_1_read, "(port)in1_1_read");
    sc_trace(mVcdFile, in2_0_read, "(port)in2_0_read");
    sc_trace(mVcdFile, in2_1_read, "(port)in2_1_read");
    sc_trace(mVcdFile, rand_0_tape_address0, "(port)rand_0_tape_address0");
    sc_trace(mVcdFile, rand_0_tape_ce0, "(port)rand_0_tape_ce0");
    sc_trace(mVcdFile, rand_0_tape_q0, "(port)rand_0_tape_q0");
    sc_trace(mVcdFile, rand_0_tape_address1, "(port)rand_0_tape_address1");
    sc_trace(mVcdFile, rand_0_tape_ce1, "(port)rand_0_tape_ce1");
    sc_trace(mVcdFile, rand_0_tape_q1, "(port)rand_0_tape_q1");
    sc_trace(mVcdFile, rand_0_pos_read, "(port)rand_0_pos_read");
    sc_trace(mVcdFile, view1_communicatedBi_address0, "(port)view1_communicatedBi_address0");
    sc_trace(mVcdFile, view1_communicatedBi_ce0, "(port)view1_communicatedBi_ce0");
    sc_trace(mVcdFile, view1_communicatedBi_we0, "(port)view1_communicatedBi_we0");
    sc_trace(mVcdFile, view1_communicatedBi_d0, "(port)view1_communicatedBi_d0");
    sc_trace(mVcdFile, view1_communicatedBi_q0, "(port)view1_communicatedBi_q0");
    sc_trace(mVcdFile, view1_communicatedBits_offset, "(port)view1_communicatedBits_offset");
    sc_trace(mVcdFile, view2_communicatedBi_address0, "(port)view2_communicatedBi_address0");
    sc_trace(mVcdFile, view2_communicatedBi_ce0, "(port)view2_communicatedBi_ce0");
    sc_trace(mVcdFile, view2_communicatedBi_q0, "(port)view2_communicatedBi_q0");
    sc_trace(mVcdFile, view2_communicatedBits_offset, "(port)view2_communicatedBits_offset");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln54_cast1_reg_372, "zext_ln54_cast1_reg_372");
    sc_trace(mVcdFile, trunc_ln54_fu_193_p1, "trunc_ln54_fu_193_p1");
    sc_trace(mVcdFile, trunc_ln54_reg_388, "trunc_ln54_reg_388");
    sc_trace(mVcdFile, view1_communicatedBi_2_reg_393, "view1_communicatedBi_2_reg_393");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln54_11_fu_218_p1, "zext_ln54_11_fu_218_p1");
    sc_trace(mVcdFile, zext_ln54_11_reg_403, "zext_ln54_11_reg_403");
    sc_trace(mVcdFile, xor_ln752_3_fu_282_p2, "xor_ln752_3_fu_282_p2");
    sc_trace(mVcdFile, xor_ln752_3_reg_410, "xor_ln752_3_reg_410");
    sc_trace(mVcdFile, zext_ln54_fu_157_p1, "zext_ln54_fu_157_p1");
    sc_trace(mVcdFile, sext_ln54_fu_188_p1, "sext_ln54_fu_188_p1");
    sc_trace(mVcdFile, sext_ln66_fu_205_p1, "sext_ln66_fu_205_p1");
    sc_trace(mVcdFile, sext_ln54_1_fu_209_p1, "sext_ln54_1_fu_209_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, lshr_ln_fu_147_p4, "lshr_ln_fu_147_p4");
    sc_trace(mVcdFile, zext_ln54_cast_fu_172_p4, "zext_ln54_cast_fu_172_p4");
    sc_trace(mVcdFile, add_ln54_fu_182_p2, "add_ln54_fu_182_p2");
    sc_trace(mVcdFile, grp_fu_359_p3, "grp_fu_359_p3");
    sc_trace(mVcdFile, grp_fu_351_p3, "grp_fu_351_p3");
    sc_trace(mVcdFile, xor_ln54_fu_213_p2, "xor_ln54_fu_213_p2");
    sc_trace(mVcdFile, lshr_ln54_fu_222_p2, "lshr_ln54_fu_222_p2");
    sc_trace(mVcdFile, lshr_ln54_6_fu_232_p2, "lshr_ln54_6_fu_232_p2");
    sc_trace(mVcdFile, trunc_ln752_fu_238_p1, "trunc_ln752_fu_238_p1");
    sc_trace(mVcdFile, trunc_ln52_fu_228_p1, "trunc_ln52_fu_228_p1");
    sc_trace(mVcdFile, xor_ln752_fu_260_p2, "xor_ln752_fu_260_p2");
    sc_trace(mVcdFile, and_ln752_fu_242_p2, "and_ln752_fu_242_p2");
    sc_trace(mVcdFile, and_ln752_1_fu_248_p2, "and_ln752_1_fu_248_p2");
    sc_trace(mVcdFile, zext_ln752_fu_266_p1, "zext_ln752_fu_266_p1");
    sc_trace(mVcdFile, and_ln752_2_fu_254_p2, "and_ln752_2_fu_254_p2");
    sc_trace(mVcdFile, xor_ln752_2_fu_276_p2, "xor_ln752_2_fu_276_p2");
    sc_trace(mVcdFile, xor_ln752_1_fu_270_p2, "xor_ln752_1_fu_270_p2");
    sc_trace(mVcdFile, shl_ln66_fu_288_p2, "shl_ln66_fu_288_p2");
    sc_trace(mVcdFile, xor_ln66_fu_293_p2, "xor_ln66_fu_293_p2");
    sc_trace(mVcdFile, and_ln66_fu_303_p2, "and_ln66_fu_303_p2");
    sc_trace(mVcdFile, shl_ln66_6_fu_299_p2, "shl_ln66_6_fu_299_p2");
    sc_trace(mVcdFile, lshr_ln54_7_fu_316_p2, "lshr_ln54_7_fu_316_p2");
    sc_trace(mVcdFile, trunc_ln54_7_fu_321_p1, "trunc_ln54_7_fu_321_p1");
    sc_trace(mVcdFile, add_ln756_fu_329_p2, "add_ln756_fu_329_p2");
    sc_trace(mVcdFile, zext_ln54_12_fu_325_p1, "zext_ln54_12_fu_325_p1");
    sc_trace(mVcdFile, grp_fu_351_p0, "grp_fu_351_p0");
    sc_trace(mVcdFile, grp_fu_351_p1, "grp_fu_351_p1");
    sc_trace(mVcdFile, grp_fu_359_p0, "grp_fu_359_p0");
    sc_trace(mVcdFile, grp_fu_359_p1, "grp_fu_359_p1");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_351_p10, "grp_fu_351_p10");
    sc_trace(mVcdFile, grp_fu_359_p10, "grp_fu_359_p10");
#endif

    }
}

mpc_AND_verify_2::~mpc_AND_verify_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete crypto_sign_open_hbi_U74;
    delete crypto_sign_open_hbi_U75;
}

void mpc_AND_verify_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_return_0_preg = add_ln756_fu_329_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_return_1_preg = xor_ln752_3_reg_410.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_return_2_preg = zext_ln54_12_fu_325_p1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        trunc_ln54_reg_388 = trunc_ln54_fu_193_p1.read();
        zext_ln54_cast1_reg_372 = rand_0_pos_read.read().range(18, 3);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        view1_communicatedBi_2_reg_393 =  (sc_lv<15>) (sext_ln66_fu_205_p1.read());
        xor_ln752_3_reg_410 = xor_ln752_3_fu_282_p2.read();
        zext_ln54_11_reg_403 = zext_ln54_11_fu_218_p1.read();
    }
}

void mpc_AND_verify_2::thread_add_ln54_fu_182_p2() {
    add_ln54_fu_182_p2 = (!ap_const_lv10_A6.is_01() || !zext_ln54_cast_fu_172_p4.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_A6) + sc_biguint<10>(zext_ln54_cast_fu_172_p4.read()));
}

void mpc_AND_verify_2::thread_add_ln756_fu_329_p2() {
    add_ln756_fu_329_p2 = (!ap_const_lv32_1.is_01() || !rand_0_pos_read.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(rand_0_pos_read.read()));
}

void mpc_AND_verify_2::thread_and_ln66_fu_303_p2() {
    and_ln66_fu_303_p2 = (view1_communicatedBi_q0.read() & xor_ln66_fu_293_p2.read());
}

void mpc_AND_verify_2::thread_and_ln752_1_fu_248_p2() {
    and_ln752_1_fu_248_p2 = (in2_0_read.read() & in1_1_read.read());
}

void mpc_AND_verify_2::thread_and_ln752_2_fu_254_p2() {
    and_ln752_2_fu_254_p2 = (in2_0_read.read() & in1_0_read.read());
}

void mpc_AND_verify_2::thread_and_ln752_fu_242_p2() {
    and_ln752_fu_242_p2 = (in2_1_read.read() & in1_0_read.read());
}

void mpc_AND_verify_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mpc_AND_verify_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mpc_AND_verify_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mpc_AND_verify_2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_return_0 = add_ln756_fu_329_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void mpc_AND_verify_2::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_return_1 = xor_ln752_3_reg_410.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void mpc_AND_verify_2::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_return_2 = zext_ln54_12_fu_325_p1.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void mpc_AND_verify_2::thread_grp_fu_351_p0() {
    grp_fu_351_p0 =  (sc_lv<8>) (ap_const_lv16_4B);
}

void mpc_AND_verify_2::thread_grp_fu_351_p1() {
    grp_fu_351_p1 =  (sc_lv<8>) (grp_fu_351_p10.read());
}

void mpc_AND_verify_2::thread_grp_fu_351_p10() {
    grp_fu_351_p10 = esl_zext<16,8>(view2_communicatedBits_offset.read());
}

void mpc_AND_verify_2::thread_grp_fu_359_p0() {
    grp_fu_359_p0 =  (sc_lv<8>) (ap_const_lv16_4B);
}

void mpc_AND_verify_2::thread_grp_fu_359_p1() {
    grp_fu_359_p1 =  (sc_lv<8>) (grp_fu_359_p10.read());
}

void mpc_AND_verify_2::thread_grp_fu_359_p10() {
    grp_fu_359_p10 = esl_zext<16,8>(view1_communicatedBits_offset.read());
}

void mpc_AND_verify_2::thread_lshr_ln54_6_fu_232_p2() {
    lshr_ln54_6_fu_232_p2 = (!zext_ln54_11_fu_218_p1.read().is_01())? sc_lv<8>(): rand_0_tape_q1.read() >> (unsigned short)zext_ln54_11_fu_218_p1.read().to_uint();
}

void mpc_AND_verify_2::thread_lshr_ln54_7_fu_316_p2() {
    lshr_ln54_7_fu_316_p2 = (!zext_ln54_11_reg_403.read().is_01())? sc_lv<8>(): view2_communicatedBi_q0.read() >> (unsigned short)zext_ln54_11_reg_403.read().to_uint();
}

void mpc_AND_verify_2::thread_lshr_ln54_fu_222_p2() {
    lshr_ln54_fu_222_p2 = (!zext_ln54_11_fu_218_p1.read().is_01())? sc_lv<8>(): rand_0_tape_q0.read() >> (unsigned short)zext_ln54_11_fu_218_p1.read().to_uint();
}

void mpc_AND_verify_2::thread_lshr_ln_fu_147_p4() {
    lshr_ln_fu_147_p4 = rand_0_pos_read.read().range(31, 3);
}

void mpc_AND_verify_2::thread_rand_0_tape_address0() {
    rand_0_tape_address0 =  (sc_lv<9>) (zext_ln54_fu_157_p1.read());
}

void mpc_AND_verify_2::thread_rand_0_tape_address1() {
    rand_0_tape_address1 =  (sc_lv<9>) (sext_ln54_fu_188_p1.read());
}

void mpc_AND_verify_2::thread_rand_0_tape_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        rand_0_tape_ce0 = ap_const_logic_1;
    } else {
        rand_0_tape_ce0 = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_rand_0_tape_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        rand_0_tape_ce1 = ap_const_logic_1;
    } else {
        rand_0_tape_ce1 = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_sext_ln54_1_fu_209_p1() {
    sext_ln54_1_fu_209_p1 = esl_sext<64,16>(grp_fu_351_p3.read());
}

void mpc_AND_verify_2::thread_sext_ln54_fu_188_p1() {
    sext_ln54_fu_188_p1 = esl_sext<64,10>(add_ln54_fu_182_p2.read());
}

void mpc_AND_verify_2::thread_sext_ln66_fu_205_p1() {
    sext_ln66_fu_205_p1 = esl_sext<64,16>(grp_fu_359_p3.read());
}

void mpc_AND_verify_2::thread_shl_ln66_6_fu_299_p2() {
    shl_ln66_6_fu_299_p2 = (!zext_ln54_11_reg_403.read().is_01())? sc_lv<8>(): xor_ln752_3_reg_410.read() << (unsigned short)zext_ln54_11_reg_403.read().to_uint();
}

void mpc_AND_verify_2::thread_shl_ln66_fu_288_p2() {
    shl_ln66_fu_288_p2 = (!zext_ln54_11_reg_403.read().is_01())? sc_lv<8>(): ap_const_lv8_1 << (unsigned short)zext_ln54_11_reg_403.read().to_uint();
}

void mpc_AND_verify_2::thread_trunc_ln52_fu_228_p1() {
    trunc_ln52_fu_228_p1 = lshr_ln54_fu_222_p2.read().range(1-1, 0);
}

void mpc_AND_verify_2::thread_trunc_ln54_7_fu_321_p1() {
    trunc_ln54_7_fu_321_p1 = lshr_ln54_7_fu_316_p2.read().range(1-1, 0);
}

void mpc_AND_verify_2::thread_trunc_ln54_fu_193_p1() {
    trunc_ln54_fu_193_p1 = rand_0_pos_read.read().range(3-1, 0);
}

void mpc_AND_verify_2::thread_trunc_ln752_fu_238_p1() {
    trunc_ln752_fu_238_p1 = lshr_ln54_6_fu_232_p2.read().range(1-1, 0);
}

void mpc_AND_verify_2::thread_view1_communicatedBi_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        view1_communicatedBi_address0 = view1_communicatedBi_2_reg_393.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        view1_communicatedBi_address0 =  (sc_lv<15>) (sext_ln66_fu_205_p1.read());
    } else {
        view1_communicatedBi_address0 = "XXXXXXXXXXXXXXX";
    }
}

void mpc_AND_verify_2::thread_view1_communicatedBi_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        view1_communicatedBi_ce0 = ap_const_logic_1;
    } else {
        view1_communicatedBi_ce0 = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_view1_communicatedBi_d0() {
    view1_communicatedBi_d0 = (and_ln66_fu_303_p2.read() | shl_ln66_6_fu_299_p2.read());
}

void mpc_AND_verify_2::thread_view1_communicatedBi_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        view1_communicatedBi_we0 = ap_const_logic_1;
    } else {
        view1_communicatedBi_we0 = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_view2_communicatedBi_address0() {
    view2_communicatedBi_address0 =  (sc_lv<15>) (sext_ln54_1_fu_209_p1.read());
}

void mpc_AND_verify_2::thread_view2_communicatedBi_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        view2_communicatedBi_ce0 = ap_const_logic_1;
    } else {
        view2_communicatedBi_ce0 = ap_const_logic_0;
    }
}

void mpc_AND_verify_2::thread_xor_ln54_fu_213_p2() {
    xor_ln54_fu_213_p2 = (trunc_ln54_reg_388.read() ^ ap_const_lv3_7);
}

void mpc_AND_verify_2::thread_xor_ln66_fu_293_p2() {
    xor_ln66_fu_293_p2 = (shl_ln66_fu_288_p2.read() ^ ap_const_lv8_FF);
}

void mpc_AND_verify_2::thread_xor_ln752_1_fu_270_p2() {
    xor_ln752_1_fu_270_p2 = (and_ln752_fu_242_p2.read() ^ and_ln752_1_fu_248_p2.read());
}

void mpc_AND_verify_2::thread_xor_ln752_2_fu_276_p2() {
    xor_ln752_2_fu_276_p2 = (zext_ln752_fu_266_p1.read() ^ and_ln752_2_fu_254_p2.read());
}

void mpc_AND_verify_2::thread_xor_ln752_3_fu_282_p2() {
    xor_ln752_3_fu_282_p2 = (xor_ln752_2_fu_276_p2.read() ^ xor_ln752_1_fu_270_p2.read());
}

void mpc_AND_verify_2::thread_xor_ln752_fu_260_p2() {
    xor_ln752_fu_260_p2 = (trunc_ln752_fu_238_p1.read() ^ trunc_ln52_fu_228_p1.read());
}

void mpc_AND_verify_2::thread_zext_ln54_11_fu_218_p1() {
    zext_ln54_11_fu_218_p1 = esl_zext<8,3>(xor_ln54_fu_213_p2.read());
}

void mpc_AND_verify_2::thread_zext_ln54_12_fu_325_p1() {
    zext_ln54_12_fu_325_p1 = esl_zext<8,1>(trunc_ln54_7_fu_321_p1.read());
}

void mpc_AND_verify_2::thread_zext_ln54_cast_fu_172_p4() {
    zext_ln54_cast_fu_172_p4 = rand_0_pos_read.read().range(12, 3);
}

void mpc_AND_verify_2::thread_zext_ln54_fu_157_p1() {
    zext_ln54_fu_157_p1 = esl_zext<64,29>(lshr_ln_fu_147_p4.read());
}

void mpc_AND_verify_2::thread_zext_ln752_fu_266_p1() {
    zext_ln752_fu_266_p1 = esl_zext<8,1>(xor_ln752_fu_260_p2.read());
}

void mpc_AND_verify_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

