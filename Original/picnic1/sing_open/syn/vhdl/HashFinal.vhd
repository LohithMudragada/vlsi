-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HashFinal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_ce0 : OUT STD_LOGIC;
    ctx_sponge_state_we0 : OUT STD_LOGIC;
    ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HashFinal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_A7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctx_sponge_state_add_reg_95 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_sponge_state_add_1_reg_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_KeccakP1600_Permute_s_fu_54_ap_start : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_ap_done : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_ap_idle : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_ap_ready : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakP1600_Permute_s_fu_54_state_ce0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_state_we0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_54_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakP1600_Permute_s_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln149_fu_64_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln149_fu_69_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln149_11_fu_76_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component KeccakP1600_Permute_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_KeccakP1600_Permute_s_fu_54 : component KeccakP1600_Permute_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakP1600_Permute_s_fu_54_ap_start,
        ap_done => grp_KeccakP1600_Permute_s_fu_54_ap_done,
        ap_idle => grp_KeccakP1600_Permute_s_fu_54_ap_idle,
        ap_ready => grp_KeccakP1600_Permute_s_fu_54_ap_ready,
        state_address0 => grp_KeccakP1600_Permute_s_fu_54_state_address0,
        state_ce0 => grp_KeccakP1600_Permute_s_fu_54_state_ce0,
        state_we0 => grp_KeccakP1600_Permute_s_fu_54_state_we0,
        state_d0 => grp_KeccakP1600_Permute_s_fu_54_state_d0,
        state_q0 => ctx_sponge_state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakP1600_Permute_s_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakP1600_Permute_s_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_KeccakP1600_Permute_s_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakP1600_Permute_s_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakP1600_Permute_s_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ctx_sponge_state_add_reg_95 <= zext_ln149_fu_64_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_KeccakP1600_Permute_s_fu_54_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_KeccakP1600_Permute_s_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_KeccakP1600_Permute_s_fu_54_ap_done, ap_CS_fsm_state6)
    begin
        if ((((grp_KeccakP1600_Permute_s_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_KeccakP1600_Permute_s_fu_54_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_KeccakP1600_Permute_s_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= ap_const_lv32_0;
    ap_return_1 <= ap_const_lv32_1;
    ctx_sponge_state_add_1_reg_100 <= ap_const_lv64_A7(8 - 1 downto 0);

    ctx_sponge_state_address0_assign_proc : process(ap_CS_fsm_state1, ctx_sponge_state_add_reg_95, ctx_sponge_state_add_1_reg_100, ap_CS_fsm_state3, grp_KeccakP1600_Permute_s_fu_54_state_address0, ap_CS_fsm_state6, zext_ln149_fu_64_p1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_address0 <= ctx_sponge_state_add_1_reg_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_sponge_state_address0 <= ap_const_lv64_A7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_sponge_state_address0 <= ctx_sponge_state_add_reg_95;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_sponge_state_address0 <= zext_ln149_fu_64_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_sponge_state_address0 <= grp_KeccakP1600_Permute_s_fu_54_state_address0;
        else 
            ctx_sponge_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_KeccakP1600_Permute_s_fu_54_state_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ctx_sponge_state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_sponge_state_ce0 <= grp_KeccakP1600_Permute_s_fu_54_state_ce0;
        else 
            ctx_sponge_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_d0_assign_proc : process(grp_KeccakP1600_Permute_s_fu_54_state_d0, ap_CS_fsm_state6, ap_CS_fsm_state2, xor_ln149_fu_69_p2, ap_CS_fsm_state4, xor_ln149_11_fu_76_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_d0 <= xor_ln149_11_fu_76_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_sponge_state_d0 <= xor_ln149_fu_69_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_sponge_state_d0 <= grp_KeccakP1600_Permute_s_fu_54_state_d0;
        else 
            ctx_sponge_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_we0_assign_proc : process(grp_KeccakP1600_Permute_s_fu_54_state_we0, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ctx_sponge_state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_sponge_state_we0 <= grp_KeccakP1600_Permute_s_fu_54_state_we0;
        else 
            ctx_sponge_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakP1600_Permute_s_fu_54_ap_start <= grp_KeccakP1600_Permute_s_fu_54_ap_start_reg;
    xor_ln149_11_fu_76_p2 <= (ctx_sponge_state_q0 xor ap_const_lv8_80);
    xor_ln149_fu_69_p2 <= (ctx_sponge_state_q0 xor ap_const_lv8_1F);
    zext_ln149_fu_64_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctx_sponge_byteIOInd),64));
end behav;
