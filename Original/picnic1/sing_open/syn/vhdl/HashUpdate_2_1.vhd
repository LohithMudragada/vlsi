-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HashUpdate_2_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_ce0 : OUT STD_LOGIC;
    ctx_sponge_state_we0 : OUT STD_LOGIC;
    ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HashUpdate_2_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_4A : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln34_fu_186_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln37_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_reg_331 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_52_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_fu_237_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln37_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_fu_241_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln2_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln3_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_174_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_174_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln34_reg_152 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln34_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln34_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln39_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_215_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_225_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln41_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln43_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln45_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component KeccakWidth1600_Spon_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashUpdate_2_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_U : component HashUpdate_2_1_temp
    generic map (
        DataWidth => 8,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => temp_d1);

    grp_KeccakWidth1600_Spon_9_fu_174 : component KeccakWidth1600_Spon_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_9_fu_174_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_9_fu_174_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_9_fu_174_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_9_fu_174_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => ctx_sponge_byteIOInd,
        data_address0 => grp_KeccakWidth1600_Spon_9_fu_174_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_9_fu_174_data_ce0,
        data_q0 => temp_q0,
        ap_return => grp_KeccakWidth1600_Spon_9_fu_174_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_return_preg <= grp_KeccakWidth1600_Spon_9_fu_174_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_52_fu_207_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_9_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_197_p2 = ap_const_lv1_1))) then 
                loop_0_reg_163 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_0_reg_163 <= loop_reg_351;
            end if; 
        end if;
    end process;

    phi_ln34_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln34_reg_152 <= add_ln34_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln34_reg_152 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_fu_207_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                loop_reg_351 <= loop_fu_241_p2;
                trunc_ln37_reg_344 <= trunc_ln37_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln2_reg_356 <= data_q0(23 downto 16);
                trunc_ln3_reg_361 <= data_q0(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln37_reg_331(4 downto 0) <= zext_ln37_fu_203_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_331(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_52_fu_207_p3, grp_KeccakWidth1600_Spon_9_fu_174_ap_done, icmp_ln34_fu_197_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_197_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_52_fu_207_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln34_fu_186_p2 <= std_logic_vector(unsigned(phi_ln34_reg_152) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_KeccakWidth1600_Spon_9_fu_174_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_KeccakWidth1600_Spon_9_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_KeccakWidth1600_Spon_9_fu_174_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_KeccakWidth1600_Spon_9_fu_174_ap_done, grp_KeccakWidth1600_Spon_9_fu_174_ap_return, ap_CS_fsm_state6, ap_return_preg)
    begin
        if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_return <= grp_KeccakWidth1600_Spon_9_fu_174_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0;
    ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0;
    ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0;
    ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0;
    data_address0 <= zext_ln38_fu_232_p1(10 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_9_fu_174_ap_start <= grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg;
    icmp_ln34_fu_197_p2 <= "1" when (phi_ln34_reg_152 = ap_const_lv7_4A) else "0";
    loop_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_0_reg_163));
    or_ln41_fu_263_p2 <= (trunc_ln37_reg_344 or ap_const_lv4_1);
    or_ln43_fu_293_p2 <= (trunc_ln37_reg_344 or ap_const_lv4_2);
    or_ln45_fu_303_p2 <= (trunc_ln37_reg_344 or ap_const_lv4_3);

    temp_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln37_reg_331, ap_CS_fsm_state4, grp_KeccakWidth1600_Spon_9_fu_174_data_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln34_fu_192_p1, zext_ln45_fu_308_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= zext_ln45_fu_308_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_address0 <= zext_ln37_reg_331(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_address0 <= zext_ln34_fu_192_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_address0 <= grp_KeccakWidth1600_Spon_9_fu_174_data_address0;
        else 
            temp_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln41_fu_268_p1, zext_ln43_fu_298_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address1 <= zext_ln43_fu_298_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_address1 <= zext_ln41_fu_268_p1(7 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_KeccakWidth1600_Spon_9_fu_174_data_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_ce0 <= grp_KeccakWidth1600_Spon_9_fu_174_data_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, trunc_ln3_reg_361, ap_CS_fsm_state5, trunc_ln39_fu_247_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_d0 <= trunc_ln3_reg_361;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_d0 <= trunc_ln39_fu_247_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_d0 <= ap_const_lv8_0;
        else 
            temp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_d1_assign_proc : process(data_q0, trunc_ln2_reg_356, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_d1 <= trunc_ln2_reg_356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_d1 <= data_q0(15 downto 8);
        else 
            temp_d1 <= "XXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_52_fu_207_p3 <= loop_0_reg_163(4 downto 4);
    tmp_fu_225_p3 <= (data_offset & trunc_ln_fu_215_p4);
    trunc_ln37_fu_237_p1 <= loop_0_reg_163(4 - 1 downto 0);
    trunc_ln39_fu_247_p1 <= data_q0(8 - 1 downto 0);
    trunc_ln_fu_215_p4 <= loop_0_reg_163(3 downto 2);
    zext_ln34_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln34_reg_152),64));
    zext_ln37_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_163),64));
    zext_ln38_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_225_p3),64));
    zext_ln41_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_fu_263_p2),64));
    zext_ln43_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_fu_293_p2),64));
    zext_ln45_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_303_p2),64));
end behav;
