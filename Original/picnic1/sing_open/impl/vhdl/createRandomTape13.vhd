-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity createRandomTape13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    seed_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    seed_0_ce0 : OUT STD_LOGIC;
    seed_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_offset1 : IN STD_LOGIC_VECTOR (7 downto 0);
    salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    salt_0_ce0 : OUT STD_LOGIC;
    salt_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundNumber : IN STD_LOGIC_VECTOR (7 downto 0);
    playerNumber : IN STD_LOGIC_VECTOR (0 downto 0);
    tape_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    tape_ce0 : OUT STD_LOGIC;
    tape_we0 : OUT STD_LOGIC;
    tape_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tape_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of createRandomTape13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_5B : STD_LOGIC_VECTOR (7 downto 0) := "01011011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_HashInit_fu_133_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_HashInit_fu_133_ap_ready : STD_LOGIC;
    signal grp_HashInit_fu_133_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_HashFinal_fu_146_ap_ready : STD_LOGIC;
    signal grp_HashFinal_fu_146_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_37_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_40_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_41_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal temp_0_fu_186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_sponge_state_ce0 : STD_LOGIC;
    signal ctx_sponge_state_we0 : STD_LOGIC;
    signal ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_sponge_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_data_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_3_fu_66_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_15_fu_96_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_KeccakWidth1600_Spon_15_fu_96_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_10_fu_120_data_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashInit_fu_133_ap_start : STD_LOGIC;
    signal grp_HashInit_fu_133_ap_idle : STD_LOGIC;
    signal grp_HashInit_fu_133_ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashInit_fu_133_ctx_sponge_state_ce0 : STD_LOGIC;
    signal grp_HashInit_fu_133_ctx_sponge_state_we0 : STD_LOGIC;
    signal grp_HashInit_fu_133_ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashInit_fu_133_hashPrefix : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_HashFinal_fu_146_ap_start : STD_LOGIC;
    signal grp_HashFinal_fu_146_ap_idle : STD_LOGIC;
    signal grp_HashFinal_fu_146_ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashFinal_fu_146_ctx_sponge_state_ce0 : STD_LOGIC;
    signal grp_HashFinal_fu_146_ctx_sponge_state_we0 : STD_LOGIC;
    signal grp_HashFinal_fu_146_ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashFinal_fu_146_ctx_sponge_byteIOInd : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HashFinal_fu_146_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HashFinal_fu_146_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_HashInit_fu_133_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_HashFinal_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component KeccakWidth1600_Spon_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        instance_squeezing_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_we0 : OUT STD_LOGIC;
        data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataByteLen : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeccakWidth1600_Spon_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_offset1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashInit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_ce0 : OUT STD_LOGIC;
        ctx_sponge_state_we0 : OUT STD_LOGIC;
        ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        hashPrefix : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashFinal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_ce0 : OUT STD_LOGIC;
        ctx_sponge_state_we0 : OUT STD_LOGIC;
        ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component createRandomTape1fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ctx_sponge_state_U : component createRandomTape1fYi
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_sponge_state_address0,
        ce0 => ctx_sponge_state_ce0,
        we0 => ctx_sponge_state_we0,
        d0 => ctx_sponge_state_d0,
        q0 => ctx_sponge_state_q0);

    grp_KeccakWidth1600_Spon_3_fu_66 : component KeccakWidth1600_Spon_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_3_fu_66_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_3_fu_66_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_3_fu_66_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_3_fu_66_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_170,
        instance_squeezing_read => reg_175,
        data_address0 => grp_KeccakWidth1600_Spon_3_fu_66_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_3_fu_66_data_ce0,
        data_we0 => grp_KeccakWidth1600_Spon_3_fu_66_data_we0,
        data_d0 => grp_KeccakWidth1600_Spon_3_fu_66_data_d0,
        dataByteLen => grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen);

    grp_KeccakWidth1600_Spon_4_fu_82 : component KeccakWidth1600_Spon_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_4_fu_82_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_4_fu_82_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_4_fu_82_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_4_fu_82_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_164,
        data_0_address0 => grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0,
        data_0_ce0 => grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0,
        data_0_q0 => seed_0_q0,
        data_offset1 => seed_offset1,
        ap_return => grp_KeccakWidth1600_Spon_4_fu_82_ap_return);

    grp_KeccakWidth1600_Spon_15_fu_96 : component KeccakWidth1600_Spon_15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_15_fu_96_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_15_fu_96_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_15_fu_96_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_15_fu_96_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_164,
        data_address0 => grp_KeccakWidth1600_Spon_15_fu_96_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_15_fu_96_data_ce0,
        data_q0 => tape_q0,
        ap_return => grp_KeccakWidth1600_Spon_15_fu_96_ap_return);

    grp_KeccakWidth1600_Spon_8_fu_108 : component KeccakWidth1600_Spon_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_8_fu_108_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_8_fu_108_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_8_fu_108_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_8_fu_108_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => ctx_sponge_byteIOInd_40_reg_201,
        data_0_address0 => grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0,
        data_0_ce0 => grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0,
        data_0_q0 => salt_0_q0,
        ap_return => grp_KeccakWidth1600_Spon_8_fu_108_ap_return);

    grp_KeccakWidth1600_Spon_10_fu_120 : component KeccakWidth1600_Spon_10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_10_fu_120_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_10_fu_120_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_10_fu_120_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_10_fu_120_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read,
        data_0_read => grp_KeccakWidth1600_Spon_10_fu_120_data_0_read,
        ap_return => grp_KeccakWidth1600_Spon_10_fu_120_ap_return);

    grp_HashInit_fu_133 : component HashInit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HashInit_fu_133_ap_start,
        ap_done => grp_HashInit_fu_133_ap_done,
        ap_idle => grp_HashInit_fu_133_ap_idle,
        ap_ready => grp_HashInit_fu_133_ap_ready,
        ctx_sponge_state_address0 => grp_HashInit_fu_133_ctx_sponge_state_address0,
        ctx_sponge_state_ce0 => grp_HashInit_fu_133_ctx_sponge_state_ce0,
        ctx_sponge_state_we0 => grp_HashInit_fu_133_ctx_sponge_state_we0,
        ctx_sponge_state_d0 => grp_HashInit_fu_133_ctx_sponge_state_d0,
        ctx_sponge_state_q0 => ctx_sponge_state_q0,
        hashPrefix => grp_HashInit_fu_133_hashPrefix,
        ap_return => grp_HashInit_fu_133_ap_return);

    grp_HashFinal_fu_146 : component HashFinal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HashFinal_fu_146_ap_start,
        ap_done => grp_HashFinal_fu_146_ap_done,
        ap_idle => grp_HashFinal_fu_146_ap_idle,
        ap_ready => grp_HashFinal_fu_146_ap_ready,
        ctx_sponge_state_address0 => grp_HashFinal_fu_146_ctx_sponge_state_address0,
        ctx_sponge_state_ce0 => grp_HashFinal_fu_146_ctx_sponge_state_ce0,
        ctx_sponge_state_we0 => grp_HashFinal_fu_146_ctx_sponge_state_we0,
        ctx_sponge_state_d0 => grp_HashFinal_fu_146_ctx_sponge_state_d0,
        ctx_sponge_state_q0 => ctx_sponge_state_q0,
        ctx_sponge_byteIOInd => grp_HashFinal_fu_146_ctx_sponge_byteIOInd,
        ap_return_0 => grp_HashFinal_fu_146_ap_return_0,
        ap_return_1 => grp_HashFinal_fu_146_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_HashFinal_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HashFinal_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_HashFinal_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HashFinal_fu_146_ap_ready = ap_const_logic_1)) then 
                    grp_HashFinal_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_HashInit_fu_133_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HashInit_fu_133_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_HashInit_fu_133_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HashInit_fu_133_ap_ready = ap_const_logic_1)) then 
                    grp_HashInit_fu_133_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_10_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_15_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_3_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_4_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_8_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_KeccakWidth1600_Spon_4_fu_82_ap_done = ap_const_logic_1))) then
                ctx_sponge_byteIOInd_37_reg_196 <= grp_KeccakWidth1600_Spon_4_fu_82_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakWidth1600_Spon_15_fu_96_ap_done = ap_const_logic_1))) then
                ctx_sponge_byteIOInd_40_reg_201 <= grp_KeccakWidth1600_Spon_15_fu_96_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakWidth1600_Spon_8_fu_108_ap_done = ap_const_logic_1))) then
                ctx_sponge_byteIOInd_41_reg_206 <= grp_KeccakWidth1600_Spon_8_fu_108_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_HashInit_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_HashInit_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_164 <= grp_HashInit_fu_133_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_HashFinal_fu_146_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((grp_HashFinal_fu_146_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then
                reg_170 <= grp_HashFinal_fu_146_ap_return_0;
                reg_175 <= grp_HashFinal_fu_146_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1)))) then
                reg_180 <= grp_KeccakWidth1600_Spon_10_fu_120_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    temp_0_reg_216(0) <= temp_0_fu_186_p1(0);
            end if;
        end if;
    end process;
    temp_0_reg_216(7 downto 1) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_HashInit_fu_133_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state6, grp_HashFinal_fu_146_ap_done, ap_CS_fsm_state22, ap_CS_fsm_state16, grp_KeccakWidth1600_Spon_10_fu_120_ap_done, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state4, grp_KeccakWidth1600_Spon_4_fu_82_ap_done, ap_CS_fsm_state12, grp_KeccakWidth1600_Spon_15_fu_96_ap_done, ap_CS_fsm_state14, grp_KeccakWidth1600_Spon_8_fu_108_ap_done, grp_KeccakWidth1600_Spon_3_fu_66_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_HashInit_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_KeccakWidth1600_Spon_4_fu_82_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_HashFinal_fu_146_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_HashInit_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_KeccakWidth1600_Spon_15_fu_96_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakWidth1600_Spon_8_fu_108_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_KeccakWidth1600_Spon_10_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_HashFinal_fu_146_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_KeccakWidth1600_Spon_3_fu_66_ap_done, ap_CS_fsm_state24)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_KeccakWidth1600_Spon_3_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_KeccakWidth1600_Spon_3_fu_66_ap_done, ap_CS_fsm_state24)
    begin
        if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0, grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0, grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0, grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0, grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0, grp_HashInit_fu_133_ctx_sponge_state_address0, grp_HashFinal_fu_146_ctx_sponge_state_address0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ctx_sponge_state_address0 <= grp_HashFinal_fu_146_ctx_sponge_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_address0 <= grp_HashInit_fu_133_ctx_sponge_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0;
        else 
            ctx_sponge_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0, grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0, grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0, grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0, grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0, grp_HashInit_fu_133_ctx_sponge_state_ce0, grp_HashFinal_fu_146_ctx_sponge_state_ce0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ctx_sponge_state_ce0 <= grp_HashFinal_fu_146_ctx_sponge_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_ce0 <= grp_HashInit_fu_133_ctx_sponge_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0;
        else 
            ctx_sponge_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0, grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0, grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0, grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0, grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0, grp_HashInit_fu_133_ctx_sponge_state_d0, grp_HashFinal_fu_146_ctx_sponge_state_d0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ctx_sponge_state_d0 <= grp_HashFinal_fu_146_ctx_sponge_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_d0 <= grp_HashInit_fu_133_ctx_sponge_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0;
        else 
            ctx_sponge_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0, grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0, grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0, grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0, grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0, grp_HashInit_fu_133_ctx_sponge_state_we0, grp_HashFinal_fu_146_ctx_sponge_state_we0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ctx_sponge_state_we0 <= grp_HashFinal_fu_146_ctx_sponge_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_we0 <= grp_HashInit_fu_133_ctx_sponge_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0;
        else 
            ctx_sponge_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_HashFinal_fu_146_ap_start <= grp_HashFinal_fu_146_ap_start_reg;

    grp_HashFinal_fu_146_ctx_sponge_byteIOInd_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state22, reg_180, ctx_sponge_byteIOInd_37_reg_196)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_HashFinal_fu_146_ctx_sponge_byteIOInd <= reg_180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_HashFinal_fu_146_ctx_sponge_byteIOInd <= ctx_sponge_byteIOInd_37_reg_196;
        else 
            grp_HashFinal_fu_146_ctx_sponge_byteIOInd <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_HashInit_fu_133_ap_start <= grp_HashInit_fu_133_ap_start_reg;

    grp_HashInit_fu_133_hashPrefix_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_HashInit_fu_133_hashPrefix <= ap_const_lv4_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_HashInit_fu_133_hashPrefix <= ap_const_lv4_2;
        else 
            grp_HashInit_fu_133_hashPrefix <= "XXXX";
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_10_fu_120_ap_start <= grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg;

    grp_KeccakWidth1600_Spon_10_fu_120_data_0_read_assign_proc : process(roundNumber, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, temp_0_reg_216)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_KeccakWidth1600_Spon_10_fu_120_data_0_read <= ap_const_lv8_5B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_KeccakWidth1600_Spon_10_fu_120_data_0_read <= temp_0_reg_216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_KeccakWidth1600_Spon_10_fu_120_data_0_read <= roundNumber;
        else 
            grp_KeccakWidth1600_Spon_10_fu_120_data_0_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read_assign_proc : process(reg_180, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ctx_sponge_byteIOInd_41_reg_206)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read <= reg_180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read <= ctx_sponge_byteIOInd_41_reg_206;
        else 
            grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_15_fu_96_ap_start <= grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg;
    grp_KeccakWidth1600_Spon_3_fu_66_ap_start <= grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg;

    grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen <= ap_const_lv8_5B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen <= ap_const_lv8_20;
        else 
            grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen <= "XXXXXXXX";
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_4_fu_82_ap_start <= grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg;
    grp_KeccakWidth1600_Spon_8_fu_108_ap_start <= grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg;
    salt_0_address0 <= grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0;
    salt_0_ce0 <= grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0;
    seed_0_address0 <= grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0;
    seed_0_ce0 <= grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0;

    tape_address0_assign_proc : process(ap_CS_fsm_state12, grp_KeccakWidth1600_Spon_3_fu_66_data_address0, grp_KeccakWidth1600_Spon_15_fu_96_data_address0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            tape_address0 <= grp_KeccakWidth1600_Spon_15_fu_96_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tape_address0 <= grp_KeccakWidth1600_Spon_3_fu_66_data_address0;
        else 
            tape_address0 <= "XXXXXXX";
        end if; 
    end process;


    tape_ce0_assign_proc : process(ap_CS_fsm_state12, grp_KeccakWidth1600_Spon_3_fu_66_data_ce0, grp_KeccakWidth1600_Spon_15_fu_96_data_ce0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            tape_ce0 <= grp_KeccakWidth1600_Spon_15_fu_96_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tape_ce0 <= grp_KeccakWidth1600_Spon_3_fu_66_data_ce0;
        else 
            tape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tape_d0 <= grp_KeccakWidth1600_Spon_3_fu_66_data_d0;

    tape_we0_assign_proc : process(grp_KeccakWidth1600_Spon_3_fu_66_data_we0, ap_CS_fsm_state8, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tape_we0 <= grp_KeccakWidth1600_Spon_3_fu_66_data_we0;
        else 
            tape_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_0_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(playerNumber),8));
end behav;
