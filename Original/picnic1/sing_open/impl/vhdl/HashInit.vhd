-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HashInit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_ce0 : OUT STD_LOGIC;
    ctx_sponge_state_we0 : OUT STD_LOGIC;
    ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    hashPrefix : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HashInit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_fu_92_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln66_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_i_i_i_reg_52 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_reg_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln140_fu_98_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component KeccakWidth1600_Spon_12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_0_read : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_KeccakWidth1600_Spon_12_fu_74 : component KeccakWidth1600_Spon_12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_12_fu_74_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_12_fu_74_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_12_fu_74_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_12_fu_74_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        data_0_read => hashPrefix,
        ap_return => grp_KeccakWidth1600_Spon_12_fu_74_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_preg <= ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln139_fu_86_p2 = ap_const_lv1_1) and (icmp_ln66_fu_103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_12_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_sponge_byteIOInd_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ctx_sponge_byteIOInd_reg_63 <= grp_KeccakWidth1600_Spon_12_fu_74_ap_return;
            elsif (((icmp_ln139_fu_86_p2 = ap_const_lv1_1) and (icmp_ln66_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ctx_sponge_byteIOInd_reg_63 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    loop_0_i_i_i_reg_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_0_i_i_i_reg_52 <= ap_const_lv8_0;
            elsif (((icmp_ln139_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_i_i_i_reg_52 <= loop_fu_92_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln66_reg_122 <= icmp_ln66_fu_103_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln139_fu_86_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln139_fu_86_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_on_subcall_done_assign_proc : process(icmp_ln66_reg_122, grp_KeccakWidth1600_Spon_12_fu_74_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((icmp_ln66_reg_122 = ap_const_lv1_0) and (grp_KeccakWidth1600_Spon_12_fu_74_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4_assign_proc : process(icmp_ln66_reg_122, grp_KeccakWidth1600_Spon_12_fu_74_ap_return, ctx_sponge_byteIOInd_reg_63, ap_CS_fsm_state3)
    begin
        if (((icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 <= grp_KeccakWidth1600_Spon_12_fu_74_ap_return;
        else 
            ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 <= ctx_sponge_byteIOInd_reg_63;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return <= ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ctx_sponge_state_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_reg_122, icmp_ln139_fu_86_p2, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0, ap_CS_fsm_state3, zext_ln140_fu_98_p1)
    begin
        if (((icmp_ln139_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_address0 <= zext_ln140_fu_98_p1(8 - 1 downto 0);
        elsif (((icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0;
        else 
            ctx_sponge_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_reg_122, icmp_ln139_fu_86_p2, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0, ap_CS_fsm_state3)
    begin
        if (((icmp_ln139_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0;
        else 
            ctx_sponge_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_reg_122, icmp_ln139_fu_86_p2, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0, ap_CS_fsm_state3)
    begin
        if (((icmp_ln139_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_d0 <= ap_const_lv8_0;
        elsif (((icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0;
        else 
            ctx_sponge_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_reg_122, icmp_ln139_fu_86_p2, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0, ap_CS_fsm_state3)
    begin
        if (((icmp_ln139_fu_86_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_we0 <= ap_const_logic_1;
        elsif (((icmp_ln66_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0;
        else 
            ctx_sponge_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_12_fu_74_ap_start <= grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg;
    icmp_ln139_fu_86_p2 <= "1" when (loop_0_i_i_i_reg_52 = ap_const_lv8_C8) else "0";
    icmp_ln66_fu_103_p2 <= "1" when (hashPrefix = ap_const_lv4_F) else "0";
    loop_fu_92_p2 <= std_logic_vector(unsigned(loop_0_i_i_i_reg_52) + unsigned(ap_const_lv8_1));
    zext_ln140_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_i_i_reg_52),64));
end behav;
