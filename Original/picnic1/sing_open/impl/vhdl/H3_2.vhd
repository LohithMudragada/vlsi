-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity H3_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    circuitOutput_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    circuitOutput_ce0 : OUT STD_LOGIC;
    circuitOutput_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    as_hashes_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    as_hashes_ce0 : OUT STD_LOGIC;
    as_hashes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    challengeBits_ce0 : OUT STD_LOGIC;
    challengeBits_we0 : OUT STD_LOGIC;
    challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    salt_0_ce0 : OUT STD_LOGIC;
    salt_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of H3_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_4A : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_DB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011011011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln594_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln595_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_HashUpdate_2_fu_359_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_HashUpdate_2_fu_359_ap_ready : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_HashFinal_fu_459_ap_ready : STD_LOGIC;
    signal grp_HashFinal_fu_459_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_HashInit_fu_447_ap_ready : STD_LOGIC;
    signal grp_HashInit_fu_447_ap_done : STD_LOGIC;
    signal i_fu_528_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln589_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln589_reg_982 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln576_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_17_fu_567_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_17_reg_997 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln589_fu_573_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln589_reg_1002 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln577_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_578_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln37_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_reg_1015 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_55_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_fu_635_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln37_reg_1028 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_fu_639_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_1035 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_sponge_byteIOInd_52_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln8_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln9_reg_1050 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_30_fu_722_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_30_reg_1058 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_1_fu_728_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln41_1_reg_1077 : STD_LOGIC_VECTOR (60 downto 0);
    signal j_fu_742_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1085 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_59_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_60_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_done : STD_LOGIC;
    signal i_32_load_reg_1100 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_53_fu_761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal byte_reg_1114 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal lshr_ln630_fu_787_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln630_reg_1122 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_54_fu_769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln630_fu_792_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln630_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln378_fu_809_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln378_reg_1141 : STD_LOGIC_VECTOR (1 downto 0);
    signal challengeBits_addr_1_reg_1146 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_18_fu_956_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln634_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_HashInit_fu_447_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_62_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_63_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_done : STD_LOGIC;
    signal temp_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hash_ce0 : STD_LOGIC;
    signal hash_we0 : STD_LOGIC;
    signal ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_sponge_state_ce0 : STD_LOGIC;
    signal ctx_sponge_state_we0 : STD_LOGIC;
    signal ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_sponge_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashUpdate_2_fu_359_ap_start : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_ap_idle : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashUpdate_2_fu_359_ctx_sponge_state_ce0 : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_ctx_sponge_state_we0 : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HashUpdate_2_fu_359_data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_HashUpdate_2_fu_359_data_ce0 : STD_LOGIC;
    signal grp_HashUpdate_2_fu_359_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_2_fu_372_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_2_fu_372_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_2_fu_372_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakWidth1600_Spon_2_fu_372_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_data_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_2_fu_372_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_14_fu_384_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_14_fu_384_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_14_fu_384_data_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_KeccakWidth1600_Spon_14_fu_384_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_6_fu_397_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_6_fu_397_data_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_KeccakWidth1600_Spon_6_fu_397_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_done : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_ready : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_413_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_413_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_KeccakWidth1600_Spon_9_fu_413_data_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_424_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_424_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_424_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_8_fu_424_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_424_data_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakWidth1600_Spon_8_fu_424_data_0_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_start : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_idle : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_instance_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_13_fu_436_instance_state_ce0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_instance_state_we0 : STD_LOGIC;
    signal grp_KeccakWidth1600_Spon_13_fu_436_instance_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakWidth1600_Spon_13_fu_436_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakWidth1600_Spon_13_fu_436_data_ce0 : STD_LOGIC;
    signal grp_HashInit_fu_447_ap_start : STD_LOGIC;
    signal grp_HashInit_fu_447_ap_idle : STD_LOGIC;
    signal grp_HashInit_fu_447_ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashInit_fu_447_ctx_sponge_state_ce0 : STD_LOGIC;
    signal grp_HashInit_fu_447_ctx_sponge_state_we0 : STD_LOGIC;
    signal grp_HashInit_fu_447_ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashFinal_fu_459_ap_start : STD_LOGIC;
    signal grp_HashFinal_fu_459_ap_idle : STD_LOGIC;
    signal grp_HashFinal_fu_459_ctx_sponge_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashFinal_fu_459_ctx_sponge_state_ce0 : STD_LOGIC;
    signal grp_HashFinal_fu_459_ctx_sponge_state_we0 : STD_LOGIC;
    signal grp_HashFinal_fu_459_ctx_sponge_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_HashFinal_fu_459_ctx_sponge_byteIOInd : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HashFinal_fu_459_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_HashFinal_fu_459_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_ln34_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln34_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_i_reg_312 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_1_reg_323 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_335 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j2_0_reg_347 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_HashUpdate_2_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_HashInit_fu_447_ap_start_reg : STD_LOGIC := '0';
    signal grp_HashFinal_fu_459_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln34_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln626_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctx_sponge_byteIOInd_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_sponge_byteIOInd_49_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_32_fu_172 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_33_fu_828_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal round_1_fu_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_fu_940_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln66_3_fu_933_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln39_fu_645_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_534_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln589_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln576_fu_518_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln577_fu_557_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln_fu_607_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_617_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln38_fu_626_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln41_fu_661_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln43_fu_691_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln45_fu_701_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln630_fu_777_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln630_fu_783_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitPair_fu_796_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln10_fu_813_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal bitNumber_assign_fu_838_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln66_fu_848_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln66_3_fu_854_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_fu_858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln378_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_5_fu_864_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln66_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_9_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln66_6_fu_899_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln66_4_fu_905_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_10_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln379_fu_895_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln66_fu_882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_7_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln66_3_fu_927_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_11_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_state34_on_subcall_done : BOOLEAN;

    component HashUpdate_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_ce0 : OUT STD_LOGIC;
        ctx_sponge_state_we0 : OUT STD_LOGIC;
        ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        instance_squeezing_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_we0 : OUT STD_LOGIC;
        data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeccakWidth1600_Spon_14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dataByteLen : IN STD_LOGIC_VECTOR (60 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        data_offset1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeccakWidth1600_Spon_13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_ce0 : OUT STD_LOGIC;
        instance_state_we0 : OUT STD_LOGIC;
        instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashInit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_ce0 : OUT STD_LOGIC;
        ctx_sponge_state_we0 : OUT STD_LOGIC;
        ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        hashPrefix : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashFinal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_ce0 : OUT STD_LOGIC;
        ctx_sponge_state_we0 : OUT STD_LOGIC;
        ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HashUpdate_2_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component H3_2_hash IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component H3_2_ctx_sponge_smb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_U : component HashUpdate_2_1_temp
    generic map (
        DataWidth => 8,
        AddressRange => 75,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => temp_d1);

    hash_U : component H3_2_hash
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hash_address0,
        ce0 => hash_ce0,
        we0 => hash_we0,
        d0 => grp_KeccakWidth1600_Spon_2_fu_372_data_d0,
        q0 => hash_q0);

    ctx_sponge_state_U : component H3_2_ctx_sponge_smb6
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_sponge_state_address0,
        ce0 => ctx_sponge_state_ce0,
        we0 => ctx_sponge_state_we0,
        d0 => ctx_sponge_state_d0,
        q0 => ctx_sponge_state_q0);

    grp_HashUpdate_2_fu_359 : component HashUpdate_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HashUpdate_2_fu_359_ap_start,
        ap_done => grp_HashUpdate_2_fu_359_ap_done,
        ap_idle => grp_HashUpdate_2_fu_359_ap_idle,
        ap_ready => grp_HashUpdate_2_fu_359_ap_ready,
        ctx_sponge_state_address0 => grp_HashUpdate_2_fu_359_ctx_sponge_state_address0,
        ctx_sponge_state_ce0 => grp_HashUpdate_2_fu_359_ctx_sponge_state_ce0,
        ctx_sponge_state_we0 => grp_HashUpdate_2_fu_359_ctx_sponge_state_we0,
        ctx_sponge_state_d0 => grp_HashUpdate_2_fu_359_ctx_sponge_state_d0,
        ctx_sponge_state_q0 => ctx_sponge_state_q0,
        ctx_sponge_byteIOInd => grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd,
        data_address0 => grp_HashUpdate_2_fu_359_data_address0,
        data_ce0 => grp_HashUpdate_2_fu_359_data_ce0,
        data_q0 => grp_HashUpdate_2_fu_359_data_q0,
        ap_return => grp_HashUpdate_2_fu_359_ap_return);

    grp_KeccakWidth1600_Spon_2_fu_372 : component KeccakWidth1600_Spon_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_2_fu_372_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_2_fu_372_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_2_fu_372_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_2_fu_372_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_2_fu_372_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_2_fu_372_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_2_fu_372_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_2_fu_372_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_503,
        instance_squeezing_read => reg_508,
        data_address0 => grp_KeccakWidth1600_Spon_2_fu_372_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_2_fu_372_data_ce0,
        data_we0 => grp_KeccakWidth1600_Spon_2_fu_372_data_we0,
        data_d0 => grp_KeccakWidth1600_Spon_2_fu_372_data_d0);

    grp_KeccakWidth1600_Spon_14_fu_384 : component KeccakWidth1600_Spon_14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_14_fu_384_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_14_fu_384_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_14_fu_384_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_14_fu_384_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_14_fu_384_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_14_fu_384_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_14_fu_384_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_14_fu_384_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => ctx_sponge_byteIOInd_59_reg_1090,
        data_address0 => grp_KeccakWidth1600_Spon_14_fu_384_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_14_fu_384_data_ce0,
        data_q0 => message_q0,
        dataByteLen => trunc_ln41_1_reg_1077,
        ap_return => grp_KeccakWidth1600_Spon_14_fu_384_ap_return);

    grp_KeccakWidth1600_Spon_6_fu_397 : component KeccakWidth1600_Spon_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_6_fu_397_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_6_fu_397_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_6_fu_397_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_6_fu_397_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_6_fu_397_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_6_fu_397_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_6_fu_397_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_6_fu_397_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_491,
        data_address0 => grp_KeccakWidth1600_Spon_6_fu_397_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_6_fu_397_data_ce0,
        data_q0 => as_hashes_q0,
        data_offset => i_1_reg_323,
        data_offset1 => j_1_reg_335,
        ap_return => grp_KeccakWidth1600_Spon_6_fu_397_ap_return);

    grp_KeccakWidth1600_Spon_9_fu_413 : component KeccakWidth1600_Spon_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_9_fu_413_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_9_fu_413_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_9_fu_413_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_9_fu_413_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_9_fu_413_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_9_fu_413_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_9_fu_413_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_9_fu_413_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => ctx_sponge_byteIOInd_52_reg_1040,
        data_address0 => grp_KeccakWidth1600_Spon_9_fu_413_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_9_fu_413_data_ce0,
        data_q0 => temp_q0,
        ap_return => grp_KeccakWidth1600_Spon_9_fu_413_ap_return);

    grp_KeccakWidth1600_Spon_8_fu_424 : component KeccakWidth1600_Spon_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_8_fu_424_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_8_fu_424_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_8_fu_424_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_8_fu_424_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_8_fu_424_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_8_fu_424_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_8_fu_424_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_8_fu_424_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => reg_497,
        data_0_address0 => grp_KeccakWidth1600_Spon_8_fu_424_data_0_address0,
        data_0_ce0 => grp_KeccakWidth1600_Spon_8_fu_424_data_0_ce0,
        data_0_q0 => salt_0_q0,
        ap_return => grp_KeccakWidth1600_Spon_8_fu_424_ap_return);

    grp_KeccakWidth1600_Spon_13_fu_436 : component KeccakWidth1600_Spon_13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakWidth1600_Spon_13_fu_436_ap_start,
        ap_done => grp_KeccakWidth1600_Spon_13_fu_436_ap_done,
        ap_idle => grp_KeccakWidth1600_Spon_13_fu_436_ap_idle,
        ap_ready => grp_KeccakWidth1600_Spon_13_fu_436_ap_ready,
        instance_state_address0 => grp_KeccakWidth1600_Spon_13_fu_436_instance_state_address0,
        instance_state_ce0 => grp_KeccakWidth1600_Spon_13_fu_436_instance_state_ce0,
        instance_state_we0 => grp_KeccakWidth1600_Spon_13_fu_436_instance_state_we0,
        instance_state_d0 => grp_KeccakWidth1600_Spon_13_fu_436_instance_state_d0,
        instance_state_q0 => ctx_sponge_state_q0,
        instance_byteIOIndex_read => ctx_sponge_byteIOInd_62_reg_1159,
        data_address0 => grp_KeccakWidth1600_Spon_13_fu_436_data_address0,
        data_ce0 => grp_KeccakWidth1600_Spon_13_fu_436_data_ce0,
        data_q0 => hash_q0,
        ap_return => grp_KeccakWidth1600_Spon_13_fu_436_ap_return);

    grp_HashInit_fu_447 : component HashInit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HashInit_fu_447_ap_start,
        ap_done => grp_HashInit_fu_447_ap_done,
        ap_idle => grp_HashInit_fu_447_ap_idle,
        ap_ready => grp_HashInit_fu_447_ap_ready,
        ctx_sponge_state_address0 => grp_HashInit_fu_447_ctx_sponge_state_address0,
        ctx_sponge_state_ce0 => grp_HashInit_fu_447_ctx_sponge_state_ce0,
        ctx_sponge_state_we0 => grp_HashInit_fu_447_ctx_sponge_state_we0,
        ctx_sponge_state_d0 => grp_HashInit_fu_447_ctx_sponge_state_d0,
        ctx_sponge_state_q0 => ctx_sponge_state_q0,
        hashPrefix => ap_const_lv4_1,
        ap_return => grp_HashInit_fu_447_ap_return);

    grp_HashFinal_fu_459 : component HashFinal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HashFinal_fu_459_ap_start,
        ap_done => grp_HashFinal_fu_459_ap_done,
        ap_idle => grp_HashFinal_fu_459_ap_idle,
        ap_ready => grp_HashFinal_fu_459_ap_ready,
        ctx_sponge_state_address0 => grp_HashFinal_fu_459_ctx_sponge_state_address0,
        ctx_sponge_state_ce0 => grp_HashFinal_fu_459_ctx_sponge_state_ce0,
        ctx_sponge_state_we0 => grp_HashFinal_fu_459_ctx_sponge_state_we0,
        ctx_sponge_state_d0 => grp_HashFinal_fu_459_ctx_sponge_state_d0,
        ctx_sponge_state_q0 => ctx_sponge_state_q0,
        ctx_sponge_byteIOInd => grp_HashFinal_fu_459_ctx_sponge_byteIOInd,
        ap_return_0 => grp_HashFinal_fu_459_ap_return_0,
        ap_return_1 => grp_HashFinal_fu_459_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_HashFinal_fu_459_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HashFinal_fu_459_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    grp_HashFinal_fu_459_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HashFinal_fu_459_ap_ready = ap_const_logic_1)) then 
                    grp_HashFinal_fu_459_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_HashInit_fu_447_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HashInit_fu_447_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_53_fu_761_p3 = ap_const_lv1_1)))) then 
                    grp_HashInit_fu_447_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HashInit_fu_447_ap_ready = ap_const_logic_1)) then 
                    grp_HashInit_fu_447_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_HashUpdate_2_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HashUpdate_2_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_1)))) then 
                    grp_HashUpdate_2_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HashUpdate_2_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_HashUpdate_2_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_13_fu_436_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_14_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_2_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln595_fu_736_p2 = ap_const_lv1_0))) then 
                    grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_6_fu_397_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_8_fu_424_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_55_fu_599_p3 = ap_const_lv1_1))) then 
                    grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakWidth1600_Spon_9_fu_413_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_sponge_byteIOInd_49_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_6_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                ctx_sponge_byteIOInd_49_fu_168 <= grp_KeccakWidth1600_Spon_6_fu_397_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln576_fu_522_p2 = ap_const_lv1_1))) then 
                ctx_sponge_byteIOInd_49_fu_168 <= ctx_sponge_byteIOInd_fu_152;
            end if; 
        end if;
    end process;

    ctx_sponge_byteIOInd_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_9_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ctx_sponge_byteIOInd_fu_152 <= grp_KeccakWidth1600_Spon_9_fu_413_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1))) then 
                ctx_sponge_byteIOInd_fu_152 <= grp_HashInit_fu_447_ap_return;
            end if; 
        end if;
    end process;

    i_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln577_fu_561_p2 = ap_const_lv1_1))) then 
                i_0_reg_279 <= i_reg_977;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1))) then 
                i_0_reg_279 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln595_fu_736_p2 = ap_const_lv1_1))) then 
                i_1_reg_323 <= i_30_reg_1058;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln576_fu_522_p2 = ap_const_lv1_1))) then 
                i_1_reg_323 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_32_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_54_fu_769_p3 = ap_const_lv1_1))) then 
                i_32_fu_172 <= i_33_fu_828_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_53_fu_761_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_1)))) then 
                i_32_fu_172 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j2_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln634_fu_945_p2 = ap_const_lv1_0) or (icmp_ln631_reg_1132 = ap_const_lv1_1)))) then 
                j2_0_reg_347 <= j_18_fu_956_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j2_0_reg_347 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_9_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_reg_290 <= j_17_reg_997;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln576_fu_522_p2 = ap_const_lv1_0))) then 
                j_0_reg_290 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_0))) then 
                j_1_reg_335 <= ap_const_lv2_0;
            elsif (((grp_KeccakWidth1600_Spon_6_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_1_reg_335 <= j_reg_1085;
            end if; 
        end if;
    end process;

    loop_0_i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_589_p2 = ap_const_lv1_1))) then 
                loop_0_i_reg_312 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_0_i_reg_312 <= loop_reg_1035;
            end if; 
        end if;
    end process;

    phi_ln34_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_589_p2 = ap_const_lv1_0))) then 
                phi_ln34_reg_301 <= add_ln34_fu_578_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln577_fu_561_p2 = ap_const_lv1_0))) then 
                phi_ln34_reg_301 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    round_1_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln634_fu_945_p2 = ap_const_lv1_0) and (icmp_ln631_reg_1132 = ap_const_lv1_0))) then 
                round_1_fu_176 <= round_fu_940_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_1))) then 
                round_1_fu_176 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln577_fu_561_p2 = ap_const_lv1_0))) then
                add_ln589_reg_1002 <= add_ln589_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                byte_reg_1114 <= hash_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln631_fu_800_p2 = ap_const_lv1_0) and (tmp_54_fu_769_p3 = ap_const_lv1_0))) then
                challengeBits_addr_1_reg_1146 <= zext_ln66_fu_823_p1(6 - 1 downto 0);
                trunc_ln378_reg_1141 <= trunc_ln378_fu_809_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_55_fu_599_p3 = ap_const_lv1_1))) then
                ctx_sponge_byteIOInd_52_reg_1040 <= ctx_sponge_byteIOInd_fu_152;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_8_fu_424_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                ctx_sponge_byteIOInd_59_reg_1090 <= grp_KeccakWidth1600_Spon_8_fu_424_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_14_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                ctx_sponge_byteIOInd_60_reg_1095 <= grp_KeccakWidth1600_Spon_14_fu_384_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1))) then
                ctx_sponge_byteIOInd_62_reg_1159 <= grp_HashInit_fu_447_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakWidth1600_Spon_13_fu_436_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                ctx_sponge_byteIOInd_63_reg_1164 <= grp_KeccakWidth1600_Spon_13_fu_436_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_30_reg_1058 <= i_30_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_32_load_reg_1100 <= i_32_fu_172;
                tmp_53_reg_1105 <= i_32_fu_172(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_977 <= i_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_54_fu_769_p3 = ap_const_lv1_0))) then
                icmp_ln631_reg_1132 <= icmp_ln631_fu_800_p2;
                lshr_ln630_reg_1122 <= lshr_ln630_fu_787_p2;
                trunc_ln630_reg_1127 <= trunc_ln630_fu_792_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_17_reg_997 <= j_17_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_reg_1085 <= j_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_55_fu_599_p3 = ap_const_lv1_0))) then
                loop_reg_1035 <= loop_fu_639_p2;
                trunc_ln37_reg_1028 <= trunc_ln37_fu_635_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln595_fu_736_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_1)))) then
                reg_491 <= ctx_sponge_byteIOInd_49_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_HashUpdate_2_fu_359_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_HashUpdate_2_fu_359_ap_done = ap_const_logic_1)))) then
                reg_497 <= grp_HashUpdate_2_fu_359_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_HashFinal_fu_459_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_HashFinal_fu_459_ap_done = ap_const_logic_1)))) then
                reg_503 <= grp_HashFinal_fu_459_ap_return_0;
                reg_508 <= grp_HashFinal_fu_459_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln576_fu_522_p2 = ap_const_lv1_0))) then
                sub_ln589_reg_982 <= sub_ln589_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_1))) then
                trunc_ln41_1_reg_1077 <= trunc_ln41_1_fu_728_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln8_reg_1045 <= viewOutputs_q0(23 downto 16);
                trunc_ln9_reg_1050 <= viewOutputs_q0(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    zext_ln37_reg_1015(4 downto 0) <= zext_ln37_fu_595_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_1015(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln594_fu_716_p2, ap_CS_fsm_state11, icmp_ln595_fu_736_p2, ap_CS_fsm_state13, grp_HashUpdate_2_fu_359_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state21, grp_HashFinal_fu_459_ap_done, ap_CS_fsm_state32, ap_CS_fsm_state2, grp_HashInit_fu_447_ap_done, ap_CS_fsm_state3, icmp_ln576_fu_522_p2, ap_CS_fsm_state4, icmp_ln577_fu_561_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_55_fu_599_p3, ap_CS_fsm_state17, grp_KeccakWidth1600_Spon_8_fu_424_ap_done, ap_CS_fsm_state19, grp_KeccakWidth1600_Spon_14_fu_384_ap_done, ap_CS_fsm_state24, tmp_53_fu_761_p3, ap_CS_fsm_state26, tmp_54_fu_769_p3, icmp_ln631_reg_1132, ap_CS_fsm_state27, icmp_ln634_fu_945_p2, ap_CS_fsm_state28, ap_CS_fsm_state30, grp_KeccakWidth1600_Spon_13_fu_436_ap_done, grp_KeccakWidth1600_Spon_2_fu_372_ap_done, grp_KeccakWidth1600_Spon_6_fu_397_ap_done, grp_KeccakWidth1600_Spon_9_fu_413_ap_done, ap_CS_fsm_state9, icmp_ln34_fu_589_p2, ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_block_state34_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln576_fu_522_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln577_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln34_fu_589_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_55_fu_599_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((grp_KeccakWidth1600_Spon_9_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln594_fu_716_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln595_fu_736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_KeccakWidth1600_Spon_6_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_HashUpdate_2_fu_359_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_HashUpdate_2_fu_359_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_KeccakWidth1600_Spon_8_fu_424_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_KeccakWidth1600_Spon_14_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_HashFinal_fu_459_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_KeccakWidth1600_Spon_2_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_53_fu_761_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_54_fu_769_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln631_reg_1132 = ap_const_lv1_0) and (icmp_ln634_fu_945_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_KeccakWidth1600_Spon_13_fu_436_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_HashFinal_fu_459_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_boolean_0 = ap_block_state34_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln34_fu_578_p2 <= std_logic_vector(unsigned(phi_ln34_reg_301) + unsigned(ap_const_lv7_1));
    add_ln589_fu_573_p2 <= std_logic_vector(unsigned(zext_ln577_fu_557_p1) + unsigned(sub_ln589_reg_982));
    and_ln66_3_fu_927_p2 <= (xor_ln66_7_fu_915_p2 and or_ln66_fu_882_p2);
    and_ln66_fu_876_p2 <= (xor_ln66_5_fu_864_p2 and challengeBits_q0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state34_on_subcall_done_assign_proc : process(tmp_53_reg_1105, grp_KeccakWidth1600_Spon_2_fu_372_ap_done)
    begin
                ap_block_state34_on_subcall_done <= ((grp_KeccakWidth1600_Spon_2_fu_372_ap_done = ap_const_logic_0) and (tmp_53_reg_1105 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln631_reg_1132, ap_CS_fsm_state27, icmp_ln634_fu_945_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln631_reg_1132 = ap_const_lv1_0) and (icmp_ln634_fu_945_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln631_reg_1132, ap_CS_fsm_state27, icmp_ln634_fu_945_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln631_reg_1132 = ap_const_lv1_0) and (icmp_ln634_fu_945_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    as_hashes_address0 <= grp_KeccakWidth1600_Spon_6_fu_397_data_address0;
    as_hashes_ce0 <= grp_KeccakWidth1600_Spon_6_fu_397_data_ce0;
    bitNumber_assign_fu_838_p3 <= (trunc_ln378_reg_1141 & ap_const_lv1_0);
    bitPair_fu_796_p1 <= lshr_ln630_fu_787_p2(2 - 1 downto 0);

    challengeBits_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, challengeBits_addr_1_reg_1146, ap_CS_fsm_state27, zext_ln66_fu_823_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            challengeBits_address0 <= challengeBits_addr_1_reg_1146;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            challengeBits_address0 <= zext_ln66_fu_823_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            challengeBits_address0 <= ap_const_lv64_36(6 - 1 downto 0);
        else 
            challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    challengeBits_ce0_assign_proc : process(ap_CS_fsm_state2, grp_HashInit_fu_447_ap_done, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1)))) then 
            challengeBits_ce0 <= ap_const_logic_1;
        else 
            challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    challengeBits_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state27, or_ln66_3_fu_933_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            challengeBits_d0 <= or_ln66_3_fu_933_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            challengeBits_d0 <= ap_const_lv8_0;
        else 
            challengeBits_d0 <= "XXXXXXXX";
        end if; 
    end process;


    challengeBits_we0_assign_proc : process(ap_CS_fsm_state2, grp_HashInit_fu_447_ap_done, icmp_ln631_reg_1132, ap_CS_fsm_state27)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln631_reg_1132 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_HashInit_fu_447_ap_done = ap_const_logic_1)))) then 
            challengeBits_we0 <= ap_const_logic_1;
        else 
            challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    circuitOutput_address0 <= grp_HashUpdate_2_fu_359_data_address0;

    circuitOutput_ce0_assign_proc : process(ap_CS_fsm_state13, grp_HashUpdate_2_fu_359_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            circuitOutput_ce0 <= grp_HashUpdate_2_fu_359_data_ce0;
        else 
            circuitOutput_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_53_reg_1105, ap_CS_fsm_state28, ap_CS_fsm_state30, grp_HashUpdate_2_fu_359_ctx_sponge_state_address0, grp_KeccakWidth1600_Spon_2_fu_372_instance_state_address0, grp_KeccakWidth1600_Spon_14_fu_384_instance_state_address0, grp_KeccakWidth1600_Spon_6_fu_397_instance_state_address0, grp_KeccakWidth1600_Spon_9_fu_413_instance_state_address0, grp_KeccakWidth1600_Spon_8_fu_424_instance_state_address0, grp_KeccakWidth1600_Spon_13_fu_436_instance_state_address0, grp_HashInit_fu_447_ctx_sponge_state_address0, grp_HashFinal_fu_459_ctx_sponge_state_address0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ctx_sponge_state_address0 <= grp_HashFinal_fu_459_ctx_sponge_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_address0 <= grp_HashInit_fu_447_ctx_sponge_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_13_fu_436_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_8_fu_424_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_9_fu_413_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_6_fu_397_instance_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_14_fu_384_instance_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            ctx_sponge_state_address0 <= grp_KeccakWidth1600_Spon_2_fu_372_instance_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ctx_sponge_state_address0 <= grp_HashUpdate_2_fu_359_ctx_sponge_state_address0;
        else 
            ctx_sponge_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_53_reg_1105, ap_CS_fsm_state28, ap_CS_fsm_state30, grp_HashUpdate_2_fu_359_ctx_sponge_state_ce0, grp_KeccakWidth1600_Spon_2_fu_372_instance_state_ce0, grp_KeccakWidth1600_Spon_14_fu_384_instance_state_ce0, grp_KeccakWidth1600_Spon_6_fu_397_instance_state_ce0, grp_KeccakWidth1600_Spon_9_fu_413_instance_state_ce0, grp_KeccakWidth1600_Spon_8_fu_424_instance_state_ce0, grp_KeccakWidth1600_Spon_13_fu_436_instance_state_ce0, grp_HashInit_fu_447_ctx_sponge_state_ce0, grp_HashFinal_fu_459_ctx_sponge_state_ce0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ctx_sponge_state_ce0 <= grp_HashFinal_fu_459_ctx_sponge_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_ce0 <= grp_HashInit_fu_447_ctx_sponge_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_13_fu_436_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_8_fu_424_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_9_fu_413_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_6_fu_397_instance_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_14_fu_384_instance_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            ctx_sponge_state_ce0 <= grp_KeccakWidth1600_Spon_2_fu_372_instance_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ctx_sponge_state_ce0 <= grp_HashUpdate_2_fu_359_ctx_sponge_state_ce0;
        else 
            ctx_sponge_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_53_reg_1105, ap_CS_fsm_state28, ap_CS_fsm_state30, grp_HashUpdate_2_fu_359_ctx_sponge_state_d0, grp_KeccakWidth1600_Spon_2_fu_372_instance_state_d0, grp_KeccakWidth1600_Spon_14_fu_384_instance_state_d0, grp_KeccakWidth1600_Spon_6_fu_397_instance_state_d0, grp_KeccakWidth1600_Spon_9_fu_413_instance_state_d0, grp_KeccakWidth1600_Spon_8_fu_424_instance_state_d0, grp_KeccakWidth1600_Spon_13_fu_436_instance_state_d0, grp_HashInit_fu_447_ctx_sponge_state_d0, grp_HashFinal_fu_459_ctx_sponge_state_d0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ctx_sponge_state_d0 <= grp_HashFinal_fu_459_ctx_sponge_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_d0 <= grp_HashInit_fu_447_ctx_sponge_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_13_fu_436_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_8_fu_424_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_9_fu_413_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_6_fu_397_instance_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_14_fu_384_instance_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            ctx_sponge_state_d0 <= grp_KeccakWidth1600_Spon_2_fu_372_instance_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ctx_sponge_state_d0 <= grp_HashUpdate_2_fu_359_ctx_sponge_state_d0;
        else 
            ctx_sponge_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state32, ap_CS_fsm_state2, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_53_reg_1105, ap_CS_fsm_state28, ap_CS_fsm_state30, grp_HashUpdate_2_fu_359_ctx_sponge_state_we0, grp_KeccakWidth1600_Spon_2_fu_372_instance_state_we0, grp_KeccakWidth1600_Spon_14_fu_384_instance_state_we0, grp_KeccakWidth1600_Spon_6_fu_397_instance_state_we0, grp_KeccakWidth1600_Spon_9_fu_413_instance_state_we0, grp_KeccakWidth1600_Spon_8_fu_424_instance_state_we0, grp_KeccakWidth1600_Spon_13_fu_436_instance_state_we0, grp_HashInit_fu_447_ctx_sponge_state_we0, grp_HashFinal_fu_459_ctx_sponge_state_we0, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ctx_sponge_state_we0 <= grp_HashFinal_fu_459_ctx_sponge_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_sponge_state_we0 <= grp_HashInit_fu_447_ctx_sponge_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_13_fu_436_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_8_fu_424_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_9_fu_413_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_6_fu_397_instance_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_14_fu_384_instance_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            ctx_sponge_state_we0 <= grp_KeccakWidth1600_Spon_2_fu_372_instance_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ctx_sponge_state_we0 <= grp_HashUpdate_2_fu_359_ctx_sponge_state_we0;
        else 
            ctx_sponge_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_HashFinal_fu_459_ap_start <= grp_HashFinal_fu_459_ap_start_reg;

    grp_HashFinal_fu_459_ctx_sponge_byteIOInd_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state32, ctx_sponge_byteIOInd_60_reg_1095, ctx_sponge_byteIOInd_63_reg_1164)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_HashFinal_fu_459_ctx_sponge_byteIOInd <= ctx_sponge_byteIOInd_63_reg_1164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_HashFinal_fu_459_ctx_sponge_byteIOInd <= ctx_sponge_byteIOInd_60_reg_1095;
        else 
            grp_HashFinal_fu_459_ctx_sponge_byteIOInd <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_HashInit_fu_447_ap_start <= grp_HashInit_fu_447_ap_start_reg;
    grp_HashUpdate_2_fu_359_ap_start <= grp_HashUpdate_2_fu_359_ap_start_reg;

    grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd_assign_proc : process(reg_491, reg_497, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd <= reg_497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd <= reg_491;
        else 
            grp_HashUpdate_2_fu_359_ctx_sponge_byteIOInd <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_HashUpdate_2_fu_359_data_q0_assign_proc : process(circuitOutput_q0, plaintext_q0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_HashUpdate_2_fu_359_data_q0 <= plaintext_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_HashUpdate_2_fu_359_data_q0 <= circuitOutput_q0;
        else 
            grp_HashUpdate_2_fu_359_data_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_KeccakWidth1600_Spon_13_fu_436_ap_start <= grp_KeccakWidth1600_Spon_13_fu_436_ap_start_reg;
    grp_KeccakWidth1600_Spon_14_fu_384_ap_start <= grp_KeccakWidth1600_Spon_14_fu_384_ap_start_reg;
    grp_KeccakWidth1600_Spon_2_fu_372_ap_start <= grp_KeccakWidth1600_Spon_2_fu_372_ap_start_reg;
    grp_KeccakWidth1600_Spon_6_fu_397_ap_start <= grp_KeccakWidth1600_Spon_6_fu_397_ap_start_reg;
    grp_KeccakWidth1600_Spon_8_fu_424_ap_start <= grp_KeccakWidth1600_Spon_8_fu_424_ap_start_reg;
    grp_KeccakWidth1600_Spon_9_fu_413_ap_start <= grp_KeccakWidth1600_Spon_9_fu_413_ap_start_reg;

    hash_address0_assign_proc : process(ap_CS_fsm_state24, tmp_53_reg_1105, ap_CS_fsm_state30, grp_KeccakWidth1600_Spon_2_fu_372_data_address0, grp_KeccakWidth1600_Spon_13_fu_436_data_address0, ap_CS_fsm_state23, ap_CS_fsm_state34, zext_ln626_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            hash_address0 <= zext_ln626_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            hash_address0 <= grp_KeccakWidth1600_Spon_13_fu_436_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            hash_address0 <= grp_KeccakWidth1600_Spon_2_fu_372_data_address0;
        else 
            hash_address0 <= "XXXXX";
        end if; 
    end process;


    hash_ce0_assign_proc : process(ap_CS_fsm_state24, tmp_53_reg_1105, ap_CS_fsm_state30, grp_KeccakWidth1600_Spon_2_fu_372_data_ce0, grp_KeccakWidth1600_Spon_13_fu_436_data_ce0, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            hash_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            hash_ce0 <= grp_KeccakWidth1600_Spon_13_fu_436_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            hash_ce0 <= grp_KeccakWidth1600_Spon_2_fu_372_data_ce0;
        else 
            hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_we0_assign_proc : process(tmp_53_reg_1105, grp_KeccakWidth1600_Spon_2_fu_372_data_we0, ap_CS_fsm_state23, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_53_reg_1105 = ap_const_lv1_1)))) then 
            hash_we0 <= grp_KeccakWidth1600_Spon_2_fu_372_data_we0;
        else 
            hash_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_30_fu_722_p2 <= std_logic_vector(unsigned(i_1_reg_323) + unsigned(ap_const_lv8_1));
    i_33_fu_828_p2 <= std_logic_vector(unsigned(i_32_load_reg_1100) + unsigned(ap_const_lv6_1));
    i_fu_528_p2 <= std_logic_vector(unsigned(i_0_reg_279) + unsigned(ap_const_lv8_1));
    icmp_ln34_fu_589_p2 <= "1" when (phi_ln34_reg_301 = ap_const_lv7_4A) else "0";
    icmp_ln576_fu_522_p2 <= "1" when (i_0_reg_279 = ap_const_lv8_DB) else "0";
    icmp_ln577_fu_561_p2 <= "1" when (j_0_reg_290 = ap_const_lv2_3) else "0";
    icmp_ln594_fu_716_p2 <= "1" when (i_1_reg_323 = ap_const_lv8_DB) else "0";
    icmp_ln595_fu_736_p2 <= "1" when (j_1_reg_335 = ap_const_lv2_3) else "0";
    icmp_ln631_fu_800_p2 <= "1" when (bitPair_fu_796_p1 = ap_const_lv2_3) else "0";
    icmp_ln634_fu_945_p2 <= "1" when (round_fu_940_p2 = ap_const_lv64_DB) else "0";
    j_17_fu_567_p2 <= std_logic_vector(unsigned(j_0_reg_290) + unsigned(ap_const_lv2_1));
    j_18_fu_956_p2 <= std_logic_vector(unsigned(j2_0_reg_347) + unsigned(ap_const_lv4_2));
    j_fu_742_p2 <= std_logic_vector(unsigned(j_1_reg_335) + unsigned(ap_const_lv2_1));
    loop_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_0_i_reg_312));
    lshr_ln630_fu_787_p2 <= std_logic_vector(shift_right(unsigned(byte_reg_1114),to_integer(unsigned('0' & sext_ln630_fu_783_p1(8-1 downto 0)))));
    message_address0 <= grp_KeccakWidth1600_Spon_14_fu_384_data_address0;
    message_ce0 <= grp_KeccakWidth1600_Spon_14_fu_384_data_ce0;
    or_ln41_fu_661_p2 <= (trunc_ln37_reg_1028 or ap_const_lv4_1);
    or_ln43_fu_691_p2 <= (trunc_ln37_reg_1028 or ap_const_lv4_2);
    or_ln45_fu_701_p2 <= (trunc_ln37_reg_1028 or ap_const_lv4_3);
    or_ln66_3_fu_933_p2 <= (shl_ln66_11_fu_921_p2 or and_ln66_3_fu_927_p2);
    or_ln66_fu_882_p2 <= (shl_ln66_9_fu_870_p2 or and_ln66_fu_876_p2);
    plaintext_address0 <= grp_HashUpdate_2_fu_359_data_address0;

    plaintext_ce0_assign_proc : process(ap_CS_fsm_state15, grp_HashUpdate_2_fu_359_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            plaintext_ce0 <= grp_HashUpdate_2_fu_359_data_ce0;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    round_fu_940_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(round_1_fu_176));
    salt_0_address0 <= grp_KeccakWidth1600_Spon_8_fu_424_data_0_address0;
    salt_0_ce0 <= grp_KeccakWidth1600_Spon_8_fu_424_data_0_ce0;
        sext_ln38_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_617_p4),36));

        sext_ln630_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln630_fu_777_p2),8));

    shl_ln66_10_fu_909_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln66_4_fu_905_p1(8-1 downto 0)))));
    shl_ln66_11_fu_921_p2 <= std_logic_vector(shift_left(unsigned(zext_ln379_fu_895_p1),to_integer(unsigned('0' & zext_ln66_4_fu_905_p1(8-1 downto 0)))));
    shl_ln66_9_fu_870_p2 <= std_logic_vector(shift_left(unsigned(zext_ln378_fu_845_p1),to_integer(unsigned('0' & zext_ln66_3_fu_854_p1(8-1 downto 0)))));
    shl_ln66_fu_858_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln66_3_fu_854_p1(8-1 downto 0)))));
    shl_ln_fu_534_p3 <= (i_0_reg_279 & ap_const_lv2_0);
    sub_ln589_fu_546_p2 <= std_logic_vector(unsigned(zext_ln589_fu_542_p1) - unsigned(zext_ln576_fu_518_p1));
    sub_ln630_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) - unsigned(j2_0_reg_347));

    temp_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln37_reg_1015, ap_CS_fsm_state7, grp_KeccakWidth1600_Spon_9_fu_413_data_address0, ap_CS_fsm_state9, ap_CS_fsm_state8, zext_ln34_fu_584_p1, zext_ln45_fu_706_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_address0 <= zext_ln45_fu_706_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln37_reg_1015(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= zext_ln34_fu_584_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_address0 <= grp_KeccakWidth1600_Spon_9_fu_413_data_address0;
        else 
            temp_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln41_fu_666_p1, zext_ln43_fu_696_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_address1 <= zext_ln43_fu_696_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address1 <= zext_ln41_fu_666_p1(7 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, grp_KeccakWidth1600_Spon_9_fu_413_data_ce0, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_ce0 <= grp_KeccakWidth1600_Spon_9_fu_413_data_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, trunc_ln9_reg_1050, ap_CS_fsm_state8, trunc_ln39_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_d0 <= trunc_ln9_reg_1050;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d0 <= trunc_ln39_fu_645_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_d0 <= ap_const_lv8_0;
        else 
            temp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_d1_assign_proc : process(viewOutputs_q0, trunc_ln8_reg_1045, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_d1 <= trunc_ln8_reg_1045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d1 <= viewOutputs_q0(15 downto 8);
        else 
            temp_d1 <= "XXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_53_fu_761_p3 <= i_32_fu_172(5 downto 5);
    tmp_54_fu_769_p3 <= j2_0_reg_347(3 downto 3);
    tmp_55_fu_599_p3 <= loop_0_i_reg_312(4 downto 4);
    tmp_56_fu_888_p3 <= lshr_ln630_reg_1122(1 downto 1);
    tmp_fu_617_p4 <= ((add_ln589_reg_1002 & ap_const_lv2_0) & trunc_ln_fu_607_p4);
    trunc_ln10_fu_813_p4 <= round_1_fu_176(30 downto 2);
    trunc_ln378_fu_809_p1 <= round_1_fu_176(2 - 1 downto 0);
    trunc_ln37_fu_635_p1 <= loop_0_i_reg_312(4 - 1 downto 0);
    trunc_ln39_fu_645_p1 <= viewOutputs_q0(8 - 1 downto 0);
    trunc_ln41_1_fu_728_p1 <= messageByteLength(61 - 1 downto 0);
    trunc_ln630_fu_792_p1 <= lshr_ln630_fu_787_p2(1 - 1 downto 0);
    trunc_ln_fu_607_p4 <= loop_0_i_reg_312(3 downto 2);
    viewOutputs_address0 <= zext_ln38_fu_630_p1(14 - 1 downto 0);

    viewOutputs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            viewOutputs_ce0 <= ap_const_logic_1;
        else 
            viewOutputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln66_5_fu_864_p2 <= (shl_ln66_fu_858_p2 xor ap_const_lv8_FF);
    xor_ln66_6_fu_899_p2 <= (bitNumber_assign_fu_838_p3 xor ap_const_lv3_6);
    xor_ln66_7_fu_915_p2 <= (shl_ln66_10_fu_909_p2 xor ap_const_lv8_FF);
    xor_ln66_fu_848_p2 <= (bitNumber_assign_fu_838_p3 xor ap_const_lv3_7);
    zext_ln34_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln34_reg_301),64));
    zext_ln378_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln630_reg_1127),8));
    zext_ln379_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_888_p3),8));
    zext_ln37_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_312),64));
    zext_ln38_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_fu_626_p1),64));
    zext_ln41_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_fu_661_p2),64));
    zext_ln43_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_fu_691_p2),64));
    zext_ln45_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_701_p2),64));
    zext_ln576_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_279),11));
    zext_ln577_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_290),11));
    zext_ln589_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_534_p3),11));
    zext_ln626_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_32_fu_172),64));
    zext_ln66_3_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_fu_848_p2),8));
    zext_ln66_4_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_6_fu_899_p2),8));
    zext_ln66_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln10_fu_813_p4),64));
end behav;
