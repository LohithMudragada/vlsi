// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
output   A_we0;
output  [63:0] A_d0;
input  [63:0] A_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg A_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] x_fu_122_p2;
reg   [2:0] x_reg_315;
wire    ap_CS_fsm_state2;
wire   [3:0] zext_ln362_1_fu_128_p1;
reg   [3:0] zext_ln362_1_reg_320;
wire   [0:0] icmp_ln361_fu_116_p2;
wire   [2:0] y_fu_138_p2;
reg   [2:0] y_reg_328;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln362_fu_171_p1;
reg   [63:0] zext_ln362_reg_333;
wire   [0:0] icmp_ln361_1_fu_132_p2;
wire   [2:0] x_5_fu_182_p2;
reg   [2:0] x_5_reg_346;
wire    ap_CS_fsm_state5;
wire   [3:0] zext_ln364_2_fu_188_p1;
reg   [3:0] zext_ln364_2_reg_351;
wire   [0:0] icmp_ln363_fu_176_p2;
wire   [7:0] zext_ln364_3_fu_200_p1;
reg   [7:0] zext_ln364_3_reg_356;
wire   [2:0] y_3_fu_214_p2;
reg   [2:0] y_3_reg_364;
wire    ap_CS_fsm_state6;
wire   [3:0] zext_ln364_4_fu_220_p1;
reg   [3:0] zext_ln364_4_reg_369;
wire   [0:0] icmp_ln363_1_fu_208_p2;
wire   [4:0] add_ln364_fu_241_p2;
reg   [4:0] add_ln364_reg_374;
wire    ap_CS_fsm_state16;
reg   [4:0] tempA_address0;
reg    tempA_ce0;
reg    tempA_we0;
wire   [63:0] tempA_q0;
reg   [2:0] x_0_reg_72;
reg   [2:0] y_0_reg_83;
wire    ap_CS_fsm_state4;
reg   [2:0] x_1_reg_94;
reg   [2:0] y_1_reg_105;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln364_fu_272_p1;
wire   [63:0] zext_ln364_1_fu_307_p1;
wire   [3:0] zext_ln362_2_fu_144_p1;
wire   [3:0] add_ln362_1_fu_156_p2;
wire   [4:0] shl_ln2_fu_148_p3;
wire   [4:0] zext_ln362_3_fu_161_p1;
wire   [4:0] add_ln362_fu_165_p2;
wire   [3:0] shl_ln_fu_192_p3;
wire   [3:0] add_ln364_3_fu_232_p2;
wire   [4:0] zext_ln364_5_fu_237_p1;
wire   [4:0] shl_ln364_1_fu_224_p3;
wire   [5:0] zext_ln364_6_fu_247_p1;
wire   [5:0] zext_ln363_fu_204_p1;
wire   [5:0] sub_ln364_fu_251_p2;
wire  signed [7:0] sext_ln364_fu_257_p1;
wire   [7:0] grp_fu_266_p0;
wire   [3:0] grp_fu_266_p1;
wire   [3:0] grp_fu_266_p2;
wire   [2:0] trunc_ln364_1_fu_280_p1;
wire   [3:0] trunc_ln364_fu_276_p1;
wire   [3:0] add_ln364_4_fu_292_p2;
wire   [4:0] zext_ln364_7_fu_297_p1;
wire   [4:0] shl_ln364_3_fu_284_p3;
wire   [4:0] add_ln364_2_fu_301_p2;
reg    grp_fu_266_ap_start;
wire    grp_fu_266_ap_done;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

pi_tempA #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
tempA_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tempA_address0),
    .ce0(tempA_ce0),
    .we0(tempA_we0),
    .d0(A_q0),
    .q0(tempA_q0)
);

crypto_sign_open_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
crypto_sign_open_bkb_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_266_ap_start),
    .done(grp_fu_266_ap_done),
    .din0(grp_fu_266_p0),
    .din1(grp_fu_266_p1),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_1_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_72 <= x_reg_315;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_72 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_1_reg_94 <= 3'd0;
    end else if (((icmp_ln363_1_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        x_1_reg_94 <= x_5_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_reg_83 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_reg_83 <= y_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_1_reg_105 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        y_1_reg_105 <= y_3_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_1_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln364_reg_374 <= add_ln364_fu_241_p2;
        zext_ln364_4_reg_369[2 : 0] <= zext_ln364_4_fu_220_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_5_reg_346 <= x_5_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_315 <= x_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_3_reg_364 <= y_3_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_328 <= y_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln362_1_reg_320[2 : 0] <= zext_ln362_1_fu_128_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_1_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln362_reg_333[4 : 0] <= zext_ln362_fu_171_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln364_2_reg_351[2 : 0] <= zext_ln364_2_fu_188_p1[2 : 0];
        zext_ln364_3_reg_356[3 : 1] <= zext_ln364_3_fu_200_p1[3 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        A_address0 = zext_ln364_1_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln362_fu_171_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln363_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln363_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln363_1_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_266_ap_start = 1'b1;
    end else begin
        grp_fu_266_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tempA_address0 = zext_ln364_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tempA_address0 = zext_ln362_reg_333;
    end else begin
        tempA_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16))) begin
        tempA_ce0 = 1'b1;
    end else begin
        tempA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tempA_we0 = 1'b1;
    end else begin
        tempA_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln361_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln361_1_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln363_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln363_1_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = tempA_q0;

assign add_ln362_1_fu_156_p2 = (zext_ln362_1_reg_320 + zext_ln362_2_fu_144_p1);

assign add_ln362_fu_165_p2 = (shl_ln2_fu_148_p3 + zext_ln362_3_fu_161_p1);

assign add_ln364_2_fu_301_p2 = (zext_ln364_7_fu_297_p1 + shl_ln364_3_fu_284_p3);

assign add_ln364_3_fu_232_p2 = (zext_ln364_4_fu_220_p1 + zext_ln364_2_reg_351);

assign add_ln364_4_fu_292_p2 = (trunc_ln364_fu_276_p1 + zext_ln364_4_reg_369);

assign add_ln364_fu_241_p2 = (zext_ln364_5_fu_237_p1 + shl_ln364_1_fu_224_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_266_p0 = ($signed(zext_ln364_3_reg_356) + $signed(sext_ln364_fu_257_p1));

assign grp_fu_266_p1 = 8'd5;

assign icmp_ln361_1_fu_132_p2 = ((y_0_reg_83 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln361_fu_116_p2 = ((x_0_reg_72 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln363_1_fu_208_p2 = ((y_1_reg_105 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln363_fu_176_p2 = ((x_1_reg_94 == 3'd5) ? 1'b1 : 1'b0);

assign sext_ln364_fu_257_p1 = $signed(sub_ln364_fu_251_p2);

assign shl_ln2_fu_148_p3 = {{y_0_reg_83}, {2'd0}};

assign shl_ln364_1_fu_224_p3 = {{y_1_reg_105}, {2'd0}};

assign shl_ln364_3_fu_284_p3 = {{trunc_ln364_1_fu_280_p1}, {2'd0}};

assign shl_ln_fu_192_p3 = {{x_1_reg_94}, {1'd0}};

assign sub_ln364_fu_251_p2 = (zext_ln364_6_fu_247_p1 - zext_ln363_fu_204_p1);

assign trunc_ln364_1_fu_280_p1 = grp_fu_266_p2[2:0];

assign trunc_ln364_fu_276_p1 = grp_fu_266_p2[3:0];

assign x_5_fu_182_p2 = (x_1_reg_94 + 3'd1);

assign x_fu_122_p2 = (x_0_reg_72 + 3'd1);

assign y_3_fu_214_p2 = (y_1_reg_105 + 3'd1);

assign y_fu_138_p2 = (y_0_reg_83 + 3'd1);

assign zext_ln362_1_fu_128_p1 = x_0_reg_72;

assign zext_ln362_2_fu_144_p1 = y_0_reg_83;

assign zext_ln362_3_fu_161_p1 = add_ln362_1_fu_156_p2;

assign zext_ln362_fu_171_p1 = add_ln362_fu_165_p2;

assign zext_ln363_fu_204_p1 = y_1_reg_105;

assign zext_ln364_1_fu_307_p1 = add_ln364_2_fu_301_p2;

assign zext_ln364_2_fu_188_p1 = x_1_reg_94;

assign zext_ln364_3_fu_200_p1 = shl_ln_fu_192_p3;

assign zext_ln364_4_fu_220_p1 = y_1_reg_105;

assign zext_ln364_5_fu_237_p1 = add_ln364_3_fu_232_p2;

assign zext_ln364_6_fu_247_p1 = shl_ln364_1_fu_224_p3;

assign zext_ln364_7_fu_297_p1 = add_ln364_4_fu_292_p2;

assign zext_ln364_fu_272_p1 = add_ln364_reg_374;

always @ (posedge ap_clk) begin
    zext_ln362_1_reg_320[3] <= 1'b0;
    zext_ln362_reg_333[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln364_2_reg_351[3] <= 1'b0;
    zext_ln364_3_reg_356[0] <= 1'b0;
    zext_ln364_3_reg_356[7:4] <= 4'b0000;
    zext_ln364_4_reg_369[3] <= 1'b0;
end

endmodule //pi
