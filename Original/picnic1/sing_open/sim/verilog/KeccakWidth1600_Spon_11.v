// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeccakWidth1600_Spon_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        instance_state_address0,
        instance_state_ce0,
        instance_state_we0,
        instance_state_d0,
        instance_state_q0,
        instance_byteIOIndex_read,
        data_address0,
        data_ce0,
        data_q0,
        data_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] instance_state_address0;
output   instance_state_ce0;
output   instance_state_we0;
output  [7:0] instance_state_d0;
input  [7:0] instance_state_q0;
input  [31:0] instance_byteIOIndex_read;
output  [14:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
input  [7:0] data_offset;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] instance_state_address0;
reg instance_state_ce0;
reg instance_state_we0;
reg[7:0] instance_state_d0;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] mul_ln212_fu_120_p2;
reg   [14:0] mul_ln212_reg_299;
reg   [33:0] i_24_load_reg_304;
wire    ap_CS_fsm_state2;
wire   [6:0] partialBlock_fu_149_p2;
reg   [6:0] partialBlock_reg_312;
wire   [0:0] icmp_ln194_fu_139_p2;
wire   [31:0] select_ln224_fu_176_p3;
reg   [31:0] select_ln224_reg_317;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln229_fu_184_p1;
reg   [63:0] zext_ln229_reg_323;
wire   [33:0] i_fu_192_p2;
reg   [33:0] i_reg_328;
wire   [31:0] loop_fu_202_p2;
reg   [31:0] loop_reg_336;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln231_fu_197_p2;
reg   [7:0] instance_state_addr_reg_346;
wire   [0:0] icmp_ln237_fu_252_p2;
reg   [0:0] icmp_ln237_reg_351;
wire   [63:0] p_2_rec_fu_279_p2;
wire    ap_CS_fsm_state6;
wire    grp_KeccakP1600_Permute_s_fu_103_ap_ready;
wire    grp_KeccakP1600_Permute_s_fu_103_ap_done;
reg    ap_block_state6_on_subcall_done;
wire    grp_KeccakP1600_Permute_s_fu_103_ap_start;
wire    grp_KeccakP1600_Permute_s_fu_103_ap_idle;
wire   [7:0] grp_KeccakP1600_Permute_s_fu_103_state_address0;
wire    grp_KeccakP1600_Permute_s_fu_103_state_ce0;
wire    grp_KeccakP1600_Permute_s_fu_103_state_we0;
wire   [7:0] grp_KeccakP1600_Permute_s_fu_103_state_d0;
reg   [63:0] p_01_rec_reg_80;
reg   [31:0] loop_1_reg_92;
wire    ap_CS_fsm_state5;
reg    grp_KeccakP1600_Permute_s_fu_103_ap_start_reg;
wire   [63:0] zext_ln232_4_fu_231_p1;
wire   [63:0] zext_ln149_fu_242_p1;
reg   [33:0] i_24_fu_34;
reg   [31:0] instance_byteIOIndex_fu_38;
wire   [31:0] add_ln236_fu_247_p2;
wire   [7:0] xor_ln149_fu_272_p2;
wire   [7:0] mul_ln212_fu_120_p0;
wire   [6:0] trunc_ln223_fu_145_p1;
wire   [31:0] zext_ln223_fu_155_p1;
wire   [31:0] add_ln224_fu_158_p2;
wire   [0:0] icmp_ln224_fu_164_p2;
wire   [31:0] partialBlock_14_fu_170_p2;
wire   [33:0] zext_ln229_9_fu_188_p1;
wire   [7:0] trunc_ln232_fu_208_p1;
wire   [7:0] trunc_ln194_fu_212_p1;
wire   [7:0] add_ln232_fu_216_p2;
wire   [14:0] zext_ln232_fu_222_p1;
wire   [14:0] add_ln232_14_fu_226_p2;
wire   [31:0] add_ln232_15_fu_236_p2;
reg   [5:0] ap_NS_fsm;
wire   [14:0] mul_ln212_fu_120_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_KeccakP1600_Permute_s_fu_103_ap_start_reg = 1'b0;
end

KeccakP1600_Permute_s grp_KeccakP1600_Permute_s_fu_103(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakP1600_Permute_s_fu_103_ap_start),
    .ap_done(grp_KeccakP1600_Permute_s_fu_103_ap_done),
    .ap_idle(grp_KeccakP1600_Permute_s_fu_103_ap_idle),
    .ap_ready(grp_KeccakP1600_Permute_s_fu_103_ap_ready),
    .state_address0(grp_KeccakP1600_Permute_s_fu_103_state_address0),
    .state_ce0(grp_KeccakP1600_Permute_s_fu_103_state_ce0),
    .state_we0(grp_KeccakP1600_Permute_s_fu_103_state_we0),
    .state_d0(grp_KeccakP1600_Permute_s_fu_103_state_d0),
    .state_q0(instance_state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln237_fu_252_p2 == 1'd1) & (icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakP1600_Permute_s_fu_103_ap_ready == 1'b1)) begin
            grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_24_fu_34 <= i_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_24_fu_34 <= 34'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln237_fu_252_p2 == 1'd1) & (icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        instance_byteIOIndex_fu_38 <= 32'd0;
    end else if (((icmp_ln237_fu_252_p2 == 1'd0) & (icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        instance_byteIOIndex_fu_38 <= add_ln236_fu_247_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        instance_byteIOIndex_fu_38 <= instance_byteIOIndex_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_1_reg_92 <= loop_reg_336;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_1_reg_92 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
        p_01_rec_reg_80 <= p_2_rec_fu_279_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_01_rec_reg_80 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_24_load_reg_304 <= i_24_fu_34;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_328 <= i_fu_192_p2;
        select_ln224_reg_317 <= select_ln224_fu_176_p3;
        zext_ln229_reg_323[31 : 0] <= zext_ln229_fu_184_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln237_reg_351 <= icmp_ln237_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        instance_state_addr_reg_346 <= zext_ln149_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        loop_reg_336 <= loop_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mul_ln212_reg_299 <= mul_ln212_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln194_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        partialBlock_reg_312 <= partialBlock_fu_149_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln194_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln194_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        instance_state_address0 = instance_state_addr_reg_346;
    end else if (((icmp_ln231_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        instance_state_address0 = zext_ln149_fu_242_p1;
    end else if (((icmp_ln237_reg_351 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        instance_state_address0 = grp_KeccakP1600_Permute_s_fu_103_state_address0;
    end else begin
        instance_state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln231_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        instance_state_ce0 = 1'b1;
    end else if (((icmp_ln237_reg_351 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        instance_state_ce0 = grp_KeccakP1600_Permute_s_fu_103_state_ce0;
    end else begin
        instance_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        instance_state_d0 = xor_ln149_fu_272_p2;
    end else if (((icmp_ln237_reg_351 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        instance_state_d0 = grp_KeccakP1600_Permute_s_fu_103_state_d0;
    end else begin
        instance_state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        instance_state_we0 = 1'b1;
    end else if (((icmp_ln237_reg_351 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        instance_state_we0 = grp_KeccakP1600_Permute_s_fu_103_state_we0;
    end else begin
        instance_state_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln194_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln231_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln224_fu_158_p2 = (zext_ln223_fu_155_p1 + instance_byteIOIndex_fu_38);

assign add_ln232_14_fu_226_p2 = (mul_ln212_reg_299 + zext_ln232_fu_222_p1);

assign add_ln232_15_fu_236_p2 = (loop_1_reg_92 + instance_byteIOIndex_fu_38);

assign add_ln232_fu_216_p2 = (trunc_ln232_fu_208_p1 + trunc_ln194_fu_212_p1);

assign add_ln236_fu_247_p2 = (instance_byteIOIndex_fu_38 + select_ln224_reg_317);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state6_on_subcall_done = ((icmp_ln237_reg_351 == 1'd1) & (grp_KeccakP1600_Permute_s_fu_103_ap_done == 1'b0));
end

assign ap_return = instance_byteIOIndex_fu_38;

assign data_address0 = zext_ln232_4_fu_231_p1;

assign grp_KeccakP1600_Permute_s_fu_103_ap_start = grp_KeccakP1600_Permute_s_fu_103_ap_start_reg;

assign i_fu_192_p2 = (zext_ln229_9_fu_188_p1 + i_24_load_reg_304);

assign icmp_ln194_fu_139_p2 = ((i_24_fu_34 < 34'd75) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_164_p2 = ((add_ln224_fu_158_p2 > 32'd168) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_197_p2 = ((loop_1_reg_92 == select_ln224_reg_317) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_252_p2 = ((add_ln236_fu_247_p2 == 32'd168) ? 1'b1 : 1'b0);

assign loop_fu_202_p2 = (loop_1_reg_92 + 32'd1);

assign mul_ln212_fu_120_p0 = mul_ln212_fu_120_p00;

assign mul_ln212_fu_120_p00 = data_offset;

assign mul_ln212_fu_120_p2 = (mul_ln212_fu_120_p0 * $signed('h4B));

assign p_2_rec_fu_279_p2 = (zext_ln229_reg_323 + p_01_rec_reg_80);

assign partialBlock_14_fu_170_p2 = (32'd168 - instance_byteIOIndex_fu_38);

assign partialBlock_fu_149_p2 = ($signed(7'd75) - $signed(trunc_ln223_fu_145_p1));

assign select_ln224_fu_176_p3 = ((icmp_ln224_fu_164_p2[0:0] === 1'b1) ? partialBlock_14_fu_170_p2 : zext_ln223_fu_155_p1);

assign trunc_ln194_fu_212_p1 = p_01_rec_reg_80[7:0];

assign trunc_ln223_fu_145_p1 = i_24_fu_34[6:0];

assign trunc_ln232_fu_208_p1 = loop_1_reg_92[7:0];

assign xor_ln149_fu_272_p2 = (instance_state_q0 ^ data_q0);

assign zext_ln149_fu_242_p1 = add_ln232_15_fu_236_p2;

assign zext_ln223_fu_155_p1 = partialBlock_reg_312;

assign zext_ln229_9_fu_188_p1 = select_ln224_fu_176_p3;

assign zext_ln229_fu_184_p1 = select_ln224_fu_176_p3;

assign zext_ln232_4_fu_231_p1 = add_ln232_14_fu_226_p2;

assign zext_ln232_fu_222_p1 = add_ln232_fu_216_p2;

always @ (posedge ap_clk) begin
    zext_ln229_reg_323[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //KeccakWidth1600_Spon_11
