// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module deserializeSignature (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_we0,
        sig_0_proofs_seed1_d0,
        sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_we0,
        sig_0_proofs_seed2_d0,
        sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_we0,
        sig_0_proofs_inputS_d0,
        sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_we0,
        sig_0_proofs_commun_d0,
        sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_we0,
        sig_0_proofs_view3C_d0,
        sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0,
        sig_0_challengeBits_we0,
        sig_0_challengeBits_d0,
        sig_0_challengeBits_q0,
        sig_0_salt_address0,
        sig_0_salt_ce0,
        sig_0_salt_we0,
        sig_0_salt_d0,
        sigBytes_address0,
        sigBytes_ce0,
        sigBytes_q0,
        sigBytes_address1,
        sigBytes_ce1,
        sigBytes_q1,
        sigBytes_offset,
        sigBytesLen,
        params_UnruhGWithout,
        params_transform_rea,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sig_0_proofs_seed1_address0;
output   sig_0_proofs_seed1_ce0;
output   sig_0_proofs_seed1_we0;
output  [7:0] sig_0_proofs_seed1_d0;
output  [11:0] sig_0_proofs_seed2_address0;
output   sig_0_proofs_seed2_ce0;
output   sig_0_proofs_seed2_we0;
output  [7:0] sig_0_proofs_seed2_d0;
output  [9:0] sig_0_proofs_inputS_address0;
output   sig_0_proofs_inputS_ce0;
output   sig_0_proofs_inputS_we0;
output  [31:0] sig_0_proofs_inputS_d0;
output  [14:0] sig_0_proofs_commun_address0;
output   sig_0_proofs_commun_ce0;
output   sig_0_proofs_commun_we0;
output  [7:0] sig_0_proofs_commun_d0;
output  [12:0] sig_0_proofs_view3C_address0;
output   sig_0_proofs_view3C_ce0;
output   sig_0_proofs_view3C_we0;
output  [7:0] sig_0_proofs_view3C_d0;
output  [5:0] sig_0_challengeBits_address0;
output   sig_0_challengeBits_ce0;
output   sig_0_challengeBits_we0;
output  [7:0] sig_0_challengeBits_d0;
input  [7:0] sig_0_challengeBits_q0;
output  [4:0] sig_0_salt_address0;
output   sig_0_salt_ce0;
output   sig_0_salt_we0;
output  [7:0] sig_0_salt_d0;
output  [15:0] sigBytes_address0;
output   sigBytes_ce0;
input  [7:0] sigBytes_q0;
output  [15:0] sigBytes_address1;
output   sigBytes_ce1;
input  [7:0] sigBytes_q1;
input  [63:0] sigBytes_offset;
input  [31:0] sigBytesLen;
input  [6:0] params_UnruhGWithout;
input  [1:0] params_transform_rea;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sig_0_proofs_seed1_ce0;
reg sig_0_proofs_seed1_we0;
reg sig_0_proofs_seed2_ce0;
reg sig_0_proofs_seed2_we0;
reg sig_0_proofs_inputS_ce0;
reg sig_0_proofs_inputS_we0;
reg sig_0_proofs_commun_ce0;
reg sig_0_proofs_commun_we0;
reg sig_0_proofs_view3C_ce0;
reg sig_0_proofs_view3C_we0;
reg[5:0] sig_0_challengeBits_address0;
reg sig_0_challengeBits_ce0;
reg sig_0_challengeBits_we0;
reg sig_0_salt_ce0;
reg sig_0_salt_we0;
reg[15:0] sigBytes_address0;
reg sigBytes_ce0;
reg[15:0] sigBytes_address1;
reg sigBytes_ce1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] sigBytesLen_cast1_fu_578_p1;
reg   [63:0] sigBytesLen_cast1_reg_1463;
wire   [16:0] trunc_ln54_fu_588_p1;
reg   [16:0] trunc_ln54_reg_1471;
wire   [0:0] icmp_ln1968_fu_582_p2;
wire   [7:0] i_10_fu_598_p2;
reg   [7:0] i_10_reg_1486;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln386_fu_604_p1;
reg   [1:0] trunc_ln386_reg_1491;
wire   [0:0] icmp_ln1940_fu_592_p2;
wire   [63:0] bytesExpected_fu_632_p2;
reg   [63:0] bytesExpected_reg_1501;
wire   [15:0] mul_ln1977_fu_641_p2;
reg   [15:0] mul_ln1977_reg_1507;
wire   [63:0] inputShareSize_2_fu_726_p3;
wire    ap_CS_fsm_state3;
wire   [5:0] loop_fu_763_p2;
reg   [5:0] loop_reg_1523;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln2039_fu_757_p2;
wire   [7:0] i_11_fu_794_p2;
reg   [7:0] i_11_reg_1536;
wire    ap_CS_fsm_state7;
wire   [1:0] trunc_ln386_4_fu_800_p1;
reg   [1:0] trunc_ln386_4_reg_1541;
wire   [0:0] icmp_ln1951_fu_788_p2;
wire   [5:0] loop_28_fu_886_p2;
reg   [5:0] loop_28_reg_1557;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln2048_fu_880_p2;
wire   [14:0] add_ln2052_fu_921_p2;
reg   [14:0] add_ln2052_reg_1567;
wire    ap_CS_fsm_state11;
wire   [12:0] zext_ln2058_fu_935_p1;
reg   [12:0] zext_ln2058_reg_1572;
wire   [13:0] zext_ln2052_fu_947_p1;
reg   [13:0] zext_ln2052_reg_1578;
wire   [7:0] i_fu_957_p2;
reg   [7:0] i_reg_1586;
wire   [0:0] icmp_ln2052_fu_951_p2;
wire   [2:0] zext_ln386_fu_1038_p1;
reg   [2:0] zext_ln386_reg_1596;
wire    ap_CS_fsm_state12;
wire   [16:0] add_ln2058_fu_1046_p2;
reg   [16:0] add_ln2058_reg_1601;
wire   [5:0] loop_29_fu_1057_p2;
reg   [5:0] loop_29_reg_1612;
wire    ap_CS_fsm_state13;
wire   [13:0] add_ln2058_3_fu_1067_p2;
reg   [13:0] add_ln2058_3_reg_1617;
wire   [0:0] icmp_ln2057_fu_1051_p2;
wire   [6:0] loop_30_fu_1106_p2;
reg   [6:0] loop_30_reg_1630;
wire    ap_CS_fsm_state15;
wire   [14:0] add_ln2071_fu_1116_p2;
reg   [14:0] add_ln2071_reg_1635;
wire   [0:0] icmp_ln2070_fu_1100_p2;
wire   [4:0] loop_31_fu_1156_p2;
reg   [4:0] loop_31_reg_1648;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln2075_fu_1150_p2;
wire   [4:0] loop_32_fu_1210_p2;
reg   [4:0] loop_32_reg_1661;
wire    ap_CS_fsm_state19;
wire   [12:0] add_ln2081_fu_1220_p2;
reg   [12:0] add_ln2081_reg_1666;
wire   [0:0] icmp_ln2080_fu_1204_p2;
wire   [15:0] add_ln2087_fu_1274_p2;
reg   [15:0] add_ln2087_reg_1679;
wire   [0:0] icmp_ln2084_fu_1268_p2;
wire    ap_CS_fsm_state21;
wire   [0:0] tmp_47_fu_1284_p3;
wire   [16:0] add_ln2087_6_fu_1367_p2;
reg   [16:0] add_ln2087_6_reg_1700;
wire   [16:0] add_ln2087_8_fu_1391_p2;
reg   [16:0] add_ln2087_8_reg_1705;
reg   [1:0] trunc_ln2087_4_reg_1710;
wire   [4:0] loop_33_fu_1406_p2;
reg   [4:0] loop_33_reg_1715;
reg   [7:0] sigBytes_load_6_reg_1720;
wire    ap_CS_fsm_state22;
reg   [7:0] sigBytes_load_7_reg_1725;
wire   [15:0] add_ln2088_fu_1447_p2;
wire    ap_CS_fsm_state24;
reg   [63:0] inputShareSize_reg_396;
reg   [7:0] round_assign_reg_408;
reg   [5:0] loop_0_reg_419;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1979_fu_752_p2;
reg   [7:0] round_assign_1_reg_431;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln1953_fu_874_p2;
reg   [5:0] loop_1_reg_442;
wire    ap_CS_fsm_state10;
reg   [15:0] p_01_rec_reg_454;
reg   [7:0] round_assign_2_reg_466;
reg   [14:0] phi_mul_reg_478;
reg   [5:0] loop_2_reg_490;
wire    ap_CS_fsm_state14;
reg   [6:0] loop_3_reg_501;
wire    ap_CS_fsm_state16;
reg   [4:0] loop_4_reg_512;
wire    ap_CS_fsm_state18;
reg   [4:0] loop_5_reg_524;
wire    ap_CS_fsm_state20;
reg   [4:0] loop_6_reg_535;
wire    ap_CS_fsm_state23;
reg   [7:0] p_sum5_pn_reg_546;
reg   [0:0] p_0_reg_559;
wire   [63:0] zext_ln54_13_fu_627_p1;
wire   [63:0] zext_ln2040_2_fu_778_p1;
wire   [63:0] zext_ln2040_fu_783_p1;
wire   [63:0] zext_ln54_12_fu_814_p1;
wire   [63:0] zext_ln2049_3_fu_911_p1;
wire   [63:0] zext_ln2049_fu_916_p1;
wire   [63:0] zext_ln54_14_fu_973_p1;
wire   [63:0] zext_ln2058_3_fu_1091_p1;
wire   [63:0] zext_ln2058_5_fu_1096_p1;
wire   [63:0] zext_ln2071_3_fu_1141_p1;
wire   [63:0] zext_ln2071_4_fu_1146_p1;
wire   [63:0] zext_ln2076_3_fu_1185_p1;
wire   [63:0] zext_ln2076_4_fu_1199_p1;
wire   [63:0] zext_ln2081_3_fu_1248_p1;
wire   [63:0] zext_ln2081_4_fu_1280_p1;
wire   [63:0] zext_ln2087_2_fu_1310_p1;
wire   [63:0] zext_ln2087_5_fu_1343_p1;
wire   [63:0] zext_ln2087_8_fu_1412_p1;
wire   [63:0] zext_ln2087_11_fu_1416_p1;
wire   [63:0] zext_ln2087_12_fu_1438_p1;
wire   [5:0] trunc_ln_fu_608_p4;
wire   [16:0] zext_ln54_fu_618_p1;
wire   [16:0] add_ln54_fu_622_p2;
wire   [6:0] mul_ln1977_fu_641_p1;
wire   [2:0] shl_ln_fu_647_p3;
wire   [2:0] xor_ln54_fu_654_p2;
wire   [7:0] zext_ln54_15_fu_660_p1;
wire   [7:0] lshr_ln54_fu_664_p2;
wire   [2:0] xor_ln54_2_fu_674_p2;
wire   [7:0] zext_ln54_16_fu_680_p1;
wire   [7:0] lshr_ln54_8_fu_684_p2;
wire   [0:0] trunc_ln386_3_fu_670_p1;
wire   [0:0] trunc_ln54_9_fu_690_p1;
wire   [1:0] challenge_fu_694_p3;
wire   [0:0] icmp_ln1942_fu_702_p2;
wire   [0:0] icmp_ln1942_1_fu_708_p2;
wire   [0:0] or_ln1942_fu_714_p2;
wire   [63:0] inputShareSize_1_fu_720_p2;
wire   [63:0] zext_ln1977_fu_737_p1;
wire   [0:0] trunc_ln1976_fu_734_p1;
wire   [63:0] bytesExpected_1_fu_740_p2;
wire   [63:0] bytesExpected_2_fu_745_p3;
wire   [16:0] zext_ln2040_1_fu_769_p1;
wire   [16:0] add_ln2040_fu_773_p2;
wire   [5:0] trunc_ln54_6_fu_804_p4;
wire   [2:0] bitNumber_assign_fu_819_p3;
wire   [2:0] xor_ln54_3_fu_826_p2;
wire   [7:0] zext_ln54_17_fu_832_p1;
wire   [7:0] lshr_ln54_9_fu_836_p2;
wire   [2:0] xor_ln54_4_fu_846_p2;
wire   [7:0] zext_ln54_18_fu_852_p1;
wire   [7:0] lshr_ln54_10_fu_856_p2;
wire   [0:0] trunc_ln386_5_fu_842_p1;
wire   [0:0] trunc_ln54_10_fu_862_p1;
wire   [1:0] challenge_1_fu_866_p3;
wire   [6:0] zext_ln2049_1_fu_892_p1;
wire   [6:0] add_ln2049_fu_896_p2;
wire   [16:0] zext_ln2049_2_fu_902_p1;
wire   [16:0] add_ln2049_1_fu_906_p2;
wire   [11:0] tmp_s_fu_927_p3;
wire   [12:0] tmp_21_fu_939_p3;
wire   [5:0] trunc_ln54_8_fu_963_p4;
wire   [1:0] trunc_ln386_6_fu_978_p1;
wire   [2:0] bitNumber_assign_3_fu_982_p3;
wire   [2:0] xor_ln54_5_fu_990_p2;
wire   [7:0] zext_ln54_19_fu_996_p1;
wire   [7:0] lshr_ln54_11_fu_1000_p2;
wire   [2:0] xor_ln54_6_fu_1010_p2;
wire   [7:0] zext_ln54_20_fu_1016_p1;
wire   [7:0] lshr_ln54_12_fu_1020_p2;
wire   [0:0] trunc_ln386_7_fu_1006_p1;
wire   [0:0] trunc_ln54_11_fu_1026_p1;
wire   [1:0] challenge_2_fu_1030_p3;
wire   [16:0] zext_ln2052_1_fu_1042_p1;
wire   [13:0] zext_ln2058_4_fu_1063_p1;
wire   [6:0] zext_ln2058_1_fu_1072_p1;
wire   [6:0] add_ln2058_2_fu_1076_p2;
wire   [16:0] zext_ln2058_2_fu_1082_p1;
wire   [16:0] add_ln2058_1_fu_1086_p2;
wire   [14:0] zext_ln2071_fu_1112_p1;
wire   [7:0] zext_ln2071_1_fu_1122_p1;
wire   [7:0] add_ln2071_1_fu_1126_p2;
wire   [16:0] zext_ln2071_2_fu_1132_p1;
wire   [16:0] add_ln2071_2_fu_1136_p2;
wire   [6:0] zext_ln2076_1_fu_1162_p1;
wire   [6:0] add_ln2076_1_fu_1166_p2;
wire  signed [7:0] sext_ln2076_fu_1172_p1;
wire   [16:0] zext_ln2076_2_fu_1176_p1;
wire   [16:0] add_ln2076_2_fu_1180_p2;
wire   [12:0] zext_ln2076_fu_1190_p1;
wire   [12:0] add_ln2076_fu_1194_p2;
wire   [12:0] zext_ln2081_fu_1216_p1;
wire   [6:0] zext_ln2081_1_fu_1225_p1;
wire   [6:0] add_ln2081_1_fu_1229_p2;
wire  signed [7:0] sext_ln2081_fu_1235_p1;
wire   [16:0] zext_ln2081_2_fu_1239_p1;
wire   [16:0] add_ln2081_2_fu_1243_p2;
wire   [2:0] add_ln2084_fu_1253_p2;
wire   [1:0] tmp_fu_1258_p4;
wire   [15:0] zext_ln2087_fu_1292_p1;
wire   [15:0] add_ln2087_1_fu_1296_p2;
wire   [16:0] zext_ln2087_1_fu_1301_p1;
wire   [16:0] add_ln2087_2_fu_1305_p2;
wire   [3:0] trunc_ln2086_fu_1315_p1;
wire   [3:0] or_ln2087_fu_1319_p2;
wire   [15:0] zext_ln2087_3_fu_1325_p1;
wire   [15:0] add_ln2087_3_fu_1329_p2;
wire   [16:0] zext_ln2087_4_fu_1334_p1;
wire   [16:0] add_ln2087_4_fu_1338_p2;
wire   [3:0] or_ln2087_1_fu_1348_p2;
wire   [15:0] zext_ln2087_6_fu_1354_p1;
wire   [15:0] add_ln2087_5_fu_1358_p2;
wire   [16:0] zext_ln2087_7_fu_1363_p1;
wire   [3:0] or_ln2087_2_fu_1372_p2;
wire   [15:0] zext_ln2087_9_fu_1378_p1;
wire   [15:0] add_ln2087_7_fu_1382_p2;
wire   [16:0] zext_ln2087_10_fu_1387_p1;
wire   [9:0] tmp_22_fu_1431_p3;
wire   [15:0] zext_ln2088_fu_1443_p1;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state25;
reg   [24:0] ap_NS_fsm;
wire   [15:0] mul_ln1977_fu_641_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_return_preg <= p_0_reg_559;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd0))) begin
        inputShareSize_reg_396 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inputShareSize_reg_396 <= inputShareSize_2_fu_726_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_752_p2 == 1'd0))) begin
        loop_0_reg_419 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        loop_0_reg_419 <= loop_reg_1523;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_788_p2 == 1'd0))) begin
        loop_1_reg_442 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_1_reg_442 <= loop_28_reg_1557;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_2_reg_490 <= loop_29_reg_1612;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_2_reg_490 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln2057_fu_1051_p2 == 1'd1))) begin
        loop_3_reg_501 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        loop_3_reg_501 <= loop_30_reg_1630;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln2070_fu_1100_p2 == 1'd1))) begin
        loop_4_reg_512 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        loop_4_reg_512 <= loop_31_reg_1648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln2075_fu_1150_p2 == 1'd1))) begin
        loop_5_reg_524 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_5_reg_524 <= loop_32_reg_1661;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2084_fu_1268_p2 == 1'd1) & (icmp_ln2080_fu_1204_p2 == 1'd1))) begin
        loop_6_reg_535 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        loop_6_reg_535 <= loop_33_reg_1715;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2048_fu_880_p2 == 1'd1))) begin
        p_01_rec_reg_454 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        p_01_rec_reg_454 <= add_ln2088_fu_1447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln2052_fu_951_p2 == 1'd1))) begin
        p_0_reg_559 <= 1'd0;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_874_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_752_p2 == 1'd1)))) begin
        p_0_reg_559 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (tmp_47_fu_1284_p3 == 1'd1))) begin
                p_sum5_pn_reg_546[4] <= 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2080_fu_1204_p2 == 1'd1) & (icmp_ln2084_fu_1268_p2 == 1'd0))) begin
                p_sum5_pn_reg_546[4] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2048_fu_880_p2 == 1'd1))) begin
        phi_mul_reg_478 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        phi_mul_reg_478 <= add_ln2052_reg_1567;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln2039_fu_757_p2 == 1'd1))) begin
        round_assign_1_reg_431 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_874_p2 == 1'd0))) begin
        round_assign_1_reg_431 <= i_11_reg_1536;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2048_fu_880_p2 == 1'd1))) begin
        round_assign_2_reg_466 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        round_assign_2_reg_466 <= i_reg_1586;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd0))) begin
        round_assign_reg_408 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        round_assign_reg_408 <= i_10_reg_1486;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln2052_reg_1567 <= add_ln2052_fu_921_p2;
        i_reg_1586 <= i_fu_957_p2;
        zext_ln2052_reg_1578[12 : 5] <= zext_ln2052_fu_947_p1[12 : 5];
        zext_ln2058_reg_1572[11 : 4] <= zext_ln2058_fu_935_p1[11 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln2057_fu_1051_p2 == 1'd0))) begin
        add_ln2058_3_reg_1617 <= add_ln2058_3_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln2058_reg_1601 <= add_ln2058_fu_1046_p2;
        zext_ln386_reg_1596[1 : 0] <= zext_ln386_fu_1038_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln2070_fu_1100_p2 == 1'd0))) begin
        add_ln2071_reg_1635 <= add_ln2071_fu_1116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2080_fu_1204_p2 == 1'd0))) begin
        add_ln2081_reg_1666 <= add_ln2081_fu_1220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (tmp_47_fu_1284_p3 == 1'd0))) begin
        add_ln2087_6_reg_1700 <= add_ln2087_6_fu_1367_p2;
        add_ln2087_8_reg_1705 <= add_ln2087_8_fu_1391_p2;
        loop_33_reg_1715 <= loop_33_fu_1406_p2;
        trunc_ln2087_4_reg_1710 <= {{loop_6_reg_535[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2084_fu_1268_p2 == 1'd1) & (icmp_ln2080_fu_1204_p2 == 1'd1))) begin
        add_ln2087_reg_1679 <= add_ln2087_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_592_p2 == 1'd1))) begin
        bytesExpected_reg_1501 <= bytesExpected_fu_632_p2;
        mul_ln1977_reg_1507 <= mul_ln1977_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_1486 <= i_10_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_11_reg_1536 <= i_11_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_28_reg_1557 <= loop_28_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        loop_29_reg_1612 <= loop_29_fu_1057_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        loop_30_reg_1630 <= loop_30_fu_1106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        loop_31_reg_1648 <= loop_31_fu_1156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        loop_32_reg_1661 <= loop_32_fu_1210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_reg_1523 <= loop_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sigBytesLen_cast1_reg_1463[31 : 0] <= sigBytesLen_cast1_fu_578_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sigBytes_load_6_reg_1720 <= sigBytes_q0;
        sigBytes_load_7_reg_1725 <= sigBytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_788_p2 == 1'd1))) begin
        trunc_ln386_4_reg_1541 <= trunc_ln386_4_fu_800_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_592_p2 == 1'd0))) begin
        trunc_ln386_reg_1491 <= trunc_ln386_fu_604_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd0))) begin
        trunc_ln54_reg_1471 <= trunc_ln54_fu_588_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_return = p_0_reg_559;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sigBytes_address0 = zext_ln2087_11_fu_1416_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sigBytes_address0 = zext_ln2087_2_fu_1310_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sigBytes_address0 = zext_ln2081_3_fu_1248_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sigBytes_address0 = zext_ln2076_3_fu_1185_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sigBytes_address0 = zext_ln2071_3_fu_1141_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sigBytes_address0 = zext_ln2058_3_fu_1091_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sigBytes_address0 = zext_ln2049_3_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sigBytes_address0 = zext_ln2040_2_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sigBytes_address0 = zext_ln54_13_fu_627_p1;
    end else begin
        sigBytes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sigBytes_address1 = zext_ln2087_8_fu_1412_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        sigBytes_address1 = zext_ln2087_5_fu_1343_p1;
    end else begin
        sigBytes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        sigBytes_ce0 = 1'b1;
    end else begin
        sigBytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        sigBytes_ce1 = 1'b1;
    end else begin
        sigBytes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sig_0_challengeBits_address0 = zext_ln54_14_fu_973_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sig_0_challengeBits_address0 = zext_ln54_12_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sig_0_challengeBits_address0 = zext_ln2040_fu_783_p1;
    end else begin
        sig_0_challengeBits_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        sig_0_challengeBits_ce0 = 1'b1;
    end else begin
        sig_0_challengeBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sig_0_challengeBits_we0 = 1'b1;
    end else begin
        sig_0_challengeBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sig_0_proofs_commun_ce0 = 1'b1;
    end else begin
        sig_0_proofs_commun_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sig_0_proofs_commun_we0 = 1'b1;
    end else begin
        sig_0_proofs_commun_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        sig_0_proofs_inputS_ce0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        sig_0_proofs_inputS_we0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sig_0_proofs_seed1_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sig_0_proofs_seed1_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sig_0_proofs_seed2_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sig_0_proofs_seed2_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sig_0_proofs_view3C_ce0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sig_0_proofs_view3C_we0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sig_0_salt_ce0 = 1'b1;
    end else begin
        sig_0_salt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sig_0_salt_we0 = 1'b1;
    end else begin
        sig_0_salt_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_582_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_592_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_752_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln2039_fu_757_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_788_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_874_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2048_fu_880_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln2052_fu_951_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln2057_fu_1051_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln2070_fu_1100_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln2075_fu_1150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2084_fu_1268_p2 == 1'd1) & (icmp_ln2080_fu_1204_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2080_fu_1204_p2 == 1'd1) & (icmp_ln2084_fu_1268_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (tmp_47_fu_1284_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2040_fu_773_p2 = (zext_ln2040_1_fu_769_p1 + trunc_ln54_reg_1471);

assign add_ln2049_1_fu_906_p2 = (zext_ln2049_2_fu_902_p1 + trunc_ln54_reg_1471);

assign add_ln2049_fu_896_p2 = (zext_ln2049_1_fu_892_p1 + 7'd55);

assign add_ln2052_fu_921_p2 = (phi_mul_reg_478 + 15'd75);

assign add_ln2058_1_fu_1086_p2 = (add_ln2058_reg_1601 + zext_ln2058_2_fu_1082_p1);

assign add_ln2058_2_fu_1076_p2 = ($signed(zext_ln2058_1_fu_1072_p1) + $signed(7'd87));

assign add_ln2058_3_fu_1067_p2 = (zext_ln2052_reg_1578 + zext_ln2058_4_fu_1063_p1);

assign add_ln2058_fu_1046_p2 = (trunc_ln54_reg_1471 + zext_ln2052_1_fu_1042_p1);

assign add_ln2071_1_fu_1126_p2 = (zext_ln2071_1_fu_1122_p1 + 8'd119);

assign add_ln2071_2_fu_1136_p2 = (add_ln2058_reg_1601 + zext_ln2071_2_fu_1132_p1);

assign add_ln2071_fu_1116_p2 = (phi_mul_reg_478 + zext_ln2071_fu_1112_p1);

assign add_ln2076_1_fu_1166_p2 = ($signed(zext_ln2076_1_fu_1162_p1) + $signed(7'd66));

assign add_ln2076_2_fu_1180_p2 = (add_ln2058_reg_1601 + zext_ln2076_2_fu_1176_p1);

assign add_ln2076_fu_1194_p2 = (zext_ln2058_reg_1572 + zext_ln2076_fu_1190_p1);

assign add_ln2081_1_fu_1229_p2 = ($signed(zext_ln2081_1_fu_1225_p1) + $signed(7'd82));

assign add_ln2081_2_fu_1243_p2 = (add_ln2058_reg_1601 + zext_ln2081_2_fu_1239_p1);

assign add_ln2081_fu_1220_p2 = (zext_ln2058_reg_1572 + zext_ln2081_fu_1216_p1);

assign add_ln2084_fu_1253_p2 = ($signed(zext_ln386_reg_1596) + $signed(3'd7));

assign add_ln2087_1_fu_1296_p2 = (zext_ln2087_fu_1292_p1 + add_ln2087_reg_1679);

assign add_ln2087_2_fu_1305_p2 = (trunc_ln54_reg_1471 + zext_ln2087_1_fu_1301_p1);

assign add_ln2087_3_fu_1329_p2 = (zext_ln2087_3_fu_1325_p1 + add_ln2087_reg_1679);

assign add_ln2087_4_fu_1338_p2 = (trunc_ln54_reg_1471 + zext_ln2087_4_fu_1334_p1);

assign add_ln2087_5_fu_1358_p2 = (zext_ln2087_6_fu_1354_p1 + add_ln2087_reg_1679);

assign add_ln2087_6_fu_1367_p2 = (trunc_ln54_reg_1471 + zext_ln2087_7_fu_1363_p1);

assign add_ln2087_7_fu_1382_p2 = (zext_ln2087_9_fu_1378_p1 + add_ln2087_reg_1679);

assign add_ln2087_8_fu_1391_p2 = (trunc_ln54_reg_1471 + zext_ln2087_10_fu_1387_p1);

assign add_ln2087_fu_1274_p2 = (p_01_rec_reg_454 + 16'd226);

assign add_ln2088_fu_1447_p2 = (zext_ln2088_fu_1443_p1 + p_01_rec_reg_454);

assign add_ln54_fu_622_p2 = (trunc_ln54_reg_1471 + zext_ln54_fu_618_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitNumber_assign_3_fu_982_p3 = {{trunc_ln386_6_fu_978_p1}, {1'd0}};

assign bitNumber_assign_fu_819_p3 = {{trunc_ln386_4_reg_1541}, {1'd0}};

assign bytesExpected_1_fu_740_p2 = (bytesExpected_reg_1501 + zext_ln1977_fu_737_p1);

assign bytesExpected_2_fu_745_p3 = ((trunc_ln1976_fu_734_p1[0:0] === 1'b1) ? bytesExpected_1_fu_740_p2 : bytesExpected_reg_1501);

assign bytesExpected_fu_632_p2 = (64'd30528 + inputShareSize_reg_396);

assign challenge_1_fu_866_p3 = {{trunc_ln386_5_fu_842_p1}, {trunc_ln54_10_fu_862_p1}};

assign challenge_2_fu_1030_p3 = {{trunc_ln386_7_fu_1006_p1}, {trunc_ln54_11_fu_1026_p1}};

assign challenge_fu_694_p3 = {{trunc_ln386_3_fu_670_p1}, {trunc_ln54_9_fu_690_p1}};

assign i_10_fu_598_p2 = (round_assign_reg_408 + 8'd1);

assign i_11_fu_794_p2 = (round_assign_1_reg_431 + 8'd1);

assign i_fu_957_p2 = (round_assign_2_reg_466 + 8'd1);

assign icmp_ln1940_fu_592_p2 = ((round_assign_reg_408 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1942_1_fu_708_p2 = ((challenge_fu_694_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1942_fu_702_p2 = ((challenge_fu_694_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln1951_fu_788_p2 = ((round_assign_1_reg_431 < 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1953_fu_874_p2 = ((challenge_1_fu_866_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1968_fu_582_p2 = ((sigBytesLen < 32'd55) ? 1'b1 : 1'b0);

assign icmp_ln1979_fu_752_p2 = ((bytesExpected_2_fu_745_p3 > sigBytesLen_cast1_reg_1463) ? 1'b1 : 1'b0);

assign icmp_ln2039_fu_757_p2 = ((loop_0_reg_419 == 6'd55) ? 1'b1 : 1'b0);

assign icmp_ln2048_fu_880_p2 = ((loop_1_reg_442 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2052_fu_951_p2 = ((round_assign_2_reg_466 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln2057_fu_1051_p2 = ((loop_2_reg_490 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2070_fu_1100_p2 = ((loop_3_reg_501 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln2075_fu_1150_p2 = ((loop_4_reg_512 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2080_fu_1204_p2 = ((loop_5_reg_524 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2084_fu_1268_p2 = ((tmp_fu_1258_p4 == 2'd0) ? 1'b1 : 1'b0);

assign inputShareSize_1_fu_720_p2 = (64'd16 + inputShareSize_reg_396);

assign inputShareSize_2_fu_726_p3 = ((or_ln1942_fu_714_p2[0:0] === 1'b1) ? inputShareSize_1_fu_720_p2 : inputShareSize_reg_396);

assign loop_28_fu_886_p2 = (loop_1_reg_442 + 6'd1);

assign loop_29_fu_1057_p2 = (loop_2_reg_490 + 6'd1);

assign loop_30_fu_1106_p2 = (loop_3_reg_501 + 7'd1);

assign loop_31_fu_1156_p2 = (loop_4_reg_512 + 5'd1);

assign loop_32_fu_1210_p2 = (loop_5_reg_524 + 5'd1);

assign loop_33_fu_1406_p2 = (5'd4 + loop_6_reg_535);

assign loop_fu_763_p2 = (loop_0_reg_419 + 6'd1);

assign lshr_ln54_10_fu_856_p2 = sig_0_challengeBits_q0 >> zext_ln54_18_fu_852_p1;

assign lshr_ln54_11_fu_1000_p2 = sig_0_challengeBits_q0 >> zext_ln54_19_fu_996_p1;

assign lshr_ln54_12_fu_1020_p2 = sig_0_challengeBits_q0 >> zext_ln54_20_fu_1016_p1;

assign lshr_ln54_8_fu_684_p2 = sigBytes_q0 >> zext_ln54_16_fu_680_p1;

assign lshr_ln54_9_fu_836_p2 = sig_0_challengeBits_q0 >> zext_ln54_17_fu_832_p1;

assign lshr_ln54_fu_664_p2 = sigBytes_q0 >> zext_ln54_15_fu_660_p1;

assign mul_ln1977_fu_641_p1 = mul_ln1977_fu_641_p10;

assign mul_ln1977_fu_641_p10 = params_UnruhGWithout;

assign mul_ln1977_fu_641_p2 = (16'd219 * mul_ln1977_fu_641_p1);

assign or_ln1942_fu_714_p2 = (icmp_ln1942_fu_702_p2 | icmp_ln1942_1_fu_708_p2);

assign or_ln2087_1_fu_1348_p2 = (trunc_ln2086_fu_1315_p1 | 4'd2);

assign or_ln2087_2_fu_1372_p2 = (trunc_ln2086_fu_1315_p1 | 4'd3);

assign or_ln2087_fu_1319_p2 = (trunc_ln2086_fu_1315_p1 | 4'd1);

assign sext_ln2076_fu_1172_p1 = $signed(add_ln2076_1_fu_1166_p2);

assign sext_ln2081_fu_1235_p1 = $signed(add_ln2081_1_fu_1229_p2);

assign shl_ln_fu_647_p3 = {{trunc_ln386_reg_1491}, {1'd0}};

assign sigBytesLen_cast1_fu_578_p1 = sigBytesLen;

assign sig_0_challengeBits_d0 = sigBytes_q0;

assign sig_0_proofs_commun_address0 = zext_ln2071_4_fu_1146_p1;

assign sig_0_proofs_commun_d0 = sigBytes_q0;

assign sig_0_proofs_inputS_address0 = zext_ln2087_12_fu_1438_p1;

assign sig_0_proofs_inputS_d0 = {{{{sigBytes_q0}, {sigBytes_q1}}, {sigBytes_load_7_reg_1725}}, {sigBytes_load_6_reg_1720}};

assign sig_0_proofs_seed1_address0 = zext_ln2076_4_fu_1199_p1;

assign sig_0_proofs_seed1_d0 = sigBytes_q0;

assign sig_0_proofs_seed2_address0 = zext_ln2081_4_fu_1280_p1;

assign sig_0_proofs_seed2_d0 = sigBytes_q0;

assign sig_0_proofs_view3C_address0 = zext_ln2058_5_fu_1096_p1;

assign sig_0_proofs_view3C_d0 = sigBytes_q0;

assign sig_0_salt_address0 = zext_ln2049_fu_916_p1;

assign sig_0_salt_d0 = sigBytes_q0;

assign tmp_21_fu_939_p3 = {{round_assign_2_reg_466}, {5'd0}};

assign tmp_22_fu_1431_p3 = {{round_assign_2_reg_466}, {trunc_ln2087_4_reg_1710}};

assign tmp_47_fu_1284_p3 = loop_6_reg_535[32'd4];

assign tmp_fu_1258_p4 = {{add_ln2084_fu_1253_p2[2:1]}};

assign tmp_s_fu_927_p3 = {{round_assign_2_reg_466}, {4'd0}};

assign trunc_ln1976_fu_734_p1 = params_transform_rea[0:0];

assign trunc_ln2086_fu_1315_p1 = loop_6_reg_535[3:0];

assign trunc_ln386_3_fu_670_p1 = lshr_ln54_fu_664_p2[0:0];

assign trunc_ln386_4_fu_800_p1 = round_assign_1_reg_431[1:0];

assign trunc_ln386_5_fu_842_p1 = lshr_ln54_9_fu_836_p2[0:0];

assign trunc_ln386_6_fu_978_p1 = round_assign_2_reg_466[1:0];

assign trunc_ln386_7_fu_1006_p1 = lshr_ln54_11_fu_1000_p2[0:0];

assign trunc_ln386_fu_604_p1 = round_assign_reg_408[1:0];

assign trunc_ln54_10_fu_862_p1 = lshr_ln54_10_fu_856_p2[0:0];

assign trunc_ln54_11_fu_1026_p1 = lshr_ln54_12_fu_1020_p2[0:0];

assign trunc_ln54_6_fu_804_p4 = {{round_assign_1_reg_431[7:2]}};

assign trunc_ln54_8_fu_963_p4 = {{round_assign_2_reg_466[7:2]}};

assign trunc_ln54_9_fu_690_p1 = lshr_ln54_8_fu_684_p2[0:0];

assign trunc_ln54_fu_588_p1 = sigBytes_offset[16:0];

assign trunc_ln_fu_608_p4 = {{round_assign_reg_408[7:2]}};

assign xor_ln54_2_fu_674_p2 = (shl_ln_fu_647_p3 ^ 3'd7);

assign xor_ln54_3_fu_826_p2 = (bitNumber_assign_fu_819_p3 ^ 3'd6);

assign xor_ln54_4_fu_846_p2 = (bitNumber_assign_fu_819_p3 ^ 3'd7);

assign xor_ln54_5_fu_990_p2 = (bitNumber_assign_3_fu_982_p3 ^ 3'd6);

assign xor_ln54_6_fu_1010_p2 = (bitNumber_assign_3_fu_982_p3 ^ 3'd7);

assign xor_ln54_fu_654_p2 = (shl_ln_fu_647_p3 ^ 3'd6);

assign zext_ln1977_fu_737_p1 = mul_ln1977_reg_1507;

assign zext_ln2040_1_fu_769_p1 = loop_0_reg_419;

assign zext_ln2040_2_fu_778_p1 = add_ln2040_fu_773_p2;

assign zext_ln2040_fu_783_p1 = loop_0_reg_419;

assign zext_ln2049_1_fu_892_p1 = loop_1_reg_442;

assign zext_ln2049_2_fu_902_p1 = add_ln2049_fu_896_p2;

assign zext_ln2049_3_fu_911_p1 = add_ln2049_1_fu_906_p2;

assign zext_ln2049_fu_916_p1 = loop_1_reg_442;

assign zext_ln2052_1_fu_1042_p1 = p_01_rec_reg_454;

assign zext_ln2052_fu_947_p1 = tmp_21_fu_939_p3;

assign zext_ln2058_1_fu_1072_p1 = loop_2_reg_490;

assign zext_ln2058_2_fu_1082_p1 = add_ln2058_2_fu_1076_p2;

assign zext_ln2058_3_fu_1091_p1 = add_ln2058_1_fu_1086_p2;

assign zext_ln2058_4_fu_1063_p1 = loop_2_reg_490;

assign zext_ln2058_5_fu_1096_p1 = add_ln2058_3_reg_1617;

assign zext_ln2058_fu_935_p1 = tmp_s_fu_927_p3;

assign zext_ln2071_1_fu_1122_p1 = loop_3_reg_501;

assign zext_ln2071_2_fu_1132_p1 = add_ln2071_1_fu_1126_p2;

assign zext_ln2071_3_fu_1141_p1 = add_ln2071_2_fu_1136_p2;

assign zext_ln2071_4_fu_1146_p1 = add_ln2071_reg_1635;

assign zext_ln2071_fu_1112_p1 = loop_3_reg_501;

assign zext_ln2076_1_fu_1162_p1 = loop_4_reg_512;

assign zext_ln2076_2_fu_1176_p1 = $unsigned(sext_ln2076_fu_1172_p1);

assign zext_ln2076_3_fu_1185_p1 = add_ln2076_2_fu_1180_p2;

assign zext_ln2076_4_fu_1199_p1 = add_ln2076_fu_1194_p2;

assign zext_ln2076_fu_1190_p1 = loop_4_reg_512;

assign zext_ln2081_1_fu_1225_p1 = loop_5_reg_524;

assign zext_ln2081_2_fu_1239_p1 = $unsigned(sext_ln2081_fu_1235_p1);

assign zext_ln2081_3_fu_1248_p1 = add_ln2081_2_fu_1243_p2;

assign zext_ln2081_4_fu_1280_p1 = add_ln2081_reg_1666;

assign zext_ln2081_fu_1216_p1 = loop_5_reg_524;

assign zext_ln2087_10_fu_1387_p1 = add_ln2087_7_fu_1382_p2;

assign zext_ln2087_11_fu_1416_p1 = add_ln2087_8_reg_1705;

assign zext_ln2087_12_fu_1438_p1 = tmp_22_fu_1431_p3;

assign zext_ln2087_1_fu_1301_p1 = add_ln2087_1_fu_1296_p2;

assign zext_ln2087_2_fu_1310_p1 = add_ln2087_2_fu_1305_p2;

assign zext_ln2087_3_fu_1325_p1 = or_ln2087_fu_1319_p2;

assign zext_ln2087_4_fu_1334_p1 = add_ln2087_3_fu_1329_p2;

assign zext_ln2087_5_fu_1343_p1 = add_ln2087_4_fu_1338_p2;

assign zext_ln2087_6_fu_1354_p1 = or_ln2087_1_fu_1348_p2;

assign zext_ln2087_7_fu_1363_p1 = add_ln2087_5_fu_1358_p2;

assign zext_ln2087_8_fu_1412_p1 = add_ln2087_6_reg_1700;

assign zext_ln2087_9_fu_1378_p1 = or_ln2087_2_fu_1372_p2;

assign zext_ln2087_fu_1292_p1 = loop_6_reg_535;

assign zext_ln2088_fu_1443_p1 = p_sum5_pn_reg_546;

assign zext_ln386_fu_1038_p1 = challenge_2_fu_1030_p3;

assign zext_ln54_12_fu_814_p1 = trunc_ln54_6_fu_804_p4;

assign zext_ln54_13_fu_627_p1 = add_ln54_fu_622_p2;

assign zext_ln54_14_fu_973_p1 = trunc_ln54_8_fu_963_p4;

assign zext_ln54_15_fu_660_p1 = xor_ln54_fu_654_p2;

assign zext_ln54_16_fu_680_p1 = xor_ln54_2_fu_674_p2;

assign zext_ln54_17_fu_832_p1 = xor_ln54_3_fu_826_p2;

assign zext_ln54_18_fu_852_p1 = xor_ln54_4_fu_846_p2;

assign zext_ln54_19_fu_996_p1 = xor_ln54_5_fu_990_p2;

assign zext_ln54_20_fu_1016_p1 = xor_ln54_6_fu_1010_p2;

assign zext_ln54_fu_618_p1 = trunc_ln_fu_608_p4;

always @ (posedge ap_clk) begin
    sigBytesLen_cast1_reg_1463[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln2058_reg_1572[3:0] <= 4'b0000;
    zext_ln2058_reg_1572[12] <= 1'b0;
    zext_ln2052_reg_1578[4:0] <= 5'b00000;
    zext_ln2052_reg_1578[13] <= 1'b0;
    zext_ln386_reg_1596[2] <= 1'b0;
    p_sum5_pn_reg_546[3:0] <= 4'b1011;
    p_sum5_pn_reg_546[7:5] <= 3'b100;
end

endmodule //deserializeSignature
