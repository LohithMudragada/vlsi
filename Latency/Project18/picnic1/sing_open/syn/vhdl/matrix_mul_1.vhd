-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of matrix_mul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix2_ce0 : STD_LOGIC;
    signal temp_matrix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln127_fu_275_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln127_reg_928 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln124_fu_279_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln124_reg_934 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_299_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_947 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln124_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_317_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_955 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln125_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln85_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_379_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_983 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_reg_988 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_addr_4_reg_994 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_6_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal start_pos_fu_622_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal start_pos_reg_1004 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_ln66_9_fu_630_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_9_reg_1010 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln66_reg_1016 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_fu_894_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_reg_1024 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln133_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln134_fu_909_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln134_reg_1034 : STD_LOGIC_VECTOR (3 downto 0);
    signal prod_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitNumber_assign_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_0_reg_227 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_0_i_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_249 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_0_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln127_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_3_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_2_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln66_17_fu_881_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln126_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln125_fu_307_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln126_fu_323_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_1_fu_332_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln127_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln126_fu_328_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln127_1_fu_346_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize_fu_395_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_fu_416_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln93_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1_fu_462_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln93_3_fu_446_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln93_1_fu_442_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln94_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln2_fu_506_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln94_1_fu_490_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln94_fu_484_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln95_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln95_1_fu_534_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln95_fu_528_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_5_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_556_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln95_2_fu_550_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_6_fu_574_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln93_fu_430_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_2_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_3_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_4_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_37_fu_637_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_38_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln66_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln66_9_fu_667_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_645_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln66_17_fu_661_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_fu_673_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_27_fu_689_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln66_10_fu_697_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_26_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_39_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_40_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_10_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln66_17_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln66_fu_733_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln66_1_fu_738_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln98_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_fu_729_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_3_fu_748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln66_fu_760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_7_fu_754_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln66_41_fu_772_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_42_fu_775_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln66_18_fu_781_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_28_fu_787_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_30_fu_803_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_29_fu_795_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln66_19_fu_811_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_43_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_44_fu_817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln66_15_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_835_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_45_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_46_fu_825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln66_16_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_11_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_31_fu_845_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln66_18_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_47_fu_878_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln134_1_fu_905_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component matrix_mul_1_tempibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_matrix2_U : component matrix_mul_1_tempibs
    generic map (
        DataWidth => 32,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix2_address0,
        ce0 => temp_matrix2_ce0,
        q0 => temp_matrix2_q0);

    prod_U : component matrix_mul_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prod_address0,
        ce0 => prod_ce0,
        we0 => prod_we0,
        d0 => prod_d0,
        q0 => prod_q0);

    temp_U : component matrix_mul_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bitNumber_assign_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                bitNumber_assign_reg_215 <= i_reg_942;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bitNumber_assign_reg_215 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_249 <= i_8_reg_983;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_249 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_227 <= j_reg_955;
            elsif (((icmp_ln124_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_227 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_reg_260 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_0_reg_260 <= loop_reg_1024;
            end if; 
        end if;
    end process;

    x_0_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_0_i_reg_239 <= x_6_fu_410_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_0_i_reg_239 <= prod_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_fu_888_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln134_reg_1034 <= add_ln134_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i_8_reg_983 <= i_8_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_942 <= i_fu_289_p2;
                trunc_ln124_reg_934 <= trunc_ln124_fu_279_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_955 <= j_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                loop_reg_1024 <= loop_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    or_ln66_9_reg_1010(4 downto 3) <= or_ln66_9_fu_630_p2(4 downto 3);
                or_ln66_reg_1016 <= or_ln66_fu_766_p2;
                    start_pos_reg_1004(4 downto 3) <= start_pos_fu_622_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_947(8 downto 2) <= shl_ln_fu_299_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    temp_addr_4_reg_994(2 downto 0) <= zext_ln66_fu_405_p1(6 - 1 downto 0)(2 downto 0);
                tmp_36_reg_988 <= bitNumber_assign_reg_215(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln127_reg_928 <= trunc_ln127_fu_275_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_947(1 downto 0) <= "00";
    temp_addr_4_reg_994(5 downto 3) <= "000";
    start_pos_reg_1004(2 downto 0) <= "000";
    or_ln66_9_reg_1010(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln124_fu_283_p2, ap_CS_fsm_state3, icmp_ln125_fu_311_p2, ap_CS_fsm_state6, icmp_ln85_fu_373_p2, ap_CS_fsm_state10, icmp_ln133_fu_888_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln124_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln125_fu_311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln85_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln133_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln126_fu_323_p2 <= std_logic_vector(unsigned(shl_ln_reg_947) + unsigned(zext_ln125_fu_307_p1));
    add_ln127_1_fu_346_p2 <= std_logic_vector(unsigned(zext_ln126_fu_328_p1) + unsigned(matrix_offset));
    add_ln127_fu_336_p2 <= std_logic_vector(unsigned(zext_ln127_1_fu_332_p1) + unsigned(trunc_ln127_reg_928));
    add_ln134_fu_909_p2 <= std_logic_vector(unsigned(zext_ln134_1_fu_905_p1) + unsigned(trunc_ln127_reg_928));
    adjSize_fu_395_p4 <= bitNumber_assign_reg_215(7 downto 5);
    and_ln66_17_fu_723_p2 <= (lshr_ln66_fu_711_p2 and lshr_ln66_10_fu_717_p2);
    and_ln66_18_fu_865_p2 <= (shl_ln66_16_fu_853_p2 and lshr_ln66_11_fu_859_p2);
    and_ln66_fu_760_p2 <= (xor_ln66_3_fu_748_p2 and trunc_ln66_fu_729_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln133_fu_888_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln133_fu_888_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln133_fu_888_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln133_fu_888_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_271_p0_assign_proc : process(start_pos_fu_622_p3, start_pos_reg_1004, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_271_p0 <= start_pos_reg_1004;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_271_p0 <= start_pos_fu_622_p3;
        else 
            grp_fu_271_p0 <= "XXXXX";
        end if; 
    end process;


    grp_fu_271_p1_assign_proc : process(ap_CS_fsm_state8, or_ln66_9_fu_630_p2, or_ln66_9_reg_1010, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_271_p1 <= or_ln66_9_reg_1010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_271_p1 <= or_ln66_9_fu_630_p2;
        else 
            grp_fu_271_p1 <= "XXXXX";
        end if; 
    end process;

    grp_fu_271_p2 <= "1" when (unsigned(grp_fu_271_p0) > unsigned(grp_fu_271_p1)) else "0";
    i_8_fu_379_p2 <= std_logic_vector(unsigned(i_0_i_reg_249) + unsigned(ap_const_lv3_1));
    i_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(bitNumber_assign_reg_215));
    icmp_ln124_fu_283_p2 <= "1" when (bitNumber_assign_reg_215 = ap_const_lv8_80) else "0";
    icmp_ln125_fu_311_p2 <= "1" when (j_0_reg_227 = ap_const_lv3_4) else "0";
    icmp_ln133_fu_888_p2 <= "1" when (loop_0_reg_260 = ap_const_lv3_4) else "0";
    icmp_ln85_fu_373_p2 <= "1" when (i_0_i_reg_249 = ap_const_lv3_4) else "0";
    j_fu_317_p2 <= std_logic_vector(unsigned(j_0_reg_227) + unsigned(ap_const_lv3_1));
    loop_fu_894_p2 <= std_logic_vector(unsigned(loop_0_reg_260) + unsigned(ap_const_lv3_1));
    lshr_ln1_fu_462_p4 <= y_fu_456_p2(31 downto 2);
    lshr_ln2_fu_506_p4 <= y_4_fu_500_p2(31 downto 4);
    lshr_ln66_10_fu_717_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_40_fu_707_p1(31-1 downto 0)))));
    lshr_ln66_11_fu_859_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_46_fu_825_p1(31-1 downto 0)))));
    lshr_ln66_fu_711_p2 <= std_logic_vector(shift_right(unsigned(select_ln66_26_fu_681_p3),to_integer(unsigned('0' & zext_ln66_39_fu_703_p1(31-1 downto 0)))));
    lshr_ln_fu_416_p4 <= x_0_i_reg_239(31 downto 1);
    or_ln66_9_fu_630_p2 <= (start_pos_fu_622_p3 or ap_const_lv5_7);
    or_ln66_fu_766_p2 <= (shl_ln66_7_fu_754_p2 or and_ln66_fu_760_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, zext_ln127_2_fu_341_p1, zext_ln134_2_fu_914_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= zext_ln134_2_fu_914_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= zext_ln127_2_fu_341_p1(5 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= temp_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_we0 <= ap_const_lv4_F;
        else 
            output_r_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4, zext_ln127_fu_356_p1, zext_ln85_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_address0 <= zext_ln85_fu_368_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_address0 <= zext_ln127_fu_356_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= (temp_matrix2_q0 and output_r_q0);

    prod_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln66_26_fu_681_p3 <= 
        tmp_37_fu_645_p4 when (grp_fu_271_p2(0) = '1') else 
        temp_q0;
    select_ln66_27_fu_689_p3 <= 
        xor_ln66_17_fu_661_p2 when (grp_fu_271_p2(0) = '1') else 
        zext_ln66_37_fu_637_p1;
    select_ln66_28_fu_787_p3 <= 
        zext_ln66_41_fu_772_p1 when (grp_fu_271_p2(0) = '1') else 
        zext_ln66_42_fu_775_p1;
    select_ln66_29_fu_795_p3 <= 
        zext_ln66_42_fu_775_p1 when (grp_fu_271_p2(0) = '1') else 
        zext_ln66_41_fu_772_p1;
    select_ln66_30_fu_803_p3 <= 
        xor_ln66_18_fu_781_p2 when (grp_fu_271_p2(0) = '1') else 
        zext_ln66_41_fu_772_p1;
    select_ln66_31_fu_845_p3 <= 
        tmp_38_fu_835_p4 when (grp_fu_271_p2(0) = '1') else 
        shl_ln66_15_fu_829_p2;
    select_ln66_fu_673_p3 <= 
        sub_ln66_fu_655_p2 when (grp_fu_271_p2(0) = '1') else 
        sub_ln66_9_fu_667_p2;
    shl_ln66_15_fu_829_p2 <= std_logic_vector(shift_left(unsigned(zext_ln66_43_fu_778_p1),to_integer(unsigned('0' & zext_ln66_44_fu_817_p1(31-1 downto 0)))));
    shl_ln66_16_fu_853_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_45_fu_821_p1(31-1 downto 0)))));
    shl_ln66_17_fu_881_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln66_47_fu_878_p1(4-1 downto 0)))));
    shl_ln66_7_fu_754_p2 <= std_logic_vector(shift_left(unsigned(zext_ln98_fu_618_p1),to_integer(unsigned('0' & zext_ln66_1_fu_738_p1(8-1 downto 0)))));
    shl_ln66_fu_742_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln66_1_fu_738_p1(8-1 downto 0)))));
    shl_ln_fu_299_p3 <= (trunc_ln126_fu_295_p1 & ap_const_lv2_0);
    start_pos_fu_622_p3 <= (tmp_36_reg_988 & ap_const_lv3_0);
    sub_ln66_10_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln66_fu_673_p3));
    sub_ln66_9_fu_667_p2 <= std_logic_vector(unsigned(zext_ln66_38_fu_641_p1) - unsigned(zext_ln66_37_fu_637_p1));
    sub_ln66_fu_655_p2 <= std_logic_vector(unsigned(zext_ln66_37_fu_637_p1) - unsigned(zext_ln66_38_fu_641_p1));

    temp_address0_assign_proc : process(ap_CS_fsm_state6, temp_addr_4_reg_994, ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln66_fu_405_p1, zext_ln134_fu_900_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= zext_ln134_fu_900_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_address0 <= temp_addr_4_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_address0 <= zext_ln66_fu_405_p1(6 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (select_ln66_31_fu_845_p3 and and_ln66_18_fu_865_p2);
    temp_matrix2_address0 <= zext_ln127_3_fu_351_p1(14 - 1 downto 0);

    temp_matrix2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_matrix2_ce0 <= ap_const_logic_1;
        else 
            temp_matrix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state9, shl_ln66_17_fu_881_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_we0 <= shl_ln66_17_fu_881_p2;
        else 
            temp_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_31_fu_434_p3 <= x_0_i_reg_239(1 downto 1);
    tmp_32_fu_476_p3 <= y_fu_456_p2(2 downto 2);
    tmp_33_fu_520_p3 <= y_4_fu_500_p2(4 downto 4);
    tmp_34_fu_566_p3 <= y_5_fu_544_p2(8 downto 8);
    tmp_35_fu_580_p3 <= y_6_fu_574_p2(16 downto 16);
    
    tmp_37_fu_645_p4_proc : process(temp_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_37_fu_645_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := temp_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_37_fu_645_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_37_fu_645_p4_i) := temp_q0(32-1-tmp_37_fu_645_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_37_fu_645_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_38_fu_835_p4_proc : process(shl_ln66_15_fu_829_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_38_fu_835_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln66_15_fu_829_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_38_fu_835_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_38_fu_835_p4_i) := shl_ln66_15_fu_829_p2(32-1-tmp_38_fu_835_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_38_fu_835_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln124_fu_279_p1 <= bitNumber_assign_reg_215(3 - 1 downto 0);
    trunc_ln126_fu_295_p1 <= bitNumber_assign_reg_215(7 - 1 downto 0);
    trunc_ln127_fu_275_p1 <= state_offset(4 - 1 downto 0);
    trunc_ln66_fu_729_p1 <= and_ln66_17_fu_723_p2(8 - 1 downto 0);
    trunc_ln93_1_fu_442_p1 <= x_0_i_reg_239(24 - 1 downto 0);
    trunc_ln93_3_fu_446_p4 <= x_0_i_reg_239(24 downto 1);
    trunc_ln93_fu_430_p1 <= x_0_i_reg_239(1 - 1 downto 0);
    trunc_ln94_1_fu_490_p4 <= y_fu_456_p2(25 downto 2);
    trunc_ln95_1_fu_534_p4 <= y_4_fu_500_p2(27 downto 4);
    trunc_ln_fu_556_p4 <= y_5_fu_544_p2(31 downto 8);
    x_6_fu_410_p2 <= (x_0_i_reg_239 xor prod_q0);
    xor_ln66_17_fu_661_p2 <= (zext_ln66_37_fu_637_p1 xor ap_const_lv6_1F);
    xor_ln66_18_fu_781_p2 <= (zext_ln66_41_fu_772_p1 xor ap_const_lv6_1F);
    xor_ln66_19_fu_811_p2 <= (select_ln66_28_fu_787_p3 xor ap_const_lv6_1F);
    xor_ln66_3_fu_748_p2 <= (shl_ln66_fu_742_p2 xor ap_const_lv8_FF);
    xor_ln66_fu_733_p2 <= (trunc_ln124_reg_934 xor ap_const_lv3_7);
    xor_ln94_fu_484_p2 <= (trunc_ln93_3_fu_446_p4 xor trunc_ln93_1_fu_442_p1);
    xor_ln95_2_fu_550_p2 <= (xor_ln95_fu_528_p2 xor trunc_ln95_1_fu_534_p4);
    xor_ln95_fu_528_p2 <= (xor_ln94_fu_484_p2 xor trunc_ln94_1_fu_490_p4);
    xor_ln98_1_fu_594_p2 <= (xor_ln98_fu_588_p2 xor tmp_31_fu_434_p3);
    xor_ln98_2_fu_600_p2 <= (tmp_35_fu_580_p3 xor tmp_34_fu_566_p3);
    xor_ln98_3_fu_606_p2 <= (xor_ln98_2_fu_600_p2 xor tmp_33_fu_520_p3);
    xor_ln98_4_fu_612_p2 <= (xor_ln98_3_fu_606_p2 xor xor_ln98_1_fu_594_p2);
    xor_ln98_fu_588_p2 <= (trunc_ln93_fu_430_p1 xor tmp_32_fu_476_p3);
    y_4_fu_500_p2 <= (zext_ln94_fu_472_p1 xor y_fu_456_p2);
    y_5_fu_544_p2 <= (zext_ln95_fu_516_p1 xor y_4_fu_500_p2);
    y_6_fu_574_p2 <= (xor_ln95_2_fu_550_p2 xor trunc_ln_fu_556_p4);
    y_fu_456_p2 <= (zext_ln93_fu_426_p1 xor x_0_i_reg_239);
    zext_ln125_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_227),9));
    zext_ln126_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_fu_323_p2),14));
    zext_ln127_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_227),4));
    zext_ln127_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln127_fu_336_p2),64));
    zext_ln127_3_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln127_1_fu_346_p2),64));
    zext_ln127_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_227),64));
    zext_ln134_1_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_260),4));
    zext_ln134_2_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_reg_1034),64));
    zext_ln134_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_260),64));
    zext_ln66_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_fu_733_p2),8));
    zext_ln66_37_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_622_p3),6));
    zext_ln66_38_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_9_fu_630_p2),6));
    zext_ln66_39_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_27_fu_689_p3),32));
    zext_ln66_40_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln66_10_fu_697_p2),32));
    zext_ln66_41_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_reg_1004),6));
    zext_ln66_42_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_9_reg_1010),6));
    zext_ln66_43_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_reg_1016),32));
    zext_ln66_44_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_30_fu_803_p3),32));
    zext_ln66_45_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_29_fu_795_p3),32));
    zext_ln66_46_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_19_fu_811_p2),32));
    zext_ln66_47_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_reg_988),4));
    zext_ln66_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adjSize_fu_395_p4),64));
    zext_ln85_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_249),64));
    zext_ln93_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_416_p4),32));
    zext_ln94_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_462_p4),32));
    zext_ln95_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_506_p4),32));
    zext_ln98_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln98_4_fu_612_p2),8));
end behav;
