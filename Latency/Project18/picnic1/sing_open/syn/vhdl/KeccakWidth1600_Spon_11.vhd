-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakWidth1600_Spon_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_ce0 : OUT STD_LOGIC;
    instance_state_we0 : OUT STD_LOGIC;
    instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeccakWidth1600_Spon_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv34_4B : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001001011";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_ln212_fu_120_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln212_reg_299 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_24_load_reg_304 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal partialBlock_fu_149_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal partialBlock_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln194_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln224_fu_176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln224_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln229_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_192_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal i_reg_328 : STD_LOGIC_VECTOR (33 downto 0);
    signal loop_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln231_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal instance_state_addr_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln237_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_rec_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_KeccakP1600_Permute_s_fu_103_ap_ready : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_103_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal grp_KeccakP1600_Permute_s_fu_103_ap_start : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_103_ap_idle : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_103_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakP1600_Permute_s_fu_103_state_ce0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_103_state_we0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_103_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_01_rec_reg_80 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_1_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_KeccakP1600_Permute_s_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln232_4_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_24_fu_34 : STD_LOGIC_VECTOR (33 downto 0);
    signal instance_byteIOIndex_fu_38 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln236_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln149_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln212_fu_120_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln223_fu_145_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln223_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln224_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln224_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_14_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln229_9_fu_188_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln232_fu_208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln194_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln232_fu_222_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln232_14_fu_226_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln232_15_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln212_fu_120_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component KeccakP1600_Permute_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_KeccakP1600_Permute_s_fu_103 : component KeccakP1600_Permute_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakP1600_Permute_s_fu_103_ap_start,
        ap_done => grp_KeccakP1600_Permute_s_fu_103_ap_done,
        ap_idle => grp_KeccakP1600_Permute_s_fu_103_ap_idle,
        ap_ready => grp_KeccakP1600_Permute_s_fu_103_ap_ready,
        state_address0 => grp_KeccakP1600_Permute_s_fu_103_state_address0,
        state_ce0 => grp_KeccakP1600_Permute_s_fu_103_state_ce0,
        state_we0 => grp_KeccakP1600_Permute_s_fu_103_state_we0,
        state_d0 => grp_KeccakP1600_Permute_s_fu_103_state_d0,
        state_q0 => instance_state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakP1600_Permute_s_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln237_fu_252_p2 = ap_const_lv1_1) and (icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakP1600_Permute_s_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakP1600_Permute_s_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_24_fu_34_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_24_fu_34 <= i_reg_328;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_24_fu_34 <= ap_const_lv34_0;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_fu_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln237_fu_252_p2 = ap_const_lv1_1) and (icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                instance_byteIOIndex_fu_38 <= ap_const_lv32_0;
            elsif (((icmp_ln237_fu_252_p2 = ap_const_lv1_0) and (icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                instance_byteIOIndex_fu_38 <= add_ln236_fu_247_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                instance_byteIOIndex_fu_38 <= instance_byteIOIndex_read;
            end if; 
        end if;
    end process;

    loop_1_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_1_reg_92 <= loop_reg_336;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                loop_1_reg_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_01_rec_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                p_01_rec_reg_80 <= p_2_rec_fu_279_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_01_rec_reg_80 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_24_load_reg_304 <= i_24_fu_34;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_328 <= i_fu_192_p2;
                select_ln224_reg_317 <= select_ln224_fu_176_p3;
                    zext_ln229_reg_323(31 downto 0) <= zext_ln229_fu_184_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln237_reg_351 <= icmp_ln237_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                instance_state_addr_reg_346 <= zext_ln149_fu_242_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                loop_reg_336 <= loop_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                mul_ln212_reg_299 <= mul_ln212_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                partialBlock_reg_312 <= partialBlock_fu_149_p2;
            end if;
        end if;
    end process;
    zext_ln229_reg_323(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_139_p2, ap_CS_fsm_state4, icmp_ln231_fu_197_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln194_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln231_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln224_fu_158_p2 <= std_logic_vector(unsigned(zext_ln223_fu_155_p1) + unsigned(instance_byteIOIndex_fu_38));
    add_ln232_14_fu_226_p2 <= std_logic_vector(unsigned(mul_ln212_reg_299) + unsigned(zext_ln232_fu_222_p1));
    add_ln232_15_fu_236_p2 <= std_logic_vector(unsigned(loop_1_reg_92) + unsigned(instance_byteIOIndex_fu_38));
    add_ln232_fu_216_p2 <= std_logic_vector(unsigned(trunc_ln232_fu_208_p1) + unsigned(trunc_ln194_fu_212_p1));
    add_ln236_fu_247_p2 <= std_logic_vector(unsigned(instance_byteIOIndex_fu_38) + unsigned(select_ln224_reg_317));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state6_on_subcall_done_assign_proc : process(icmp_ln237_reg_351, grp_KeccakP1600_Permute_s_fu_103_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((icmp_ln237_reg_351 = ap_const_lv1_1) and (grp_KeccakP1600_Permute_s_fu_103_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_139_p2)
    begin
        if ((((icmp_ln194_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_139_p2)
    begin
        if (((icmp_ln194_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= instance_byteIOIndex_fu_38;
    data_address0 <= zext_ln232_4_fu_231_p1(15 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakP1600_Permute_s_fu_103_ap_start <= grp_KeccakP1600_Permute_s_fu_103_ap_start_reg;
    i_fu_192_p2 <= std_logic_vector(unsigned(zext_ln229_9_fu_188_p1) + unsigned(i_24_load_reg_304));
    icmp_ln194_fu_139_p2 <= "1" when (unsigned(i_24_fu_34) < unsigned(ap_const_lv34_4B)) else "0";
    icmp_ln224_fu_164_p2 <= "1" when (unsigned(add_ln224_fu_158_p2) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln231_fu_197_p2 <= "1" when (loop_1_reg_92 = select_ln224_reg_317) else "0";
    icmp_ln237_fu_252_p2 <= "1" when (add_ln236_fu_247_p2 = ap_const_lv32_A8) else "0";

    instance_state_address0_assign_proc : process(ap_CS_fsm_state4, icmp_ln231_fu_197_p2, instance_state_addr_reg_346, icmp_ln237_reg_351, ap_CS_fsm_state6, grp_KeccakP1600_Permute_s_fu_103_state_address0, ap_CS_fsm_state5, zext_ln149_fu_242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_state_address0 <= instance_state_addr_reg_346;
        elsif (((icmp_ln231_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            instance_state_address0 <= zext_ln149_fu_242_p1(8 - 1 downto 0);
        elsif (((icmp_ln237_reg_351 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_address0 <= grp_KeccakP1600_Permute_s_fu_103_state_address0;
        else 
            instance_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln231_fu_197_p2, icmp_ln237_reg_351, ap_CS_fsm_state6, grp_KeccakP1600_Permute_s_fu_103_state_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln231_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            instance_state_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln237_reg_351 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_ce0 <= grp_KeccakP1600_Permute_s_fu_103_state_ce0;
        else 
            instance_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    instance_state_d0_assign_proc : process(icmp_ln237_reg_351, ap_CS_fsm_state6, grp_KeccakP1600_Permute_s_fu_103_state_d0, ap_CS_fsm_state5, xor_ln149_fu_272_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_state_d0 <= xor_ln149_fu_272_p2;
        elsif (((icmp_ln237_reg_351 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_d0 <= grp_KeccakP1600_Permute_s_fu_103_state_d0;
        else 
            instance_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_we0_assign_proc : process(icmp_ln237_reg_351, ap_CS_fsm_state6, grp_KeccakP1600_Permute_s_fu_103_state_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_state_we0 <= ap_const_logic_1;
        elsif (((icmp_ln237_reg_351 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_we0 <= grp_KeccakP1600_Permute_s_fu_103_state_we0;
        else 
            instance_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_fu_202_p2 <= std_logic_vector(unsigned(loop_1_reg_92) + unsigned(ap_const_lv32_1));
    mul_ln212_fu_120_p0 <= mul_ln212_fu_120_p00(8 - 1 downto 0);
    mul_ln212_fu_120_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_offset),15));
    mul_ln212_fu_120_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln212_fu_120_p0) * unsigned(ap_const_lv15_4B), 15));
    p_2_rec_fu_279_p2 <= std_logic_vector(unsigned(zext_ln229_reg_323) + unsigned(p_01_rec_reg_80));
    partialBlock_14_fu_170_p2 <= std_logic_vector(unsigned(ap_const_lv32_A8) - unsigned(instance_byteIOIndex_fu_38));
    partialBlock_fu_149_p2 <= std_logic_vector(signed(ap_const_lv7_4B) - signed(trunc_ln223_fu_145_p1));
    select_ln224_fu_176_p3 <= 
        partialBlock_14_fu_170_p2 when (icmp_ln224_fu_164_p2(0) = '1') else 
        zext_ln223_fu_155_p1;
    trunc_ln194_fu_212_p1 <= p_01_rec_reg_80(8 - 1 downto 0);
    trunc_ln223_fu_145_p1 <= i_24_fu_34(7 - 1 downto 0);
    trunc_ln232_fu_208_p1 <= loop_1_reg_92(8 - 1 downto 0);
    xor_ln149_fu_272_p2 <= (instance_state_q0 xor data_q0);
    zext_ln149_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_15_fu_236_p2),64));
    zext_ln223_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_reg_312),32));
    zext_ln229_9_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln224_fu_176_p3),34));
    zext_ln229_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln224_fu_176_p3),64));
    zext_ln232_4_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_14_fu_226_p2),64));
    zext_ln232_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_fu_216_p2),15));
end behav;
