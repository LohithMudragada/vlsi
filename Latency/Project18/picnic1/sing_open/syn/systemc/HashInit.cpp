// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "HashInit.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic HashInit::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic HashInit::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> HashInit::ap_ST_fsm_state1 = "1";
const sc_lv<3> HashInit::ap_ST_fsm_state2 = "10";
const sc_lv<3> HashInit::ap_ST_fsm_state3 = "100";
const sc_lv<32> HashInit::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> HashInit::ap_const_lv32_1 = "1";
const sc_lv<1> HashInit::ap_const_lv1_1 = "1";
const sc_lv<1> HashInit::ap_const_lv1_0 = "0";
const sc_lv<8> HashInit::ap_const_lv8_0 = "00000000";
const sc_lv<32> HashInit::ap_const_lv32_2 = "10";
const bool HashInit::ap_const_boolean_0 = false;
const sc_lv<8> HashInit::ap_const_lv8_C8 = "11001000";
const sc_lv<8> HashInit::ap_const_lv8_1 = "1";
const sc_lv<4> HashInit::ap_const_lv4_F = "1111";
const bool HashInit::ap_const_boolean_1 = true;

HashInit::HashInit(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_KeccakWidth1600_Spon_12_fu_74 = new KeccakWidth1600_Spon_12("grp_KeccakWidth1600_Spon_12_fu_74");
    grp_KeccakWidth1600_Spon_12_fu_74->ap_clk(ap_clk);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_rst(ap_rst);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_start(grp_KeccakWidth1600_Spon_12_fu_74_ap_start);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_done(grp_KeccakWidth1600_Spon_12_fu_74_ap_done);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_idle(grp_KeccakWidth1600_Spon_12_fu_74_ap_idle);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_ready(grp_KeccakWidth1600_Spon_12_fu_74_ap_ready);
    grp_KeccakWidth1600_Spon_12_fu_74->instance_state_address0(grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0);
    grp_KeccakWidth1600_Spon_12_fu_74->instance_state_ce0(grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0);
    grp_KeccakWidth1600_Spon_12_fu_74->instance_state_we0(grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0);
    grp_KeccakWidth1600_Spon_12_fu_74->instance_state_d0(grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0);
    grp_KeccakWidth1600_Spon_12_fu_74->instance_state_q0(ctx_sponge_state_q0);
    grp_KeccakWidth1600_Spon_12_fu_74->data_0_read(hashPrefix);
    grp_KeccakWidth1600_Spon_12_fu_74->ap_return(grp_KeccakWidth1600_Spon_12_fu_74_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4);
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_ap_return );
    sensitive << ( ctx_sponge_byteIOInd_reg_63 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_ctx_sponge_state_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( icmp_ln139_fu_86_p2 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln140_fu_98_p1 );

    SC_METHOD(thread_ctx_sponge_state_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( icmp_ln139_fu_86_p2 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_sponge_state_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( icmp_ln139_fu_86_p2 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_sponge_state_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_reg_122 );
    sensitive << ( icmp_ln139_fu_86_p2 );
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_KeccakWidth1600_Spon_12_fu_74_ap_start);
    sensitive << ( grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg );

    SC_METHOD(thread_icmp_ln139_fu_86_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( loop_0_i_i_i_reg_52 );

    SC_METHOD(thread_icmp_ln66_fu_103_p2);
    sensitive << ( hashPrefix );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln139_fu_86_p2 );

    SC_METHOD(thread_loop_fu_92_p2);
    sensitive << ( loop_0_i_i_i_reg_52 );

    SC_METHOD(thread_zext_ln140_fu_98_p1);
    sensitive << ( loop_0_i_i_i_reg_52 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln139_fu_86_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    ap_CS_fsm = "001";
    grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg = SC_LOGIC_0;
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "HashInit_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_sponge_state_address0, "(port)ctx_sponge_state_address0");
    sc_trace(mVcdFile, ctx_sponge_state_ce0, "(port)ctx_sponge_state_ce0");
    sc_trace(mVcdFile, ctx_sponge_state_we0, "(port)ctx_sponge_state_we0");
    sc_trace(mVcdFile, ctx_sponge_state_d0, "(port)ctx_sponge_state_d0");
    sc_trace(mVcdFile, ctx_sponge_state_q0, "(port)ctx_sponge_state_q0");
    sc_trace(mVcdFile, hashPrefix, "(port)hashPrefix");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, loop_fu_92_p2, "loop_fu_92_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln66_fu_103_p2, "icmp_ln66_fu_103_p2");
    sc_trace(mVcdFile, icmp_ln66_reg_122, "icmp_ln66_reg_122");
    sc_trace(mVcdFile, icmp_ln139_fu_86_p2, "icmp_ln139_fu_86_p2");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_start, "grp_KeccakWidth1600_Spon_12_fu_74_ap_start");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_done, "grp_KeccakWidth1600_Spon_12_fu_74_ap_done");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_idle, "grp_KeccakWidth1600_Spon_12_fu_74_ap_idle");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_ready, "grp_KeccakWidth1600_Spon_12_fu_74_ap_ready");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0, "grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0, "grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0, "grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0, "grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_return, "grp_KeccakWidth1600_Spon_12_fu_74_ap_return");
    sc_trace(mVcdFile, loop_0_i_i_i_reg_52, "loop_0_i_i_i_reg_52");
    sc_trace(mVcdFile, ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4, "ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4");
    sc_trace(mVcdFile, ctx_sponge_byteIOInd_reg_63, "ctx_sponge_byteIOInd_reg_63");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
    sc_trace(mVcdFile, grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg, "grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg");
    sc_trace(mVcdFile, zext_ln140_fu_98_p1, "zext_ln140_fu_98_p1");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

HashInit::~HashInit() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_KeccakWidth1600_Spon_12_fu_74;
}

void HashInit::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_return_preg = ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_sponge_byteIOInd_reg_63 = grp_KeccakWidth1600_Spon_12_fu_74_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln66_fu_103_p2.read(), ap_const_lv1_1))) {
        ctx_sponge_byteIOInd_reg_63 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(icmp_ln66_fu_103_p2.read(), ap_const_lv1_0))) {
            grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeccakWidth1600_Spon_12_fu_74_ap_ready.read())) {
            grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        loop_0_i_i_i_reg_52 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_0))) {
        loop_0_i_i_i_reg_52 = loop_fu_92_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_1))) {
        icmp_ln66_reg_122 = icmp_ln66_fu_103_p2.read();
    }
}

void HashInit::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void HashInit::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void HashInit::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void HashInit::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_KeccakWidth1600_Spon_12_fu_74_ap_done.read()) && esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0));
}

void HashInit::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void HashInit::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void HashInit::thread_ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0))) {
        ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 = grp_KeccakWidth1600_Spon_12_fu_74_ap_return.read();
    } else {
        ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4 = ctx_sponge_byteIOInd_reg_63.read();
    }
}

void HashInit::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void HashInit::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_return = ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void HashInit::thread_ctx_sponge_state_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_0))) {
        ctx_sponge_state_address0 =  (sc_lv<8>) (zext_ln140_fu_98_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0))) {
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0.read();
    } else {
        ctx_sponge_state_address0 = "XXXXXXXX";
    }
}

void HashInit::thread_ctx_sponge_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_0))) {
        ctx_sponge_state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0))) {
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0.read();
    } else {
        ctx_sponge_state_ce0 = ap_const_logic_0;
    }
}

void HashInit::thread_ctx_sponge_state_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_0))) {
        ctx_sponge_state_d0 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0))) {
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0.read();
    } else {
        ctx_sponge_state_d0 = "XXXXXXXX";
    }
}

void HashInit::thread_ctx_sponge_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_0))) {
        ctx_sponge_state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(icmp_ln66_reg_122.read(), ap_const_lv1_0))) {
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0.read();
    } else {
        ctx_sponge_state_we0 = ap_const_logic_0;
    }
}

void HashInit::thread_grp_KeccakWidth1600_Spon_12_fu_74_ap_start() {
    grp_KeccakWidth1600_Spon_12_fu_74_ap_start = grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg.read();
}

void HashInit::thread_icmp_ln139_fu_86_p2() {
    icmp_ln139_fu_86_p2 = (!loop_0_i_i_i_reg_52.read().is_01() || !ap_const_lv8_C8.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_i_i_i_reg_52.read() == ap_const_lv8_C8);
}

void HashInit::thread_icmp_ln66_fu_103_p2() {
    icmp_ln66_fu_103_p2 = (!hashPrefix.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(hashPrefix.read() == ap_const_lv4_F);
}

void HashInit::thread_loop_fu_92_p2() {
    loop_fu_92_p2 = (!loop_0_i_i_i_reg_52.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(loop_0_i_i_i_reg_52.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void HashInit::thread_zext_ln140_fu_98_p1() {
    zext_ln140_fu_98_p1 = esl_zext<64,8>(loop_0_i_i_i_reg_52.read());
}

void HashInit::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln139_fu_86_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

