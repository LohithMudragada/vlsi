// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _HashInit_HH_
#define _HashInit_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeccakWidth1600_Spon_12.h"

namespace ap_rtl {

struct HashInit : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > ctx_sponge_state_address0;
    sc_out< sc_logic > ctx_sponge_state_ce0;
    sc_out< sc_logic > ctx_sponge_state_we0;
    sc_out< sc_lv<8> > ctx_sponge_state_d0;
    sc_in< sc_lv<8> > ctx_sponge_state_q0;
    sc_in< sc_lv<4> > hashPrefix;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    HashInit(sc_module_name name);
    SC_HAS_PROCESS(HashInit);

    ~HashInit();

    sc_trace_file* mVcdFile;

    KeccakWidth1600_Spon_12* grp_KeccakWidth1600_Spon_12_fu_74;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > loop_fu_92_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln66_fu_103_p2;
    sc_signal< sc_lv<1> > icmp_ln66_reg_122;
    sc_signal< sc_lv<1> > icmp_ln139_fu_86_p2;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_ap_start;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_ap_done;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_ap_idle;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_ap_ready;
    sc_signal< sc_lv<8> > grp_KeccakWidth1600_Spon_12_fu_74_instance_state_address0;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_instance_state_ce0;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_instance_state_we0;
    sc_signal< sc_lv<8> > grp_KeccakWidth1600_Spon_12_fu_74_instance_state_d0;
    sc_signal< sc_lv<32> > grp_KeccakWidth1600_Spon_12_fu_74_ap_return;
    sc_signal< sc_lv<8> > loop_0_i_i_i_reg_52;
    sc_signal< sc_lv<32> > ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4;
    sc_signal< sc_lv<32> > ctx_sponge_byteIOInd_reg_63;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_state3_on_subcall_done;
    sc_signal< sc_logic > grp_KeccakWidth1600_Spon_12_fu_74_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln140_fu_98_p1;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_C8;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state3_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_ctx_sponge_byteIOInd_phi_fu_67_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ctx_sponge_state_address0();
    void thread_ctx_sponge_state_ce0();
    void thread_ctx_sponge_state_d0();
    void thread_ctx_sponge_state_we0();
    void thread_grp_KeccakWidth1600_Spon_12_fu_74_ap_start();
    void thread_icmp_ln139_fu_86_p2();
    void thread_icmp_ln66_fu_103_p2();
    void thread_loop_fu_92_p2();
    void thread_zext_ln140_fu_98_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
