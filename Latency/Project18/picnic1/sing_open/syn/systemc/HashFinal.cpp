// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "HashFinal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic HashFinal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic HashFinal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> HashFinal::ap_ST_fsm_state1 = "1";
const sc_lv<6> HashFinal::ap_ST_fsm_state2 = "10";
const sc_lv<6> HashFinal::ap_ST_fsm_state3 = "100";
const sc_lv<6> HashFinal::ap_ST_fsm_state4 = "1000";
const sc_lv<6> HashFinal::ap_ST_fsm_state5 = "10000";
const sc_lv<6> HashFinal::ap_ST_fsm_state6 = "100000";
const sc_lv<32> HashFinal::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> HashFinal::ap_const_lv32_2 = "10";
const sc_lv<32> HashFinal::ap_const_lv32_4 = "100";
const sc_lv<32> HashFinal::ap_const_lv32_5 = "101";
const sc_lv<64> HashFinal::ap_const_lv64_A7 = "10100111";
const sc_lv<32> HashFinal::ap_const_lv32_1 = "1";
const sc_lv<32> HashFinal::ap_const_lv32_3 = "11";
const sc_lv<8> HashFinal::ap_const_lv8_1F = "11111";
const sc_lv<8> HashFinal::ap_const_lv8_80 = "10000000";
const bool HashFinal::ap_const_boolean_1 = true;

HashFinal::HashFinal(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_KeccakP1600_Permute_s_fu_54 = new KeccakP1600_Permute_s("grp_KeccakP1600_Permute_s_fu_54");
    grp_KeccakP1600_Permute_s_fu_54->ap_clk(ap_clk);
    grp_KeccakP1600_Permute_s_fu_54->ap_rst(ap_rst);
    grp_KeccakP1600_Permute_s_fu_54->ap_start(grp_KeccakP1600_Permute_s_fu_54_ap_start);
    grp_KeccakP1600_Permute_s_fu_54->ap_done(grp_KeccakP1600_Permute_s_fu_54_ap_done);
    grp_KeccakP1600_Permute_s_fu_54->ap_idle(grp_KeccakP1600_Permute_s_fu_54_ap_idle);
    grp_KeccakP1600_Permute_s_fu_54->ap_ready(grp_KeccakP1600_Permute_s_fu_54_ap_ready);
    grp_KeccakP1600_Permute_s_fu_54->state_address0(grp_KeccakP1600_Permute_s_fu_54_state_address0);
    grp_KeccakP1600_Permute_s_fu_54->state_ce0(grp_KeccakP1600_Permute_s_fu_54_state_ce0);
    grp_KeccakP1600_Permute_s_fu_54->state_we0(grp_KeccakP1600_Permute_s_fu_54_state_we0);
    grp_KeccakP1600_Permute_s_fu_54->state_d0(grp_KeccakP1600_Permute_s_fu_54_state_d0);
    grp_KeccakP1600_Permute_s_fu_54->state_q0(ctx_sponge_state_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_sponge_state_add_1_reg_100);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_sponge_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ctx_sponge_state_add_reg_95 );
    sensitive << ( ctx_sponge_state_add_1_reg_100 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_state_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln149_fu_64_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_sponge_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_state_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_sponge_state_d0);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_state_d0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln149_fu_69_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( xor_ln149_11_fu_76_p2 );

    SC_METHOD(thread_ctx_sponge_state_we0);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_state_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_KeccakP1600_Permute_s_fu_54_ap_start);
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_start_reg );

    SC_METHOD(thread_xor_ln149_11_fu_76_p2);
    sensitive << ( ctx_sponge_state_q0 );

    SC_METHOD(thread_xor_ln149_fu_69_p2);
    sensitive << ( ctx_sponge_state_q0 );

    SC_METHOD(thread_zext_ln149_fu_64_p1);
    sensitive << ( ctx_sponge_byteIOInd );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_KeccakP1600_Permute_s_fu_54_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    ap_CS_fsm = "000001";
    grp_KeccakP1600_Permute_s_fu_54_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "HashFinal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_sponge_state_address0, "(port)ctx_sponge_state_address0");
    sc_trace(mVcdFile, ctx_sponge_state_ce0, "(port)ctx_sponge_state_ce0");
    sc_trace(mVcdFile, ctx_sponge_state_we0, "(port)ctx_sponge_state_we0");
    sc_trace(mVcdFile, ctx_sponge_state_d0, "(port)ctx_sponge_state_d0");
    sc_trace(mVcdFile, ctx_sponge_state_q0, "(port)ctx_sponge_state_q0");
    sc_trace(mVcdFile, ctx_sponge_byteIOInd, "(port)ctx_sponge_byteIOInd");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ctx_sponge_state_add_reg_95, "ctx_sponge_state_add_reg_95");
    sc_trace(mVcdFile, ctx_sponge_state_add_1_reg_100, "ctx_sponge_state_add_1_reg_100");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_ap_start, "grp_KeccakP1600_Permute_s_fu_54_ap_start");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_ap_done, "grp_KeccakP1600_Permute_s_fu_54_ap_done");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_ap_idle, "grp_KeccakP1600_Permute_s_fu_54_ap_idle");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_ap_ready, "grp_KeccakP1600_Permute_s_fu_54_ap_ready");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_state_address0, "grp_KeccakP1600_Permute_s_fu_54_state_address0");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_state_ce0, "grp_KeccakP1600_Permute_s_fu_54_state_ce0");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_state_we0, "grp_KeccakP1600_Permute_s_fu_54_state_we0");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_state_d0, "grp_KeccakP1600_Permute_s_fu_54_state_d0");
    sc_trace(mVcdFile, grp_KeccakP1600_Permute_s_fu_54_ap_start_reg, "grp_KeccakP1600_Permute_s_fu_54_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln149_fu_64_p1, "zext_ln149_fu_64_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, xor_ln149_fu_69_p2, "xor_ln149_fu_69_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, xor_ln149_11_fu_76_p2, "xor_ln149_11_fu_76_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

HashFinal::~HashFinal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_KeccakP1600_Permute_s_fu_54;
}

void HashFinal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_KeccakP1600_Permute_s_fu_54_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_KeccakP1600_Permute_s_fu_54_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeccakP1600_Permute_s_fu_54_ap_ready.read())) {
            grp_KeccakP1600_Permute_s_fu_54_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_sponge_state_add_reg_95 =  (sc_lv<8>) (zext_ln149_fu_64_p1.read());
    }
}

void HashFinal::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void HashFinal::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void HashFinal::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void HashFinal::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void HashFinal::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void HashFinal::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void HashFinal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(grp_KeccakP1600_Permute_s_fu_54_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void HashFinal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void HashFinal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_KeccakP1600_Permute_s_fu_54_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void HashFinal::thread_ap_return_0() {
    ap_return_0 = ap_const_lv32_0;
}

void HashFinal::thread_ap_return_1() {
    ap_return_1 = ap_const_lv32_1;
}

void HashFinal::thread_ctx_sponge_state_add_1_reg_100() {
    ctx_sponge_state_add_1_reg_100 =  (sc_lv<8>) (ap_const_lv64_A7);
}

void HashFinal::thread_ctx_sponge_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_sponge_state_address0 = ctx_sponge_state_add_1_reg_100.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_sponge_state_address0 =  (sc_lv<8>) (ap_const_lv64_A7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_sponge_state_address0 = ctx_sponge_state_add_reg_95.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ctx_sponge_state_address0 =  (sc_lv<8>) (zext_ln149_fu_64_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_sponge_state_address0 = grp_KeccakP1600_Permute_s_fu_54_state_address0.read();
    } else {
        ctx_sponge_state_address0 = "XXXXXXXX";
    }
}

void HashFinal::thread_ctx_sponge_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ctx_sponge_state_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_sponge_state_ce0 = grp_KeccakP1600_Permute_s_fu_54_state_ce0.read();
    } else {
        ctx_sponge_state_ce0 = ap_const_logic_0;
    }
}

void HashFinal::thread_ctx_sponge_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_sponge_state_d0 = xor_ln149_11_fu_76_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_sponge_state_d0 = xor_ln149_fu_69_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_sponge_state_d0 = grp_KeccakP1600_Permute_s_fu_54_state_d0.read();
    } else {
        ctx_sponge_state_d0 = "XXXXXXXX";
    }
}

void HashFinal::thread_ctx_sponge_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ctx_sponge_state_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_sponge_state_we0 = grp_KeccakP1600_Permute_s_fu_54_state_we0.read();
    } else {
        ctx_sponge_state_we0 = ap_const_logic_0;
    }
}

void HashFinal::thread_grp_KeccakP1600_Permute_s_fu_54_ap_start() {
    grp_KeccakP1600_Permute_s_fu_54_ap_start = grp_KeccakP1600_Permute_s_fu_54_ap_start_reg.read();
}

void HashFinal::thread_xor_ln149_11_fu_76_p2() {
    xor_ln149_11_fu_76_p2 = (ctx_sponge_state_q0.read() ^ ap_const_lv8_80);
}

void HashFinal::thread_xor_ln149_fu_69_p2() {
    xor_ln149_fu_69_p2 = (ctx_sponge_state_q0.read() ^ ap_const_lv8_1F);
}

void HashFinal::thread_zext_ln149_fu_64_p1() {
    zext_ln149_fu_64_p1 = esl_zext<64,32>(ctx_sponge_byteIOInd.read());
}

void HashFinal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_KeccakP1600_Permute_s_fu_54_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

