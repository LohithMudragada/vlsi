// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module createRandomTape13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        seed_0_address0,
        seed_0_ce0,
        seed_0_q0,
        seed_offset1,
        salt_0_address0,
        salt_0_ce0,
        salt_0_q0,
        roundNumber,
        playerNumber,
        tape_address0,
        tape_ce0,
        tape_we0,
        tape_d0,
        tape_q0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] seed_0_address0;
output   seed_0_ce0;
input  [7:0] seed_0_q0;
input  [7:0] seed_offset1;
output  [4:0] salt_0_address0;
output   salt_0_ce0;
input  [7:0] salt_0_q0;
input  [7:0] roundNumber;
input  [0:0] playerNumber;
output  [6:0] tape_address0;
output   tape_ce0;
output   tape_we0;
output  [7:0] tape_d0;
input  [7:0] tape_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] tape_address0;
reg tape_ce0;
reg tape_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_HashInit_fu_133_ap_return;
reg   [31:0] reg_164;
wire    ap_CS_fsm_state2;
wire    grp_HashInit_fu_133_ap_ready;
wire    grp_HashInit_fu_133_ap_done;
wire    ap_CS_fsm_state10;
reg   [31:0] reg_170;
wire    ap_CS_fsm_state6;
wire    grp_HashFinal_fu_146_ap_ready;
wire    grp_HashFinal_fu_146_ap_done;
wire    ap_CS_fsm_state22;
reg   [31:0] reg_175;
wire   [31:0] grp_KeccakWidth1600_Spon_10_fu_120_ap_return;
reg   [31:0] reg_180;
wire    ap_CS_fsm_state16;
wire    grp_KeccakWidth1600_Spon_10_fu_120_ap_ready;
wire    grp_KeccakWidth1600_Spon_10_fu_120_ap_done;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_KeccakWidth1600_Spon_4_fu_82_ap_return;
reg   [31:0] ctx_sponge_byteIOInd_37_reg_196;
wire    ap_CS_fsm_state4;
wire    grp_KeccakWidth1600_Spon_4_fu_82_ap_ready;
wire    grp_KeccakWidth1600_Spon_4_fu_82_ap_done;
wire   [31:0] grp_KeccakWidth1600_Spon_15_fu_96_ap_return;
reg   [31:0] ctx_sponge_byteIOInd_40_reg_201;
wire    ap_CS_fsm_state12;
wire    grp_KeccakWidth1600_Spon_15_fu_96_ap_ready;
wire    grp_KeccakWidth1600_Spon_15_fu_96_ap_done;
wire   [31:0] grp_KeccakWidth1600_Spon_8_fu_108_ap_return;
reg   [31:0] ctx_sponge_byteIOInd_41_reg_206;
wire    ap_CS_fsm_state14;
wire    grp_KeccakWidth1600_Spon_8_fu_108_ap_ready;
wire    grp_KeccakWidth1600_Spon_8_fu_108_ap_done;
wire    ap_CS_fsm_state15;
wire   [7:0] temp_0_fu_186_p1;
reg   [7:0] temp_0_reg_216;
wire    ap_CS_fsm_state17;
reg   [7:0] ctx_sponge_state_address0;
reg    ctx_sponge_state_ce0;
reg    ctx_sponge_state_we0;
reg   [7:0] ctx_sponge_state_d0;
wire   [7:0] ctx_sponge_state_q0;
wire    grp_KeccakWidth1600_Spon_3_fu_66_ap_start;
wire    grp_KeccakWidth1600_Spon_3_fu_66_ap_done;
wire    grp_KeccakWidth1600_Spon_3_fu_66_ap_idle;
wire    grp_KeccakWidth1600_Spon_3_fu_66_ap_ready;
wire   [7:0] grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0;
wire   [6:0] grp_KeccakWidth1600_Spon_3_fu_66_data_address0;
wire    grp_KeccakWidth1600_Spon_3_fu_66_data_ce0;
wire    grp_KeccakWidth1600_Spon_3_fu_66_data_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_3_fu_66_data_d0;
reg   [7:0] grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen;
wire    grp_KeccakWidth1600_Spon_4_fu_82_ap_start;
wire    grp_KeccakWidth1600_Spon_4_fu_82_ap_idle;
wire   [7:0] grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0;
wire   [11:0] grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0;
wire    grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0;
wire    grp_KeccakWidth1600_Spon_15_fu_96_ap_start;
wire    grp_KeccakWidth1600_Spon_15_fu_96_ap_idle;
wire   [7:0] grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0;
wire   [6:0] grp_KeccakWidth1600_Spon_15_fu_96_data_address0;
wire    grp_KeccakWidth1600_Spon_15_fu_96_data_ce0;
wire    grp_KeccakWidth1600_Spon_8_fu_108_ap_start;
wire    grp_KeccakWidth1600_Spon_8_fu_108_ap_idle;
wire   [7:0] grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0;
wire   [4:0] grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0;
wire    grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0;
wire    grp_KeccakWidth1600_Spon_10_fu_120_ap_start;
wire    grp_KeccakWidth1600_Spon_10_fu_120_ap_idle;
wire   [7:0] grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0;
reg   [31:0] grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read;
reg   [7:0] grp_KeccakWidth1600_Spon_10_fu_120_data_0_read;
wire    grp_HashInit_fu_133_ap_start;
wire    grp_HashInit_fu_133_ap_idle;
wire   [7:0] grp_HashInit_fu_133_ctx_sponge_state_address0;
wire    grp_HashInit_fu_133_ctx_sponge_state_ce0;
wire    grp_HashInit_fu_133_ctx_sponge_state_we0;
wire   [7:0] grp_HashInit_fu_133_ctx_sponge_state_d0;
reg   [3:0] grp_HashInit_fu_133_hashPrefix;
wire    grp_HashFinal_fu_146_ap_start;
wire    grp_HashFinal_fu_146_ap_idle;
wire   [7:0] grp_HashFinal_fu_146_ctx_sponge_state_address0;
wire    grp_HashFinal_fu_146_ctx_sponge_state_ce0;
wire    grp_HashFinal_fu_146_ctx_sponge_state_we0;
wire   [7:0] grp_HashFinal_fu_146_ctx_sponge_state_d0;
reg   [31:0] grp_HashFinal_fu_146_ctx_sponge_byteIOInd;
wire   [31:0] grp_HashFinal_fu_146_ap_return_0;
wire   [31:0] grp_HashFinal_fu_146_ap_return_1;
reg    grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state24;
reg    grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg;
reg    grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg;
wire    ap_CS_fsm_state11;
reg    grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg;
wire    ap_CS_fsm_state13;
reg    grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg;
wire    ap_CS_fsm_state19;
reg    grp_HashInit_fu_133_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    grp_HashFinal_fu_146_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state21;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg = 1'b0;
#0 grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg = 1'b0;
#0 grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg = 1'b0;
#0 grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg = 1'b0;
#0 grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg = 1'b0;
#0 grp_HashInit_fu_133_ap_start_reg = 1'b0;
#0 grp_HashFinal_fu_146_ap_start_reg = 1'b0;
end

createRandomTape1fYi #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
ctx_sponge_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_sponge_state_address0),
    .ce0(ctx_sponge_state_ce0),
    .we0(ctx_sponge_state_we0),
    .d0(ctx_sponge_state_d0),
    .q0(ctx_sponge_state_q0)
);

KeccakWidth1600_Spon_3 grp_KeccakWidth1600_Spon_3_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_3_fu_66_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_3_fu_66_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_3_fu_66_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_3_fu_66_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(reg_170),
    .instance_squeezing_read(reg_175),
    .data_address0(grp_KeccakWidth1600_Spon_3_fu_66_data_address0),
    .data_ce0(grp_KeccakWidth1600_Spon_3_fu_66_data_ce0),
    .data_we0(grp_KeccakWidth1600_Spon_3_fu_66_data_we0),
    .data_d0(grp_KeccakWidth1600_Spon_3_fu_66_data_d0),
    .dataByteLen(grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen)
);

KeccakWidth1600_Spon_4 grp_KeccakWidth1600_Spon_4_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_4_fu_82_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_4_fu_82_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_4_fu_82_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_4_fu_82_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(reg_164),
    .data_0_address0(grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0),
    .data_0_ce0(grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0),
    .data_0_q0(seed_0_q0),
    .data_offset1(seed_offset1),
    .ap_return(grp_KeccakWidth1600_Spon_4_fu_82_ap_return)
);

KeccakWidth1600_Spon_15 grp_KeccakWidth1600_Spon_15_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_15_fu_96_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_15_fu_96_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_15_fu_96_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_15_fu_96_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(reg_164),
    .data_address0(grp_KeccakWidth1600_Spon_15_fu_96_data_address0),
    .data_ce0(grp_KeccakWidth1600_Spon_15_fu_96_data_ce0),
    .data_q0(tape_q0),
    .ap_return(grp_KeccakWidth1600_Spon_15_fu_96_ap_return)
);

KeccakWidth1600_Spon_8 grp_KeccakWidth1600_Spon_8_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_8_fu_108_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_8_fu_108_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_8_fu_108_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_8_fu_108_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(ctx_sponge_byteIOInd_40_reg_201),
    .data_0_address0(grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0),
    .data_0_ce0(grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0),
    .data_0_q0(salt_0_q0),
    .ap_return(grp_KeccakWidth1600_Spon_8_fu_108_ap_return)
);

KeccakWidth1600_Spon_10 grp_KeccakWidth1600_Spon_10_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_10_fu_120_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_10_fu_120_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_10_fu_120_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_10_fu_120_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read),
    .data_0_read(grp_KeccakWidth1600_Spon_10_fu_120_data_0_read),
    .ap_return(grp_KeccakWidth1600_Spon_10_fu_120_ap_return)
);

HashInit grp_HashInit_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_HashInit_fu_133_ap_start),
    .ap_done(grp_HashInit_fu_133_ap_done),
    .ap_idle(grp_HashInit_fu_133_ap_idle),
    .ap_ready(grp_HashInit_fu_133_ap_ready),
    .ctx_sponge_state_address0(grp_HashInit_fu_133_ctx_sponge_state_address0),
    .ctx_sponge_state_ce0(grp_HashInit_fu_133_ctx_sponge_state_ce0),
    .ctx_sponge_state_we0(grp_HashInit_fu_133_ctx_sponge_state_we0),
    .ctx_sponge_state_d0(grp_HashInit_fu_133_ctx_sponge_state_d0),
    .ctx_sponge_state_q0(ctx_sponge_state_q0),
    .hashPrefix(grp_HashInit_fu_133_hashPrefix),
    .ap_return(grp_HashInit_fu_133_ap_return)
);

HashFinal grp_HashFinal_fu_146(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_HashFinal_fu_146_ap_start),
    .ap_done(grp_HashFinal_fu_146_ap_done),
    .ap_idle(grp_HashFinal_fu_146_ap_idle),
    .ap_ready(grp_HashFinal_fu_146_ap_ready),
    .ctx_sponge_state_address0(grp_HashFinal_fu_146_ctx_sponge_state_address0),
    .ctx_sponge_state_ce0(grp_HashFinal_fu_146_ctx_sponge_state_ce0),
    .ctx_sponge_state_we0(grp_HashFinal_fu_146_ctx_sponge_state_we0),
    .ctx_sponge_state_d0(grp_HashFinal_fu_146_ctx_sponge_state_d0),
    .ctx_sponge_state_q0(ctx_sponge_state_q0),
    .ctx_sponge_byteIOInd(grp_HashFinal_fu_146_ctx_sponge_byteIOInd),
    .ap_return_0(grp_HashFinal_fu_146_ap_return_0),
    .ap_return_1(grp_HashFinal_fu_146_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_HashFinal_fu_146_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_HashFinal_fu_146_ap_start_reg <= 1'b1;
        end else if ((grp_HashFinal_fu_146_ap_ready == 1'b1)) begin
            grp_HashFinal_fu_146_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_HashInit_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_HashInit_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_HashInit_fu_133_ap_ready == 1'b1)) begin
            grp_HashInit_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
            grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_10_fu_120_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_15_fu_96_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7))) begin
            grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_3_fu_66_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_4_fu_82_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_8_fu_108_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_KeccakWidth1600_Spon_4_fu_82_ap_done == 1'b1))) begin
        ctx_sponge_byteIOInd_37_reg_196 <= grp_KeccakWidth1600_Spon_4_fu_82_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_KeccakWidth1600_Spon_15_fu_96_ap_done == 1'b1))) begin
        ctx_sponge_byteIOInd_40_reg_201 <= grp_KeccakWidth1600_Spon_15_fu_96_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (grp_KeccakWidth1600_Spon_8_fu_108_ap_done == 1'b1))) begin
        ctx_sponge_byteIOInd_41_reg_206 <= grp_KeccakWidth1600_Spon_8_fu_108_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_HashInit_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_HashInit_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_164 <= grp_HashInit_fu_133_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_HashFinal_fu_146_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((grp_HashFinal_fu_146_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_170 <= grp_HashFinal_fu_146_ap_return_0;
        reg_175 <= grp_HashFinal_fu_146_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1)))) begin
        reg_180 <= grp_KeccakWidth1600_Spon_10_fu_120_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_0_reg_216[0] <= temp_0_fu_186_p1[0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_KeccakWidth1600_Spon_3_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22))) begin
        ctx_sponge_state_address0 = grp_HashFinal_fu_146_ctx_sponge_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        ctx_sponge_state_address0 = grp_HashInit_fu_133_ctx_sponge_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_10_fu_120_instance_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_8_fu_108_instance_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_15_fu_96_instance_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_4_fu_82_instance_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_3_fu_66_instance_state_address0;
    end else begin
        ctx_sponge_state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22))) begin
        ctx_sponge_state_ce0 = grp_HashFinal_fu_146_ctx_sponge_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        ctx_sponge_state_ce0 = grp_HashInit_fu_133_ctx_sponge_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_10_fu_120_instance_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_8_fu_108_instance_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_15_fu_96_instance_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_4_fu_82_instance_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_3_fu_66_instance_state_ce0;
    end else begin
        ctx_sponge_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22))) begin
        ctx_sponge_state_d0 = grp_HashFinal_fu_146_ctx_sponge_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        ctx_sponge_state_d0 = grp_HashInit_fu_133_ctx_sponge_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_10_fu_120_instance_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_8_fu_108_instance_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_15_fu_96_instance_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_4_fu_82_instance_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_3_fu_66_instance_state_d0;
    end else begin
        ctx_sponge_state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22))) begin
        ctx_sponge_state_we0 = grp_HashFinal_fu_146_ctx_sponge_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        ctx_sponge_state_we0 = grp_HashInit_fu_133_ctx_sponge_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_10_fu_120_instance_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_8_fu_108_instance_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_15_fu_96_instance_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_4_fu_82_instance_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_3_fu_66_instance_state_we0;
    end else begin
        ctx_sponge_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_HashFinal_fu_146_ctx_sponge_byteIOInd = reg_180;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_HashFinal_fu_146_ctx_sponge_byteIOInd = ctx_sponge_byteIOInd_37_reg_196;
    end else begin
        grp_HashFinal_fu_146_ctx_sponge_byteIOInd = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_HashInit_fu_133_hashPrefix = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_HashInit_fu_133_hashPrefix = 4'd2;
    end else begin
        grp_HashInit_fu_133_hashPrefix = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_KeccakWidth1600_Spon_10_fu_120_data_0_read = 8'd91;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_KeccakWidth1600_Spon_10_fu_120_data_0_read = temp_0_reg_216;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_KeccakWidth1600_Spon_10_fu_120_data_0_read = roundNumber;
    end else begin
        grp_KeccakWidth1600_Spon_10_fu_120_data_0_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read = reg_180;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read = ctx_sponge_byteIOInd_41_reg_206;
    end else begin
        grp_KeccakWidth1600_Spon_10_fu_120_instance_byteIOIndex_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen = 8'd91;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen = 8'd32;
    end else begin
        grp_KeccakWidth1600_Spon_3_fu_66_dataByteLen = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tape_address0 = grp_KeccakWidth1600_Spon_15_fu_96_data_address0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        tape_address0 = grp_KeccakWidth1600_Spon_3_fu_66_data_address0;
    end else begin
        tape_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tape_ce0 = grp_KeccakWidth1600_Spon_15_fu_96_data_ce0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        tape_ce0 = grp_KeccakWidth1600_Spon_3_fu_66_data_ce0;
    end else begin
        tape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state8))) begin
        tape_we0 = grp_KeccakWidth1600_Spon_3_fu_66_data_we0;
    end else begin
        tape_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_HashInit_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_KeccakWidth1600_Spon_4_fu_82_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_HashFinal_fu_146_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_HashInit_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_KeccakWidth1600_Spon_15_fu_96_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_KeccakWidth1600_Spon_8_fu_108_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (grp_KeccakWidth1600_Spon_10_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_HashFinal_fu_146_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_KeccakWidth1600_Spon_3_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_HashFinal_fu_146_ap_start = grp_HashFinal_fu_146_ap_start_reg;

assign grp_HashInit_fu_133_ap_start = grp_HashInit_fu_133_ap_start_reg;

assign grp_KeccakWidth1600_Spon_10_fu_120_ap_start = grp_KeccakWidth1600_Spon_10_fu_120_ap_start_reg;

assign grp_KeccakWidth1600_Spon_15_fu_96_ap_start = grp_KeccakWidth1600_Spon_15_fu_96_ap_start_reg;

assign grp_KeccakWidth1600_Spon_3_fu_66_ap_start = grp_KeccakWidth1600_Spon_3_fu_66_ap_start_reg;

assign grp_KeccakWidth1600_Spon_4_fu_82_ap_start = grp_KeccakWidth1600_Spon_4_fu_82_ap_start_reg;

assign grp_KeccakWidth1600_Spon_8_fu_108_ap_start = grp_KeccakWidth1600_Spon_8_fu_108_ap_start_reg;

assign salt_0_address0 = grp_KeccakWidth1600_Spon_8_fu_108_data_0_address0;

assign salt_0_ce0 = grp_KeccakWidth1600_Spon_8_fu_108_data_0_ce0;

assign seed_0_address0 = grp_KeccakWidth1600_Spon_4_fu_82_data_0_address0;

assign seed_0_ce0 = grp_KeccakWidth1600_Spon_4_fu_82_data_0_ce0;

assign tape_d0 = grp_KeccakWidth1600_Spon_3_fu_66_data_d0;

assign temp_0_fu_186_p1 = playerNumber;

always @ (posedge ap_clk) begin
    temp_0_reg_216[7:1] <= 7'b0000000;
end

endmodule //createRandomTape13
