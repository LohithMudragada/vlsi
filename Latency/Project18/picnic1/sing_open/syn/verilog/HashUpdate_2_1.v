// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HashUpdate_2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_sponge_state_address0,
        ctx_sponge_state_ce0,
        ctx_sponge_state_we0,
        ctx_sponge_state_d0,
        ctx_sponge_state_q0,
        ctx_sponge_byteIOInd,
        data_address0,
        data_ce0,
        data_q0,
        data_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] ctx_sponge_state_address0;
output   ctx_sponge_state_ce0;
output   ctx_sponge_state_we0;
output  [7:0] ctx_sponge_state_d0;
input  [7:0] ctx_sponge_state_q0;
input  [31:0] ctx_sponge_byteIOInd;
output  [9:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
input  [7:0] data_offset;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln34_fu_186_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln37_fu_203_p1;
reg   [63:0] zext_ln37_reg_331;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_52_fu_207_p3;
wire   [3:0] trunc_ln37_fu_237_p1;
reg   [3:0] trunc_ln37_reg_344;
wire   [4:0] loop_fu_241_p2;
reg   [4:0] loop_reg_351;
reg   [7:0] trunc_ln2_reg_356;
wire    ap_CS_fsm_state4;
reg   [7:0] trunc_ln3_reg_361;
reg   [6:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [7:0] temp_d0;
wire   [7:0] temp_q0;
reg   [6:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
reg   [7:0] temp_d1;
wire    grp_KeccakWidth1600_Spon_9_fu_174_ap_start;
wire    grp_KeccakWidth1600_Spon_9_fu_174_ap_done;
wire    grp_KeccakWidth1600_Spon_9_fu_174_ap_idle;
wire    grp_KeccakWidth1600_Spon_9_fu_174_ap_ready;
wire   [7:0] grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0;
wire    grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0;
wire    grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0;
wire   [7:0] grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0;
wire   [6:0] grp_KeccakWidth1600_Spon_9_fu_174_data_address0;
wire    grp_KeccakWidth1600_Spon_9_fu_174_data_ce0;
wire   [31:0] grp_KeccakWidth1600_Spon_9_fu_174_ap_return;
reg   [6:0] phi_ln34_reg_152;
wire   [0:0] icmp_ln34_fu_197_p2;
reg   [4:0] loop_0_reg_163;
wire    ap_CS_fsm_state5;
reg    grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln34_fu_192_p1;
wire   [63:0] zext_ln38_fu_232_p1;
wire   [63:0] zext_ln41_fu_268_p1;
wire   [63:0] zext_ln43_fu_298_p1;
wire   [63:0] zext_ln45_fu_308_p1;
wire   [7:0] trunc_ln39_fu_247_p1;
wire   [1:0] trunc_ln_fu_215_p4;
wire   [9:0] tmp_fu_225_p3;
wire   [3:0] or_ln41_fu_263_p2;
wire   [3:0] or_ln43_fu_293_p2;
wire   [3:0] or_ln45_fu_303_p2;
reg   [31:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

HashUpdate_2_1_temp #(
    .DataWidth( 8 ),
    .AddressRange( 75 ),
    .AddressWidth( 7 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(temp_d1)
);

KeccakWidth1600_Spon_9 grp_KeccakWidth1600_Spon_9_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakWidth1600_Spon_9_fu_174_ap_start),
    .ap_done(grp_KeccakWidth1600_Spon_9_fu_174_ap_done),
    .ap_idle(grp_KeccakWidth1600_Spon_9_fu_174_ap_idle),
    .ap_ready(grp_KeccakWidth1600_Spon_9_fu_174_ap_ready),
    .instance_state_address0(grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0),
    .instance_state_ce0(grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0),
    .instance_state_we0(grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0),
    .instance_state_d0(grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0),
    .instance_state_q0(ctx_sponge_state_q0),
    .instance_byteIOIndex_read(ctx_sponge_byteIOInd),
    .data_address0(grp_KeccakWidth1600_Spon_9_fu_174_data_address0),
    .data_ce0(grp_KeccakWidth1600_Spon_9_fu_174_data_ce0),
    .data_q0(temp_q0),
    .ap_return(grp_KeccakWidth1600_Spon_9_fu_174_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_return_preg <= grp_KeccakWidth1600_Spon_9_fu_174_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_52_fu_207_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakWidth1600_Spon_9_fu_174_ap_ready == 1'b1)) begin
            grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_197_p2 == 1'd1))) begin
        loop_0_reg_163 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_0_reg_163 <= loop_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln34_reg_152 <= add_ln34_fu_186_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln34_reg_152 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_52_fu_207_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        loop_reg_351 <= loop_fu_241_p2;
        trunc_ln37_reg_344 <= trunc_ln37_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln2_reg_356 <= {{data_q0[23:16]}};
        trunc_ln3_reg_361 <= {{data_q0[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln37_reg_331[4 : 0] <= zext_ln37_fu_203_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_KeccakWidth1600_Spon_9_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_return = grp_KeccakWidth1600_Spon_9_fu_174_ap_return;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address0 = zext_ln45_fu_308_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address0 = zext_ln37_reg_331;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_address0 = zext_ln34_fu_192_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address0 = grp_KeccakWidth1600_Spon_9_fu_174_data_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address1 = zext_ln43_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address1 = zext_ln41_fu_268_p1;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_ce0 = grp_KeccakWidth1600_Spon_9_fu_174_data_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d0 = trunc_ln3_reg_361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d0 = trunc_ln39_fu_247_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_d0 = 8'd0;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d1 = trunc_ln2_reg_356;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d1 = {{data_q0[15:8]}};
    end else begin
        temp_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_we1 = 1'b1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln34_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_52_fu_207_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_KeccakWidth1600_Spon_9_fu_174_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_186_p2 = (phi_ln34_reg_152 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ctx_sponge_state_address0 = grp_KeccakWidth1600_Spon_9_fu_174_instance_state_address0;

assign ctx_sponge_state_ce0 = grp_KeccakWidth1600_Spon_9_fu_174_instance_state_ce0;

assign ctx_sponge_state_d0 = grp_KeccakWidth1600_Spon_9_fu_174_instance_state_d0;

assign ctx_sponge_state_we0 = grp_KeccakWidth1600_Spon_9_fu_174_instance_state_we0;

assign data_address0 = zext_ln38_fu_232_p1;

assign grp_KeccakWidth1600_Spon_9_fu_174_ap_start = grp_KeccakWidth1600_Spon_9_fu_174_ap_start_reg;

assign icmp_ln34_fu_197_p2 = ((phi_ln34_reg_152 == 7'd74) ? 1'b1 : 1'b0);

assign loop_fu_241_p2 = (5'd4 + loop_0_reg_163);

assign or_ln41_fu_263_p2 = (trunc_ln37_reg_344 | 4'd1);

assign or_ln43_fu_293_p2 = (trunc_ln37_reg_344 | 4'd2);

assign or_ln45_fu_303_p2 = (trunc_ln37_reg_344 | 4'd3);

assign tmp_52_fu_207_p3 = loop_0_reg_163[32'd4];

assign tmp_fu_225_p3 = {{data_offset}, {trunc_ln_fu_215_p4}};

assign trunc_ln37_fu_237_p1 = loop_0_reg_163[3:0];

assign trunc_ln39_fu_247_p1 = data_q0[7:0];

assign trunc_ln_fu_215_p4 = {{loop_0_reg_163[3:2]}};

assign zext_ln34_fu_192_p1 = phi_ln34_reg_152;

assign zext_ln37_fu_203_p1 = loop_0_reg_163;

assign zext_ln38_fu_232_p1 = tmp_fu_225_p3;

assign zext_ln41_fu_268_p1 = or_ln41_fu_263_p2;

assign zext_ln43_fu_298_p1 = or_ln43_fu_293_p2;

assign zext_ln45_fu_308_p1 = or_ln45_fu_303_p2;

always @ (posedge ap_clk) begin
    zext_ln37_reg_331[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //HashUpdate_2_1
