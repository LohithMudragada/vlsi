// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module deserializeSignature (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_we0,
        sig_0_proofs_seed1_d0,
        sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_we0,
        sig_0_proofs_seed2_d0,
        sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_we0,
        sig_0_proofs_inputS_d0,
        sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_we0,
        sig_0_proofs_commun_d0,
        sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_we0,
        sig_0_proofs_view3C_d0,
        sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0,
        sig_0_challengeBits_we0,
        sig_0_challengeBits_d0,
        sig_0_challengeBits_q0,
        sig_0_salt_address0,
        sig_0_salt_ce0,
        sig_0_salt_we0,
        sig_0_salt_d0,
        sigBytes_address0,
        sigBytes_ce0,
        sigBytes_q0,
        sigBytes_address1,
        sigBytes_ce1,
        sigBytes_q1,
        sigBytes_offset,
        sigBytesLen,
        params_UnruhGWithout,
        params_transform_rea,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 25'd4096;
parameter    ap_ST_fsm_state15 = 25'd8192;
parameter    ap_ST_fsm_pp1_stage0 = 25'd16384;
parameter    ap_ST_fsm_state18 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_pp2_stage0 = 25'd262144;
parameter    ap_ST_fsm_state23 = 25'd524288;
parameter    ap_ST_fsm_state24 = 25'd1048576;
parameter    ap_ST_fsm_state25 = 25'd2097152;
parameter    ap_ST_fsm_state26 = 25'd4194304;
parameter    ap_ST_fsm_state27 = 25'd8388608;
parameter    ap_ST_fsm_state28 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sig_0_proofs_seed1_address0;
output   sig_0_proofs_seed1_ce0;
output   sig_0_proofs_seed1_we0;
output  [7:0] sig_0_proofs_seed1_d0;
output  [11:0] sig_0_proofs_seed2_address0;
output   sig_0_proofs_seed2_ce0;
output   sig_0_proofs_seed2_we0;
output  [7:0] sig_0_proofs_seed2_d0;
output  [9:0] sig_0_proofs_inputS_address0;
output   sig_0_proofs_inputS_ce0;
output   sig_0_proofs_inputS_we0;
output  [31:0] sig_0_proofs_inputS_d0;
output  [14:0] sig_0_proofs_commun_address0;
output   sig_0_proofs_commun_ce0;
output   sig_0_proofs_commun_we0;
output  [7:0] sig_0_proofs_commun_d0;
output  [12:0] sig_0_proofs_view3C_address0;
output   sig_0_proofs_view3C_ce0;
output   sig_0_proofs_view3C_we0;
output  [7:0] sig_0_proofs_view3C_d0;
output  [5:0] sig_0_challengeBits_address0;
output   sig_0_challengeBits_ce0;
output   sig_0_challengeBits_we0;
output  [7:0] sig_0_challengeBits_d0;
input  [7:0] sig_0_challengeBits_q0;
output  [4:0] sig_0_salt_address0;
output   sig_0_salt_ce0;
output   sig_0_salt_we0;
output  [7:0] sig_0_salt_d0;
output  [15:0] sigBytes_address0;
output   sigBytes_ce0;
input  [7:0] sigBytes_q0;
output  [15:0] sigBytes_address1;
output   sigBytes_ce1;
input  [7:0] sigBytes_q1;
input  [63:0] sigBytes_offset;
input  [31:0] sigBytesLen;
input  [6:0] params_UnruhGWithout;
input  [1:0] params_transform_rea;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sig_0_proofs_seed1_ce0;
reg sig_0_proofs_seed1_we0;
reg sig_0_proofs_seed2_ce0;
reg sig_0_proofs_seed2_we0;
reg sig_0_proofs_inputS_ce0;
reg sig_0_proofs_inputS_we0;
reg sig_0_proofs_commun_ce0;
reg sig_0_proofs_commun_we0;
reg sig_0_proofs_view3C_ce0;
reg sig_0_proofs_view3C_we0;
reg[5:0] sig_0_challengeBits_address0;
reg sig_0_challengeBits_ce0;
reg sig_0_challengeBits_we0;
reg sig_0_salt_ce0;
reg sig_0_salt_we0;
reg[15:0] sigBytes_address0;
reg sigBytes_ce0;
reg[15:0] sigBytes_address1;
reg sigBytes_ce1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] loop_2_reg_520;
reg   [6:0] loop_3_reg_532;
reg   [4:0] loop_5_reg_555;
wire   [63:0] sigBytesLen_cast1_fu_610_p1;
reg   [63:0] sigBytesLen_cast1_reg_1497;
wire   [16:0] trunc_ln54_fu_620_p1;
reg   [16:0] trunc_ln54_reg_1505;
wire   [0:0] icmp_ln1969_fu_614_p2;
wire   [7:0] i_10_fu_630_p2;
reg   [7:0] i_10_reg_1520;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln386_fu_636_p1;
reg   [1:0] trunc_ln386_reg_1525;
wire   [0:0] icmp_ln1940_fu_624_p2;
wire   [63:0] bytesExpected_fu_664_p2;
reg   [63:0] bytesExpected_reg_1535;
wire   [15:0] mul_ln1978_fu_673_p2;
reg   [15:0] mul_ln1978_reg_1541;
wire   [63:0] inputShareSize_2_fu_758_p3;
wire    ap_CS_fsm_state3;
wire   [5:0] loop_fu_795_p2;
reg   [5:0] loop_reg_1557;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln2040_fu_789_p2;
wire   [7:0] i_11_fu_826_p2;
reg   [7:0] i_11_reg_1570;
wire    ap_CS_fsm_state7;
wire   [1:0] trunc_ln386_4_fu_832_p1;
reg   [1:0] trunc_ln386_4_reg_1575;
wire   [0:0] icmp_ln1951_fu_820_p2;
wire   [5:0] loop_28_fu_918_p2;
reg   [5:0] loop_28_reg_1591;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln2049_fu_912_p2;
wire   [14:0] add_ln2053_fu_953_p2;
reg   [14:0] add_ln2053_reg_1601;
wire    ap_CS_fsm_state11;
wire   [7:0] i_fu_965_p2;
reg   [7:0] i_reg_1609;
wire   [0:0] icmp_ln2053_fu_959_p2;
wire   [12:0] zext_ln2059_fu_998_p1;
reg   [12:0] zext_ln2059_reg_1619;
wire    ap_CS_fsm_state12;
wire   [13:0] zext_ln2053_1_fu_1010_p1;
reg   [13:0] zext_ln2053_1_reg_1625;
wire   [2:0] zext_ln386_fu_1074_p1;
reg   [2:0] zext_ln386_reg_1630;
wire   [16:0] add_ln2059_fu_1078_p2;
reg   [16:0] add_ln2059_reg_1635;
wire   [0:0] icmp_ln2058_fu_1083_p2;
reg   [0:0] icmp_ln2058_reg_1643;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] loop_29_fu_1089_p2;
reg   [5:0] loop_29_reg_1647;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln2071_fu_1133_p2;
reg   [0:0] icmp_ln2071_reg_1657;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [6:0] loop_30_fu_1139_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [14:0] add_ln2072_fu_1149_p2;
reg   [14:0] add_ln2072_reg_1666;
wire   [0:0] icmp_ln2076_fu_1183_p2;
wire    ap_CS_fsm_state19;
wire   [4:0] loop_31_fu_1189_p2;
reg   [4:0] loop_31_reg_1680;
wire   [0:0] icmp_ln2081_fu_1237_p2;
reg   [0:0] icmp_ln2081_reg_1690;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [4:0] loop_32_fu_1243_p2;
reg   [4:0] loop_32_reg_1694;
reg    ap_enable_reg_pp2_iter0;
wire   [15:0] add_ln2088_fu_1312_p2;
reg   [15:0] add_ln2088_reg_1707;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln2085_fu_1306_p2;
wire    ap_CS_fsm_state24;
wire   [0:0] tmp_47_fu_1318_p3;
wire   [16:0] add_ln2088_6_fu_1401_p2;
reg   [16:0] add_ln2088_6_reg_1728;
wire   [16:0] add_ln2088_8_fu_1425_p2;
reg   [16:0] add_ln2088_8_reg_1733;
reg   [1:0] trunc_ln2088_4_reg_1738;
wire   [4:0] loop_33_fu_1440_p2;
reg   [4:0] loop_33_reg_1743;
reg   [7:0] sigBytes_load_6_reg_1748;
wire    ap_CS_fsm_state25;
reg   [7:0] sigBytes_load_7_reg_1753;
wire   [15:0] add_ln2089_fu_1481_p2;
wire    ap_CS_fsm_state27;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state15;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
reg    ap_enable_reg_pp2_iter1;
reg   [63:0] inputShareSize_reg_426;
reg   [7:0] round_assign_reg_438;
reg   [5:0] loop_0_reg_449;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1980_fu_784_p2;
reg   [7:0] round_assign_1_reg_461;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln1953_fu_906_p2;
reg   [5:0] loop_1_reg_472;
wire    ap_CS_fsm_state10;
reg   [15:0] p_01_rec_reg_484;
reg   [7:0] round_assign_2_reg_496;
reg   [14:0] phi_mul_reg_508;
reg   [5:0] ap_phi_mux_loop_2_phi_fu_524_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] loop_4_reg_543;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state18;
reg   [4:0] ap_phi_mux_loop_5_phi_fu_559_p4;
wire    ap_block_pp2_stage0;
reg   [4:0] loop_6_reg_567;
wire    ap_CS_fsm_state26;
reg   [7:0] p_sum5_pn_reg_578;
reg   [0:0] p_0_reg_591;
wire   [63:0] zext_ln54_13_fu_659_p1;
wire   [63:0] zext_ln2041_2_fu_810_p1;
wire   [63:0] zext_ln2041_fu_815_p1;
wire   [63:0] zext_ln54_12_fu_846_p1;
wire   [63:0] zext_ln2050_3_fu_943_p1;
wire   [63:0] zext_ln2050_fu_948_p1;
wire   [63:0] zext_ln54_14_fu_981_p1;
wire   [63:0] zext_ln2059_3_fu_1114_p1;
wire   [63:0] zext_ln2059_5_fu_1128_p1;
wire   [63:0] zext_ln2072_3_fu_1174_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln2072_4_fu_1179_p1;
wire   [63:0] zext_ln2077_3_fu_1218_p1;
wire   [63:0] zext_ln2077_4_fu_1232_p1;
wire   [63:0] zext_ln2082_3_fu_1272_p1;
wire   [63:0] zext_ln2082_4_fu_1286_p1;
wire   [63:0] zext_ln2088_2_fu_1344_p1;
wire   [63:0] zext_ln2088_5_fu_1377_p1;
wire   [63:0] zext_ln2088_8_fu_1446_p1;
wire   [63:0] zext_ln2088_11_fu_1450_p1;
wire   [63:0] zext_ln2088_12_fu_1472_p1;
wire   [5:0] trunc_ln_fu_640_p4;
wire   [16:0] zext_ln54_fu_650_p1;
wire   [16:0] add_ln54_fu_654_p2;
wire   [6:0] mul_ln1978_fu_673_p1;
wire   [2:0] shl_ln_fu_679_p3;
wire   [2:0] xor_ln54_fu_686_p2;
wire   [7:0] zext_ln54_15_fu_692_p1;
wire   [7:0] lshr_ln54_fu_696_p2;
wire   [2:0] xor_ln54_2_fu_706_p2;
wire   [7:0] zext_ln54_16_fu_712_p1;
wire   [7:0] lshr_ln54_8_fu_716_p2;
wire   [0:0] trunc_ln386_3_fu_702_p1;
wire   [0:0] trunc_ln54_9_fu_722_p1;
wire   [1:0] challenge_fu_726_p3;
wire   [0:0] icmp_ln1942_fu_734_p2;
wire   [0:0] icmp_ln1942_1_fu_740_p2;
wire   [0:0] or_ln1942_fu_746_p2;
wire   [63:0] inputShareSize_1_fu_752_p2;
wire   [63:0] zext_ln1978_fu_769_p1;
wire   [0:0] trunc_ln1977_fu_766_p1;
wire   [63:0] bytesExpected_1_fu_772_p2;
wire   [63:0] bytesExpected_2_fu_777_p3;
wire   [16:0] zext_ln2041_1_fu_801_p1;
wire   [16:0] add_ln2041_fu_805_p2;
wire   [5:0] trunc_ln54_6_fu_836_p4;
wire   [2:0] bitNumber_assign_fu_851_p3;
wire   [2:0] xor_ln54_3_fu_858_p2;
wire   [7:0] zext_ln54_17_fu_864_p1;
wire   [7:0] lshr_ln54_9_fu_868_p2;
wire   [2:0] xor_ln54_4_fu_878_p2;
wire   [7:0] zext_ln54_18_fu_884_p1;
wire   [7:0] lshr_ln54_10_fu_888_p2;
wire   [0:0] trunc_ln386_5_fu_874_p1;
wire   [0:0] trunc_ln54_10_fu_894_p1;
wire   [1:0] challenge_1_fu_898_p3;
wire   [6:0] zext_ln2050_1_fu_924_p1;
wire   [6:0] add_ln2050_fu_928_p2;
wire   [16:0] zext_ln2050_2_fu_934_p1;
wire   [16:0] add_ln2050_1_fu_938_p2;
wire   [5:0] trunc_ln54_8_fu_971_p4;
wire   [11:0] tmp_21_fu_990_p3;
wire   [12:0] tmp_22_fu_1002_p3;
wire   [1:0] trunc_ln386_6_fu_1014_p1;
wire   [2:0] bitNumber_assign_3_fu_1018_p3;
wire   [2:0] xor_ln54_5_fu_1026_p2;
wire   [7:0] zext_ln54_19_fu_1032_p1;
wire   [7:0] lshr_ln54_11_fu_1036_p2;
wire   [2:0] xor_ln54_6_fu_1046_p2;
wire   [7:0] zext_ln54_20_fu_1052_p1;
wire   [7:0] lshr_ln54_12_fu_1056_p2;
wire   [0:0] trunc_ln386_7_fu_1042_p1;
wire   [0:0] trunc_ln54_11_fu_1062_p1;
wire   [1:0] challenge_2_fu_1066_p3;
wire   [16:0] zext_ln2053_fu_986_p1;
wire   [6:0] zext_ln2059_1_fu_1095_p1;
wire   [6:0] add_ln2059_2_fu_1099_p2;
wire   [16:0] zext_ln2059_2_fu_1105_p1;
wire   [16:0] add_ln2059_1_fu_1109_p2;
wire   [13:0] zext_ln2059_4_fu_1119_p1;
wire   [13:0] add_ln2059_3_fu_1123_p2;
wire   [14:0] zext_ln2072_fu_1145_p1;
wire   [7:0] zext_ln2072_1_fu_1155_p1;
wire   [7:0] add_ln2072_1_fu_1159_p2;
wire   [16:0] zext_ln2072_2_fu_1165_p1;
wire   [16:0] add_ln2072_2_fu_1169_p2;
wire   [6:0] zext_ln2077_1_fu_1195_p1;
wire   [6:0] add_ln2077_1_fu_1199_p2;
wire  signed [7:0] sext_ln2077_fu_1205_p1;
wire   [16:0] zext_ln2077_2_fu_1209_p1;
wire   [16:0] add_ln2077_2_fu_1213_p2;
wire   [12:0] zext_ln2077_fu_1223_p1;
wire   [12:0] add_ln2077_fu_1227_p2;
wire   [6:0] zext_ln2082_1_fu_1249_p1;
wire   [6:0] add_ln2082_1_fu_1253_p2;
wire  signed [7:0] sext_ln2082_fu_1259_p1;
wire   [16:0] zext_ln2082_2_fu_1263_p1;
wire   [16:0] add_ln2082_2_fu_1267_p2;
wire   [12:0] zext_ln2082_fu_1277_p1;
wire   [12:0] add_ln2082_fu_1281_p2;
wire   [2:0] add_ln2085_fu_1291_p2;
wire   [1:0] tmp_fu_1296_p4;
wire   [15:0] zext_ln2088_fu_1326_p1;
wire   [15:0] add_ln2088_1_fu_1330_p2;
wire   [16:0] zext_ln2088_1_fu_1335_p1;
wire   [16:0] add_ln2088_2_fu_1339_p2;
wire   [3:0] trunc_ln2087_fu_1349_p1;
wire   [3:0] or_ln2088_fu_1353_p2;
wire   [15:0] zext_ln2088_3_fu_1359_p1;
wire   [15:0] add_ln2088_3_fu_1363_p2;
wire   [16:0] zext_ln2088_4_fu_1368_p1;
wire   [16:0] add_ln2088_4_fu_1372_p2;
wire   [3:0] or_ln2088_1_fu_1382_p2;
wire   [15:0] zext_ln2088_6_fu_1388_p1;
wire   [15:0] add_ln2088_5_fu_1392_p2;
wire   [16:0] zext_ln2088_7_fu_1397_p1;
wire   [3:0] or_ln2088_2_fu_1406_p2;
wire   [15:0] zext_ln2088_9_fu_1412_p1;
wire   [15:0] add_ln2088_7_fu_1416_p2;
wire   [16:0] zext_ln2088_10_fu_1421_p1;
wire   [9:0] tmp_23_fu_1465_p3;
wire   [15:0] zext_ln2089_fu_1477_p1;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state28;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [15:0] mul_ln1978_fu_673_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state16))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state16);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2076_fu_1183_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state21);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2076_fu_1183_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_return_preg <= p_0_reg_591;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd0))) begin
        inputShareSize_reg_426 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inputShareSize_reg_426 <= inputShareSize_2_fu_758_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1980_fu_784_p2 == 1'd0))) begin
        loop_0_reg_449 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        loop_0_reg_449 <= loop_reg_1557;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_820_p2 == 1'd0))) begin
        loop_1_reg_472 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_1_reg_472 <= loop_28_reg_1591;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2058_reg_1643 == 1'd0))) begin
        loop_2_reg_520 <= loop_29_reg_1647;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_2_reg_520 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        loop_3_reg_532 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2071_fu_1133_p2 == 1'd0))) begin
        loop_3_reg_532 <= loop_30_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        loop_4_reg_543 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_4_reg_543 <= loop_31_reg_1680;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2076_fu_1183_p2 == 1'd1))) begin
        loop_5_reg_555 <= 5'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2081_reg_1690 == 1'd0))) begin
        loop_5_reg_555 <= loop_32_reg_1694;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln2085_fu_1306_p2 == 1'd1))) begin
        loop_6_reg_567 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        loop_6_reg_567 <= loop_33_reg_1743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2049_fu_912_p2 == 1'd1))) begin
        p_01_rec_reg_484 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        p_01_rec_reg_484 <= add_ln2089_fu_1481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln2053_fu_959_p2 == 1'd1))) begin
        p_0_reg_591 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_906_p2 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln1980_fu_784_p2 == 1'd1)))) begin
        p_0_reg_591 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_47_fu_1318_p3 == 1'd1))) begin
                p_sum5_pn_reg_578[4] <= 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln2085_fu_1306_p2 == 1'd0))) begin
                p_sum5_pn_reg_578[4] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2049_fu_912_p2 == 1'd1))) begin
        phi_mul_reg_508 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_mul_reg_508 <= add_ln2053_reg_1601;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln2040_fu_789_p2 == 1'd1))) begin
        round_assign_1_reg_461 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_906_p2 == 1'd0))) begin
        round_assign_1_reg_461 <= i_11_reg_1570;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2049_fu_912_p2 == 1'd1))) begin
        round_assign_2_reg_496 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        round_assign_2_reg_496 <= i_reg_1609;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd0))) begin
        round_assign_reg_438 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        round_assign_reg_438 <= i_10_reg_1520;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln2053_reg_1601 <= add_ln2053_fu_953_p2;
        i_reg_1609 <= i_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln2059_reg_1635 <= add_ln2059_fu_1078_p2;
        zext_ln2053_1_reg_1625[12 : 5] <= zext_ln2053_1_fu_1010_p1[12 : 5];
        zext_ln2059_reg_1619[11 : 4] <= zext_ln2059_fu_998_p1[11 : 4];
        zext_ln386_reg_1630[1 : 0] <= zext_ln386_fu_1074_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2071_fu_1133_p2 == 1'd0))) begin
        add_ln2072_reg_1666 <= add_ln2072_fu_1149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_47_fu_1318_p3 == 1'd0))) begin
        add_ln2088_6_reg_1728 <= add_ln2088_6_fu_1401_p2;
        add_ln2088_8_reg_1733 <= add_ln2088_8_fu_1425_p2;
        loop_33_reg_1743 <= loop_33_fu_1440_p2;
        trunc_ln2088_4_reg_1738 <= {{loop_6_reg_567[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln2085_fu_1306_p2 == 1'd1))) begin
        add_ln2088_reg_1707 <= add_ln2088_fu_1312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_624_p2 == 1'd1))) begin
        bytesExpected_reg_1535 <= bytesExpected_fu_664_p2;
        mul_ln1978_reg_1541 <= mul_ln1978_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_1520 <= i_10_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_11_reg_1570 <= i_11_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2058_reg_1643 <= icmp_ln2058_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln2071_reg_1657 <= icmp_ln2071_fu_1133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln2081_reg_1690 <= icmp_ln2081_fu_1237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_28_reg_1591 <= loop_28_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_29_reg_1647 <= loop_29_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        loop_31_reg_1680 <= loop_31_fu_1189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_32_reg_1694 <= loop_32_fu_1243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_reg_1557 <= loop_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sigBytesLen_cast1_reg_1497[31 : 0] <= sigBytesLen_cast1_fu_610_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sigBytes_load_6_reg_1748 <= sigBytes_q0;
        sigBytes_load_7_reg_1753 <= sigBytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_820_p2 == 1'd1))) begin
        trunc_ln386_4_reg_1575 <= trunc_ln386_4_fu_832_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_624_p2 == 1'd0))) begin
        trunc_ln386_reg_1525 <= trunc_ln386_fu_636_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd0))) begin
        trunc_ln54_reg_1505 <= trunc_ln54_fu_620_p1;
    end
end

always @ (*) begin
    if ((icmp_ln2058_fu_1083_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2071_fu_1133_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2081_fu_1237_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2058_reg_1643 == 1'd0))) begin
        ap_phi_mux_loop_2_phi_fu_524_p4 = loop_29_reg_1647;
    end else begin
        ap_phi_mux_loop_2_phi_fu_524_p4 = loop_2_reg_520;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2081_reg_1690 == 1'd0))) begin
        ap_phi_mux_loop_5_phi_fu_559_p4 = loop_32_reg_1694;
    end else begin
        ap_phi_mux_loop_5_phi_fu_559_p4 = loop_5_reg_555;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_return = p_0_reg_591;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sigBytes_address0 = zext_ln2088_11_fu_1450_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        sigBytes_address0 = zext_ln2088_2_fu_1344_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sigBytes_address0 = zext_ln2082_3_fu_1272_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sigBytes_address0 = zext_ln2077_3_fu_1218_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sigBytes_address0 = zext_ln2072_3_fu_1174_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sigBytes_address0 = zext_ln2059_3_fu_1114_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sigBytes_address0 = zext_ln2050_3_fu_943_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sigBytes_address0 = zext_ln2041_2_fu_810_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sigBytes_address0 = zext_ln54_13_fu_659_p1;
    end else begin
        sigBytes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sigBytes_address1 = zext_ln2088_8_fu_1446_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        sigBytes_address1 = zext_ln2088_5_fu_1377_p1;
    end else begin
        sigBytes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sigBytes_ce0 = 1'b1;
    end else begin
        sigBytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        sigBytes_ce1 = 1'b1;
    end else begin
        sigBytes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sig_0_challengeBits_address0 = zext_ln54_14_fu_981_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sig_0_challengeBits_address0 = zext_ln54_12_fu_846_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sig_0_challengeBits_address0 = zext_ln2041_fu_815_p1;
    end else begin
        sig_0_challengeBits_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        sig_0_challengeBits_ce0 = 1'b1;
    end else begin
        sig_0_challengeBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sig_0_challengeBits_we0 = 1'b1;
    end else begin
        sig_0_challengeBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sig_0_proofs_commun_ce0 = 1'b1;
    end else begin
        sig_0_proofs_commun_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2071_reg_1657 == 1'd0))) begin
        sig_0_proofs_commun_we0 = 1'b1;
    end else begin
        sig_0_proofs_commun_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sig_0_proofs_inputS_ce0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sig_0_proofs_inputS_we0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sig_0_proofs_seed1_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sig_0_proofs_seed1_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sig_0_proofs_seed2_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2081_reg_1690 == 1'd0))) begin
        sig_0_proofs_seed2_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sig_0_proofs_view3C_ce0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2058_reg_1643 == 1'd0))) begin
        sig_0_proofs_view3C_we0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sig_0_salt_ce0 = 1'b1;
    end else begin
        sig_0_salt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sig_0_salt_we0 = 1'b1;
    end else begin
        sig_0_salt_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1969_fu_614_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_624_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1980_fu_784_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln2040_fu_789_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln1951_fu_820_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1953_fu_906_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln2049_fu_912_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln2053_fu_959_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln2058_fu_1083_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln2058_fu_1083_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln2071_fu_1133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln2071_fu_1133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln2076_fu_1183_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln2081_fu_1237_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln2081_fu_1237_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln2085_fu_1306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (tmp_47_fu_1318_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2041_fu_805_p2 = (zext_ln2041_1_fu_801_p1 + trunc_ln54_reg_1505);

assign add_ln2050_1_fu_938_p2 = (zext_ln2050_2_fu_934_p1 + trunc_ln54_reg_1505);

assign add_ln2050_fu_928_p2 = (zext_ln2050_1_fu_924_p1 + 7'd55);

assign add_ln2053_fu_953_p2 = (phi_mul_reg_508 + 15'd75);

assign add_ln2059_1_fu_1109_p2 = (add_ln2059_reg_1635 + zext_ln2059_2_fu_1105_p1);

assign add_ln2059_2_fu_1099_p2 = ($signed(zext_ln2059_1_fu_1095_p1) + $signed(7'd87));

assign add_ln2059_3_fu_1123_p2 = (zext_ln2053_1_reg_1625 + zext_ln2059_4_fu_1119_p1);

assign add_ln2059_fu_1078_p2 = (trunc_ln54_reg_1505 + zext_ln2053_fu_986_p1);

assign add_ln2072_1_fu_1159_p2 = (zext_ln2072_1_fu_1155_p1 + 8'd119);

assign add_ln2072_2_fu_1169_p2 = (add_ln2059_reg_1635 + zext_ln2072_2_fu_1165_p1);

assign add_ln2072_fu_1149_p2 = (phi_mul_reg_508 + zext_ln2072_fu_1145_p1);

assign add_ln2077_1_fu_1199_p2 = ($signed(zext_ln2077_1_fu_1195_p1) + $signed(7'd66));

assign add_ln2077_2_fu_1213_p2 = (add_ln2059_reg_1635 + zext_ln2077_2_fu_1209_p1);

assign add_ln2077_fu_1227_p2 = (zext_ln2059_reg_1619 + zext_ln2077_fu_1223_p1);

assign add_ln2082_1_fu_1253_p2 = ($signed(zext_ln2082_1_fu_1249_p1) + $signed(7'd82));

assign add_ln2082_2_fu_1267_p2 = (add_ln2059_reg_1635 + zext_ln2082_2_fu_1263_p1);

assign add_ln2082_fu_1281_p2 = (zext_ln2059_reg_1619 + zext_ln2082_fu_1277_p1);

assign add_ln2085_fu_1291_p2 = ($signed(zext_ln386_reg_1630) + $signed(3'd7));

assign add_ln2088_1_fu_1330_p2 = (zext_ln2088_fu_1326_p1 + add_ln2088_reg_1707);

assign add_ln2088_2_fu_1339_p2 = (trunc_ln54_reg_1505 + zext_ln2088_1_fu_1335_p1);

assign add_ln2088_3_fu_1363_p2 = (zext_ln2088_3_fu_1359_p1 + add_ln2088_reg_1707);

assign add_ln2088_4_fu_1372_p2 = (trunc_ln54_reg_1505 + zext_ln2088_4_fu_1368_p1);

assign add_ln2088_5_fu_1392_p2 = (zext_ln2088_6_fu_1388_p1 + add_ln2088_reg_1707);

assign add_ln2088_6_fu_1401_p2 = (trunc_ln54_reg_1505 + zext_ln2088_7_fu_1397_p1);

assign add_ln2088_7_fu_1416_p2 = (zext_ln2088_9_fu_1412_p1 + add_ln2088_reg_1707);

assign add_ln2088_8_fu_1425_p2 = (trunc_ln54_reg_1505 + zext_ln2088_10_fu_1421_p1);

assign add_ln2088_fu_1312_p2 = (p_01_rec_reg_484 + 16'd226);

assign add_ln2089_fu_1481_p2 = (zext_ln2089_fu_1477_p1 + p_01_rec_reg_484);

assign add_ln54_fu_654_p2 = (trunc_ln54_reg_1505 + zext_ln54_fu_650_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitNumber_assign_3_fu_1018_p3 = {{trunc_ln386_6_fu_1014_p1}, {1'd0}};

assign bitNumber_assign_fu_851_p3 = {{trunc_ln386_4_reg_1575}, {1'd0}};

assign bytesExpected_1_fu_772_p2 = (bytesExpected_reg_1535 + zext_ln1978_fu_769_p1);

assign bytesExpected_2_fu_777_p3 = ((trunc_ln1977_fu_766_p1[0:0] === 1'b1) ? bytesExpected_1_fu_772_p2 : bytesExpected_reg_1535);

assign bytesExpected_fu_664_p2 = (64'd30528 + inputShareSize_reg_426);

assign challenge_1_fu_898_p3 = {{trunc_ln386_5_fu_874_p1}, {trunc_ln54_10_fu_894_p1}};

assign challenge_2_fu_1066_p3 = {{trunc_ln386_7_fu_1042_p1}, {trunc_ln54_11_fu_1062_p1}};

assign challenge_fu_726_p3 = {{trunc_ln386_3_fu_702_p1}, {trunc_ln54_9_fu_722_p1}};

assign i_10_fu_630_p2 = (round_assign_reg_438 + 8'd1);

assign i_11_fu_826_p2 = (round_assign_1_reg_461 + 8'd1);

assign i_fu_965_p2 = (round_assign_2_reg_496 + 8'd1);

assign icmp_ln1940_fu_624_p2 = ((round_assign_reg_438 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1942_1_fu_740_p2 = ((challenge_fu_726_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1942_fu_734_p2 = ((challenge_fu_726_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln1951_fu_820_p2 = ((round_assign_1_reg_461 < 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1953_fu_906_p2 = ((challenge_1_fu_898_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1969_fu_614_p2 = ((sigBytesLen < 32'd55) ? 1'b1 : 1'b0);

assign icmp_ln1980_fu_784_p2 = ((bytesExpected_2_fu_777_p3 > sigBytesLen_cast1_reg_1497) ? 1'b1 : 1'b0);

assign icmp_ln2040_fu_789_p2 = ((loop_0_reg_449 == 6'd55) ? 1'b1 : 1'b0);

assign icmp_ln2049_fu_912_p2 = ((loop_1_reg_472 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2053_fu_959_p2 = ((round_assign_2_reg_496 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln2058_fu_1083_p2 = ((ap_phi_mux_loop_2_phi_fu_524_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2071_fu_1133_p2 = ((loop_3_reg_532 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln2076_fu_1183_p2 = ((loop_4_reg_543 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2081_fu_1237_p2 = ((ap_phi_mux_loop_5_phi_fu_559_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2085_fu_1306_p2 = ((tmp_fu_1296_p4 == 2'd0) ? 1'b1 : 1'b0);

assign inputShareSize_1_fu_752_p2 = (64'd16 + inputShareSize_reg_426);

assign inputShareSize_2_fu_758_p3 = ((or_ln1942_fu_746_p2[0:0] === 1'b1) ? inputShareSize_1_fu_752_p2 : inputShareSize_reg_426);

assign loop_28_fu_918_p2 = (loop_1_reg_472 + 6'd1);

assign loop_29_fu_1089_p2 = (ap_phi_mux_loop_2_phi_fu_524_p4 + 6'd1);

assign loop_30_fu_1139_p2 = (loop_3_reg_532 + 7'd1);

assign loop_31_fu_1189_p2 = (loop_4_reg_543 + 5'd1);

assign loop_32_fu_1243_p2 = (ap_phi_mux_loop_5_phi_fu_559_p4 + 5'd1);

assign loop_33_fu_1440_p2 = (5'd4 + loop_6_reg_567);

assign loop_fu_795_p2 = (loop_0_reg_449 + 6'd1);

assign lshr_ln54_10_fu_888_p2 = sig_0_challengeBits_q0 >> zext_ln54_18_fu_884_p1;

assign lshr_ln54_11_fu_1036_p2 = sig_0_challengeBits_q0 >> zext_ln54_19_fu_1032_p1;

assign lshr_ln54_12_fu_1056_p2 = sig_0_challengeBits_q0 >> zext_ln54_20_fu_1052_p1;

assign lshr_ln54_8_fu_716_p2 = sigBytes_q0 >> zext_ln54_16_fu_712_p1;

assign lshr_ln54_9_fu_868_p2 = sig_0_challengeBits_q0 >> zext_ln54_17_fu_864_p1;

assign lshr_ln54_fu_696_p2 = sigBytes_q0 >> zext_ln54_15_fu_692_p1;

assign mul_ln1978_fu_673_p1 = mul_ln1978_fu_673_p10;

assign mul_ln1978_fu_673_p10 = params_UnruhGWithout;

assign mul_ln1978_fu_673_p2 = (16'd219 * mul_ln1978_fu_673_p1);

assign or_ln1942_fu_746_p2 = (icmp_ln1942_fu_734_p2 | icmp_ln1942_1_fu_740_p2);

assign or_ln2088_1_fu_1382_p2 = (trunc_ln2087_fu_1349_p1 | 4'd2);

assign or_ln2088_2_fu_1406_p2 = (trunc_ln2087_fu_1349_p1 | 4'd3);

assign or_ln2088_fu_1353_p2 = (trunc_ln2087_fu_1349_p1 | 4'd1);

assign sext_ln2077_fu_1205_p1 = $signed(add_ln2077_1_fu_1199_p2);

assign sext_ln2082_fu_1259_p1 = $signed(add_ln2082_1_fu_1253_p2);

assign shl_ln_fu_679_p3 = {{trunc_ln386_reg_1525}, {1'd0}};

assign sigBytesLen_cast1_fu_610_p1 = sigBytesLen;

assign sig_0_challengeBits_d0 = sigBytes_q0;

assign sig_0_proofs_commun_address0 = zext_ln2072_4_fu_1179_p1;

assign sig_0_proofs_commun_d0 = sigBytes_q0;

assign sig_0_proofs_inputS_address0 = zext_ln2088_12_fu_1472_p1;

assign sig_0_proofs_inputS_d0 = {{{{sigBytes_q0}, {sigBytes_q1}}, {sigBytes_load_7_reg_1753}}, {sigBytes_load_6_reg_1748}};

assign sig_0_proofs_seed1_address0 = zext_ln2077_4_fu_1232_p1;

assign sig_0_proofs_seed1_d0 = sigBytes_q0;

assign sig_0_proofs_seed2_address0 = zext_ln2082_4_fu_1286_p1;

assign sig_0_proofs_seed2_d0 = sigBytes_q0;

assign sig_0_proofs_view3C_address0 = zext_ln2059_5_fu_1128_p1;

assign sig_0_proofs_view3C_d0 = sigBytes_q0;

assign sig_0_salt_address0 = zext_ln2050_fu_948_p1;

assign sig_0_salt_d0 = sigBytes_q0;

assign tmp_21_fu_990_p3 = {{round_assign_2_reg_496}, {4'd0}};

assign tmp_22_fu_1002_p3 = {{round_assign_2_reg_496}, {5'd0}};

assign tmp_23_fu_1465_p3 = {{round_assign_2_reg_496}, {trunc_ln2088_4_reg_1738}};

assign tmp_47_fu_1318_p3 = loop_6_reg_567[32'd4];

assign tmp_fu_1296_p4 = {{add_ln2085_fu_1291_p2[2:1]}};

assign trunc_ln1977_fu_766_p1 = params_transform_rea[0:0];

assign trunc_ln2087_fu_1349_p1 = loop_6_reg_567[3:0];

assign trunc_ln386_3_fu_702_p1 = lshr_ln54_fu_696_p2[0:0];

assign trunc_ln386_4_fu_832_p1 = round_assign_1_reg_461[1:0];

assign trunc_ln386_5_fu_874_p1 = lshr_ln54_9_fu_868_p2[0:0];

assign trunc_ln386_6_fu_1014_p1 = round_assign_2_reg_496[1:0];

assign trunc_ln386_7_fu_1042_p1 = lshr_ln54_11_fu_1036_p2[0:0];

assign trunc_ln386_fu_636_p1 = round_assign_reg_438[1:0];

assign trunc_ln54_10_fu_894_p1 = lshr_ln54_10_fu_888_p2[0:0];

assign trunc_ln54_11_fu_1062_p1 = lshr_ln54_12_fu_1056_p2[0:0];

assign trunc_ln54_6_fu_836_p4 = {{round_assign_1_reg_461[7:2]}};

assign trunc_ln54_8_fu_971_p4 = {{round_assign_2_reg_496[7:2]}};

assign trunc_ln54_9_fu_722_p1 = lshr_ln54_8_fu_716_p2[0:0];

assign trunc_ln54_fu_620_p1 = sigBytes_offset[16:0];

assign trunc_ln_fu_640_p4 = {{round_assign_reg_438[7:2]}};

assign xor_ln54_2_fu_706_p2 = (shl_ln_fu_679_p3 ^ 3'd7);

assign xor_ln54_3_fu_858_p2 = (bitNumber_assign_fu_851_p3 ^ 3'd6);

assign xor_ln54_4_fu_878_p2 = (bitNumber_assign_fu_851_p3 ^ 3'd7);

assign xor_ln54_5_fu_1026_p2 = (bitNumber_assign_3_fu_1018_p3 ^ 3'd6);

assign xor_ln54_6_fu_1046_p2 = (bitNumber_assign_3_fu_1018_p3 ^ 3'd7);

assign xor_ln54_fu_686_p2 = (shl_ln_fu_679_p3 ^ 3'd6);

assign zext_ln1978_fu_769_p1 = mul_ln1978_reg_1541;

assign zext_ln2041_1_fu_801_p1 = loop_0_reg_449;

assign zext_ln2041_2_fu_810_p1 = add_ln2041_fu_805_p2;

assign zext_ln2041_fu_815_p1 = loop_0_reg_449;

assign zext_ln2050_1_fu_924_p1 = loop_1_reg_472;

assign zext_ln2050_2_fu_934_p1 = add_ln2050_fu_928_p2;

assign zext_ln2050_3_fu_943_p1 = add_ln2050_1_fu_938_p2;

assign zext_ln2050_fu_948_p1 = loop_1_reg_472;

assign zext_ln2053_1_fu_1010_p1 = tmp_22_fu_1002_p3;

assign zext_ln2053_fu_986_p1 = p_01_rec_reg_484;

assign zext_ln2059_1_fu_1095_p1 = ap_phi_mux_loop_2_phi_fu_524_p4;

assign zext_ln2059_2_fu_1105_p1 = add_ln2059_2_fu_1099_p2;

assign zext_ln2059_3_fu_1114_p1 = add_ln2059_1_fu_1109_p2;

assign zext_ln2059_4_fu_1119_p1 = loop_2_reg_520;

assign zext_ln2059_5_fu_1128_p1 = add_ln2059_3_fu_1123_p2;

assign zext_ln2059_fu_998_p1 = tmp_21_fu_990_p3;

assign zext_ln2072_1_fu_1155_p1 = loop_3_reg_532;

assign zext_ln2072_2_fu_1165_p1 = add_ln2072_1_fu_1159_p2;

assign zext_ln2072_3_fu_1174_p1 = add_ln2072_2_fu_1169_p2;

assign zext_ln2072_4_fu_1179_p1 = add_ln2072_reg_1666;

assign zext_ln2072_fu_1145_p1 = loop_3_reg_532;

assign zext_ln2077_1_fu_1195_p1 = loop_4_reg_543;

assign zext_ln2077_2_fu_1209_p1 = $unsigned(sext_ln2077_fu_1205_p1);

assign zext_ln2077_3_fu_1218_p1 = add_ln2077_2_fu_1213_p2;

assign zext_ln2077_4_fu_1232_p1 = add_ln2077_fu_1227_p2;

assign zext_ln2077_fu_1223_p1 = loop_4_reg_543;

assign zext_ln2082_1_fu_1249_p1 = ap_phi_mux_loop_5_phi_fu_559_p4;

assign zext_ln2082_2_fu_1263_p1 = $unsigned(sext_ln2082_fu_1259_p1);

assign zext_ln2082_3_fu_1272_p1 = add_ln2082_2_fu_1267_p2;

assign zext_ln2082_4_fu_1286_p1 = add_ln2082_fu_1281_p2;

assign zext_ln2082_fu_1277_p1 = loop_5_reg_555;

assign zext_ln2088_10_fu_1421_p1 = add_ln2088_7_fu_1416_p2;

assign zext_ln2088_11_fu_1450_p1 = add_ln2088_8_reg_1733;

assign zext_ln2088_12_fu_1472_p1 = tmp_23_fu_1465_p3;

assign zext_ln2088_1_fu_1335_p1 = add_ln2088_1_fu_1330_p2;

assign zext_ln2088_2_fu_1344_p1 = add_ln2088_2_fu_1339_p2;

assign zext_ln2088_3_fu_1359_p1 = or_ln2088_fu_1353_p2;

assign zext_ln2088_4_fu_1368_p1 = add_ln2088_3_fu_1363_p2;

assign zext_ln2088_5_fu_1377_p1 = add_ln2088_4_fu_1372_p2;

assign zext_ln2088_6_fu_1388_p1 = or_ln2088_1_fu_1382_p2;

assign zext_ln2088_7_fu_1397_p1 = add_ln2088_5_fu_1392_p2;

assign zext_ln2088_8_fu_1446_p1 = add_ln2088_6_reg_1728;

assign zext_ln2088_9_fu_1412_p1 = or_ln2088_2_fu_1406_p2;

assign zext_ln2088_fu_1326_p1 = loop_6_reg_567;

assign zext_ln2089_fu_1477_p1 = p_sum5_pn_reg_578;

assign zext_ln386_fu_1074_p1 = challenge_2_fu_1066_p3;

assign zext_ln54_12_fu_846_p1 = trunc_ln54_6_fu_836_p4;

assign zext_ln54_13_fu_659_p1 = add_ln54_fu_654_p2;

assign zext_ln54_14_fu_981_p1 = trunc_ln54_8_fu_971_p4;

assign zext_ln54_15_fu_692_p1 = xor_ln54_fu_686_p2;

assign zext_ln54_16_fu_712_p1 = xor_ln54_2_fu_706_p2;

assign zext_ln54_17_fu_864_p1 = xor_ln54_3_fu_858_p2;

assign zext_ln54_18_fu_884_p1 = xor_ln54_4_fu_878_p2;

assign zext_ln54_19_fu_1032_p1 = xor_ln54_5_fu_1026_p2;

assign zext_ln54_20_fu_1052_p1 = xor_ln54_6_fu_1046_p2;

assign zext_ln54_fu_650_p1 = trunc_ln_fu_640_p4;

always @ (posedge ap_clk) begin
    sigBytesLen_cast1_reg_1497[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln2059_reg_1619[3:0] <= 4'b0000;
    zext_ln2059_reg_1619[12] <= 1'b0;
    zext_ln2053_1_reg_1625[4:0] <= 5'b00000;
    zext_ln2053_1_reg_1625[13] <= 1'b0;
    zext_ln386_reg_1630[2] <= 1'b0;
    p_sum5_pn_reg_578[3:0] <= 4'b1011;
    p_sum5_pn_reg_578[7:5] <= 3'b100;
end

endmodule //deserializeSignature
