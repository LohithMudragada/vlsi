-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deserializeSignature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
    sig_0_proofs_commun_we0 : OUT STD_LOGIC;
    sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sig_0_challengeBits_ce0 : OUT STD_LOGIC;
    sig_0_challengeBits_we0 : OUT STD_LOGIC;
    sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sig_0_salt_ce0 : OUT STD_LOGIC;
    sig_0_salt_we0 : OUT STD_LOGIC;
    sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce0 : OUT STD_LOGIC;
    sigBytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce1 : OUT STD_LOGIC;
    sigBytes_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    sigBytesLen : IN STD_LOGIC_VECTOR (31 downto 0);
    params_UnruhGWithout : IN STD_LOGIC_VECTOR (6 downto 0);
    params_transform_rea : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of deserializeSignature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_8B : STD_LOGIC_VECTOR (7 downto 0) := "10001011";
    constant ap_const_lv8_9B : STD_LOGIC_VECTOR (7 downto 0) := "10011011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_7740 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111011101000000";
    constant ap_const_lv16_DB : STD_LOGIC_VECTOR (15 downto 0) := "0000000011011011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_77 : STD_LOGIC_VECTOR (7 downto 0) := "01110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_E2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_2_reg_520 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_3_reg_532 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_5_reg_555 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigBytesLen_cast1_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigBytesLen_cast1_reg_1497 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln54_fu_620_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_reg_1505 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1969_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_1520 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln386_fu_636_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_reg_1525 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1940_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_fu_664_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_reg_1535 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1978_fu_673_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1978_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputShareSize_2_fu_758_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loop_fu_795_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_1557 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln2040_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_11_reg_1570 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln386_4_fu_832_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_4_reg_1575 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1951_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_28_fu_918_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_28_reg_1591 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln2049_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2053_fu_953_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2053_reg_1601 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln2053_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2059_fu_998_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2059_reg_1619 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln2053_1_fu_1010_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2053_1_reg_1625 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln386_fu_1074_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln386_reg_1630 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln2059_fu_1078_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2059_reg_1635 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln2058_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2058_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_29_fu_1089_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_29_reg_1647 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln2071_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2071_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_30_fu_1139_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln2072_fu_1149_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2072_reg_1666 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln2076_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal loop_31_fu_1189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_31_reg_1680 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln2081_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2081_reg_1690 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_32_fu_1243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_32_reg_1694 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln2088_fu_1312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2088_reg_1707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln2085_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_47_fu_1318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2088_6_fu_1401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2088_6_reg_1728 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2088_8_fu_1425_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2088_8_reg_1733 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2088_4_reg_1738 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_33_fu_1440_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_33_reg_1743 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigBytes_load_6_reg_1748 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sigBytes_load_7_reg_1753 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2089_fu_1481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal inputShareSize_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_assign_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_0_reg_449 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1980_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal round_assign_1_reg_461 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1953_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_1_reg_472 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_01_rec_reg_484 : STD_LOGIC_VECTOR (15 downto 0);
    signal round_assign_2_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_508 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_loop_2_phi_fu_524_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal loop_4_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_phi_mux_loop_5_phi_fu_559_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal loop_6_reg_567 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal p_sum5_pn_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_13_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2041_2_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2041_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_12_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2050_3_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2050_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_14_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2059_3_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2059_5_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2072_3_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln2072_4_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2077_3_fu_1218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2077_4_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2082_3_fu_1272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2082_4_fu_1286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2088_2_fu_1344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2088_5_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2088_8_fu_1446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2088_11_fu_1450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2088_12_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_640_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln54_fu_654_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1978_fu_673_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_679_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_fu_686_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_15_fu_692_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_2_fu_706_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_16_fu_712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_8_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_3_fu_702_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_9_fu_722_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_fu_726_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1942_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1942_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1942_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputShareSize_1_fu_752_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1978_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1977_fu_766_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_1_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_2_fu_777_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2041_1_fu_801_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2041_fu_805_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_6_fu_836_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitNumber_assign_fu_851_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_3_fu_858_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_17_fu_864_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_9_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_4_fu_878_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_18_fu_884_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_10_fu_888_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_5_fu_874_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_10_fu_894_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_1_fu_898_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2050_1_fu_924_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2050_fu_928_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2050_2_fu_934_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2050_1_fu_938_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_8_fu_971_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_990_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_1002_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln386_6_fu_1014_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitNumber_assign_3_fu_1018_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_5_fu_1026_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_19_fu_1032_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_11_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_6_fu_1046_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_20_fu_1052_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_12_fu_1056_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_7_fu_1042_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_11_fu_1062_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_2_fu_1066_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2053_fu_986_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2059_1_fu_1095_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2059_2_fu_1099_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2059_2_fu_1105_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2059_1_fu_1109_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2059_4_fu_1119_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2059_3_fu_1123_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2072_fu_1145_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln2072_1_fu_1155_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2072_1_fu_1159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2072_2_fu_1165_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2072_2_fu_1169_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2077_1_fu_1195_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2077_1_fu_1199_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2077_fu_1205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2077_2_fu_1209_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2077_2_fu_1213_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2077_fu_1223_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2077_fu_1227_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2082_1_fu_1249_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2082_1_fu_1253_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2082_fu_1259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2082_2_fu_1263_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2082_2_fu_1267_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2082_fu_1277_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2082_fu_1281_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2085_fu_1291_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1296_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2088_fu_1326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2088_1_fu_1330_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2088_1_fu_1335_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2088_2_fu_1339_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2087_fu_1349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2088_fu_1353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2088_3_fu_1359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2088_3_fu_1363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2088_4_fu_1368_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2088_4_fu_1372_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2088_1_fu_1382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2088_6_fu_1388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2088_5_fu_1392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2088_7_fu_1397_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2088_2_fu_1406_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2088_9_fu_1412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2088_7_fu_1416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2088_10_fu_1421_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_1465_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2089_fu_1477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln1978_fu_673_p10 : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2076_fu_1183_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2076_fu_1183_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_return_preg <= p_0_reg_591;
                end if; 
            end if;
        end if;
    end process;


    inputShareSize_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_0))) then 
                inputShareSize_reg_426 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                inputShareSize_reg_426 <= inputShareSize_2_fu_758_p3;
            end if; 
        end if;
    end process;

    loop_0_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1980_fu_784_p2 = ap_const_lv1_0))) then 
                loop_0_reg_449 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                loop_0_reg_449 <= loop_reg_1557;
            end if; 
        end if;
    end process;

    loop_1_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_820_p2 = ap_const_lv1_0))) then 
                loop_1_reg_472 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_1_reg_472 <= loop_28_reg_1591;
            end if; 
        end if;
    end process;

    loop_2_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2058_reg_1643 = ap_const_lv1_0))) then 
                loop_2_reg_520 <= loop_29_reg_1647;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                loop_2_reg_520 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    loop_3_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                loop_3_reg_532 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2071_fu_1133_p2 = ap_const_lv1_0))) then 
                loop_3_reg_532 <= loop_30_fu_1139_p2;
            end if; 
        end if;
    end process;

    loop_4_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                loop_4_reg_543 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_4_reg_543 <= loop_31_reg_1680;
            end if; 
        end if;
    end process;

    loop_5_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2076_fu_1183_p2 = ap_const_lv1_1))) then 
                loop_5_reg_555 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2081_reg_1690 = ap_const_lv1_0))) then 
                loop_5_reg_555 <= loop_32_reg_1694;
            end if; 
        end if;
    end process;

    loop_6_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln2085_fu_1306_p2 = ap_const_lv1_1))) then 
                loop_6_reg_567 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                loop_6_reg_567 <= loop_33_reg_1743;
            end if; 
        end if;
    end process;

    p_01_rec_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2049_fu_912_p2 = ap_const_lv1_1))) then 
                p_01_rec_reg_484 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_01_rec_reg_484 <= add_ln2089_fu_1481_p2;
            end if; 
        end if;
    end process;

    p_0_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln2053_fu_959_p2 = ap_const_lv1_1))) then 
                p_0_reg_591 <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_906_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1980_fu_784_p2 = ap_const_lv1_1)))) then 
                p_0_reg_591 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    p_sum5_pn_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_47_fu_1318_p3 = ap_const_lv1_1))) then 
                p_sum5_pn_reg_578(4) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln2085_fu_1306_p2 = ap_const_lv1_0))) then 
                p_sum5_pn_reg_578(4) <= '0';
            end if; 
        end if;
    end process;

    phi_mul_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2049_fu_912_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_508 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                phi_mul_reg_508 <= add_ln2053_reg_1601;
            end if; 
        end if;
    end process;

    round_assign_1_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln2040_fu_789_p2 = ap_const_lv1_1))) then 
                round_assign_1_reg_461 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_906_p2 = ap_const_lv1_0))) then 
                round_assign_1_reg_461 <= i_11_reg_1570;
            end if; 
        end if;
    end process;

    round_assign_2_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2049_fu_912_p2 = ap_const_lv1_1))) then 
                round_assign_2_reg_496 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                round_assign_2_reg_496 <= i_reg_1609;
            end if; 
        end if;
    end process;

    round_assign_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_0))) then 
                round_assign_reg_438 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                round_assign_reg_438 <= i_10_reg_1520;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln2053_reg_1601 <= add_ln2053_fu_953_p2;
                i_reg_1609 <= i_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln2059_reg_1635 <= add_ln2059_fu_1078_p2;
                    zext_ln2053_1_reg_1625(12 downto 5) <= zext_ln2053_1_fu_1010_p1(12 downto 5);
                    zext_ln2059_reg_1619(11 downto 4) <= zext_ln2059_fu_998_p1(11 downto 4);
                    zext_ln386_reg_1630(1 downto 0) <= zext_ln386_fu_1074_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2071_fu_1133_p2 = ap_const_lv1_0))) then
                add_ln2072_reg_1666 <= add_ln2072_fu_1149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_47_fu_1318_p3 = ap_const_lv1_0))) then
                add_ln2088_6_reg_1728 <= add_ln2088_6_fu_1401_p2;
                add_ln2088_8_reg_1733 <= add_ln2088_8_fu_1425_p2;
                loop_33_reg_1743 <= loop_33_fu_1440_p2;
                trunc_ln2088_4_reg_1738 <= loop_6_reg_567(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln2085_fu_1306_p2 = ap_const_lv1_1))) then
                add_ln2088_reg_1707 <= add_ln2088_fu_1312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_624_p2 = ap_const_lv1_1))) then
                bytesExpected_reg_1535 <= bytesExpected_fu_664_p2;
                mul_ln1978_reg_1541 <= mul_ln1978_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_1520 <= i_10_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_11_reg_1570 <= i_11_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln2058_reg_1643 <= icmp_ln2058_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln2071_reg_1657 <= icmp_ln2071_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln2081_reg_1690 <= icmp_ln2081_fu_1237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                loop_28_reg_1591 <= loop_28_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                loop_29_reg_1647 <= loop_29_fu_1089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                loop_31_reg_1680 <= loop_31_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                loop_32_reg_1694 <= loop_32_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                loop_reg_1557 <= loop_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sigBytesLen_cast1_reg_1497(31 downto 0) <= sigBytesLen_cast1_fu_610_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                sigBytes_load_6_reg_1748 <= sigBytes_q0;
                sigBytes_load_7_reg_1753 <= sigBytes_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_820_p2 = ap_const_lv1_1))) then
                trunc_ln386_4_reg_1575 <= trunc_ln386_4_fu_832_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_624_p2 = ap_const_lv1_0))) then
                trunc_ln386_reg_1525 <= trunc_ln386_fu_636_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_0))) then
                trunc_ln54_reg_1505 <= trunc_ln54_fu_620_p1;
            end if;
        end if;
    end process;
    sigBytesLen_cast1_reg_1497(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln2059_reg_1619(3 downto 0) <= "0000";
    zext_ln2059_reg_1619(12) <= '0';
    zext_ln2053_1_reg_1625(4 downto 0) <= "00000";
    zext_ln2053_1_reg_1625(13) <= '0';
    zext_ln386_reg_1630(2) <= '0';
    p_sum5_pn_reg_578(3 downto 0) <= "1011";
    p_sum5_pn_reg_578(7 downto 5) <= "100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1969_fu_614_p2, ap_CS_fsm_state2, icmp_ln1940_fu_624_p2, ap_CS_fsm_state5, icmp_ln2040_fu_789_p2, ap_CS_fsm_state7, icmp_ln1951_fu_820_p2, ap_CS_fsm_state9, icmp_ln2049_fu_912_p2, ap_CS_fsm_state11, icmp_ln2053_fu_959_p2, icmp_ln2058_fu_1083_p2, ap_enable_reg_pp0_iter0, icmp_ln2071_fu_1133_p2, ap_enable_reg_pp1_iter0, icmp_ln2076_fu_1183_p2, ap_CS_fsm_state19, icmp_ln2081_fu_1237_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state23, icmp_ln2085_fu_1306_p2, ap_CS_fsm_state24, tmp_47_fu_1318_p3, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_CS_fsm_state4, icmp_ln1980_fu_784_p2, ap_CS_fsm_state8, icmp_ln1953_fu_906_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1969_fu_614_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_624_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1980_fu_784_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln2040_fu_789_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1951_fu_820_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1953_fu_906_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln2049_fu_912_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln2053_fu_959_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2058_fu_1083_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2058_fu_1083_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln2071_fu_1133_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln2071_fu_1133_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln2076_fu_1183_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln2081_fu_1237_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln2081_fu_1237_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln2085_fu_1306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_47_fu_1318_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln2041_fu_805_p2 <= std_logic_vector(unsigned(zext_ln2041_1_fu_801_p1) + unsigned(trunc_ln54_reg_1505));
    add_ln2050_1_fu_938_p2 <= std_logic_vector(unsigned(zext_ln2050_2_fu_934_p1) + unsigned(trunc_ln54_reg_1505));
    add_ln2050_fu_928_p2 <= std_logic_vector(unsigned(zext_ln2050_1_fu_924_p1) + unsigned(ap_const_lv7_37));
    add_ln2053_fu_953_p2 <= std_logic_vector(unsigned(phi_mul_reg_508) + unsigned(ap_const_lv15_4B));
    add_ln2059_1_fu_1109_p2 <= std_logic_vector(unsigned(add_ln2059_reg_1635) + unsigned(zext_ln2059_2_fu_1105_p1));
    add_ln2059_2_fu_1099_p2 <= std_logic_vector(unsigned(zext_ln2059_1_fu_1095_p1) + unsigned(ap_const_lv7_57));
    add_ln2059_3_fu_1123_p2 <= std_logic_vector(unsigned(zext_ln2053_1_reg_1625) + unsigned(zext_ln2059_4_fu_1119_p1));
    add_ln2059_fu_1078_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln2053_fu_986_p1));
    add_ln2072_1_fu_1159_p2 <= std_logic_vector(unsigned(zext_ln2072_1_fu_1155_p1) + unsigned(ap_const_lv8_77));
    add_ln2072_2_fu_1169_p2 <= std_logic_vector(unsigned(add_ln2059_reg_1635) + unsigned(zext_ln2072_2_fu_1165_p1));
    add_ln2072_fu_1149_p2 <= std_logic_vector(unsigned(phi_mul_reg_508) + unsigned(zext_ln2072_fu_1145_p1));
    add_ln2077_1_fu_1199_p2 <= std_logic_vector(unsigned(zext_ln2077_1_fu_1195_p1) + unsigned(ap_const_lv7_42));
    add_ln2077_2_fu_1213_p2 <= std_logic_vector(unsigned(add_ln2059_reg_1635) + unsigned(zext_ln2077_2_fu_1209_p1));
    add_ln2077_fu_1227_p2 <= std_logic_vector(unsigned(zext_ln2059_reg_1619) + unsigned(zext_ln2077_fu_1223_p1));
    add_ln2082_1_fu_1253_p2 <= std_logic_vector(unsigned(zext_ln2082_1_fu_1249_p1) + unsigned(ap_const_lv7_52));
    add_ln2082_2_fu_1267_p2 <= std_logic_vector(unsigned(add_ln2059_reg_1635) + unsigned(zext_ln2082_2_fu_1263_p1));
    add_ln2082_fu_1281_p2 <= std_logic_vector(unsigned(zext_ln2059_reg_1619) + unsigned(zext_ln2082_fu_1277_p1));
    add_ln2085_fu_1291_p2 <= std_logic_vector(unsigned(zext_ln386_reg_1630) + unsigned(ap_const_lv3_7));
    add_ln2088_1_fu_1330_p2 <= std_logic_vector(unsigned(zext_ln2088_fu_1326_p1) + unsigned(add_ln2088_reg_1707));
    add_ln2088_2_fu_1339_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln2088_1_fu_1335_p1));
    add_ln2088_3_fu_1363_p2 <= std_logic_vector(unsigned(zext_ln2088_3_fu_1359_p1) + unsigned(add_ln2088_reg_1707));
    add_ln2088_4_fu_1372_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln2088_4_fu_1368_p1));
    add_ln2088_5_fu_1392_p2 <= std_logic_vector(unsigned(zext_ln2088_6_fu_1388_p1) + unsigned(add_ln2088_reg_1707));
    add_ln2088_6_fu_1401_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln2088_7_fu_1397_p1));
    add_ln2088_7_fu_1416_p2 <= std_logic_vector(unsigned(zext_ln2088_9_fu_1412_p1) + unsigned(add_ln2088_reg_1707));
    add_ln2088_8_fu_1425_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln2088_10_fu_1421_p1));
    add_ln2088_fu_1312_p2 <= std_logic_vector(unsigned(p_01_rec_reg_484) + unsigned(ap_const_lv16_E2));
    add_ln2089_fu_1481_p2 <= std_logic_vector(unsigned(zext_ln2089_fu_1477_p1) + unsigned(p_01_rec_reg_484));
    add_ln54_fu_654_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1505) + unsigned(zext_ln54_fu_650_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln2058_fu_1083_p2)
    begin
        if ((icmp_ln2058_fu_1083_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln2071_fu_1133_p2)
    begin
        if ((icmp_ln2071_fu_1133_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(icmp_ln2081_fu_1237_p2)
    begin
        if ((icmp_ln2081_fu_1237_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_2_phi_fu_524_p4_assign_proc : process(loop_2_reg_520, icmp_ln2058_reg_1643, ap_CS_fsm_pp0_stage0, loop_29_reg_1647, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2058_reg_1643 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_2_phi_fu_524_p4 <= loop_29_reg_1647;
        else 
            ap_phi_mux_loop_2_phi_fu_524_p4 <= loop_2_reg_520;
        end if; 
    end process;


    ap_phi_mux_loop_5_phi_fu_559_p4_assign_proc : process(loop_5_reg_555, icmp_ln2081_reg_1690, ap_CS_fsm_pp2_stage0, loop_32_reg_1694, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2081_reg_1690 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_5_phi_fu_559_p4 <= loop_32_reg_1694;
        else 
            ap_phi_mux_loop_5_phi_fu_559_p4 <= loop_5_reg_555;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_591, ap_return_preg, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_return <= p_0_reg_591;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitNumber_assign_3_fu_1018_p3 <= (trunc_ln386_6_fu_1014_p1 & ap_const_lv1_0);
    bitNumber_assign_fu_851_p3 <= (trunc_ln386_4_reg_1575 & ap_const_lv1_0);
    bytesExpected_1_fu_772_p2 <= std_logic_vector(unsigned(bytesExpected_reg_1535) + unsigned(zext_ln1978_fu_769_p1));
    bytesExpected_2_fu_777_p3 <= 
        bytesExpected_1_fu_772_p2 when (trunc_ln1977_fu_766_p1(0) = '1') else 
        bytesExpected_reg_1535;
    bytesExpected_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv64_7740) + unsigned(inputShareSize_reg_426));
    challenge_1_fu_898_p3 <= (trunc_ln386_5_fu_874_p1 & trunc_ln54_10_fu_894_p1);
    challenge_2_fu_1066_p3 <= (trunc_ln386_7_fu_1042_p1 & trunc_ln54_11_fu_1062_p1);
    challenge_fu_726_p3 <= (trunc_ln386_3_fu_702_p1 & trunc_ln54_9_fu_722_p1);
    i_10_fu_630_p2 <= std_logic_vector(unsigned(round_assign_reg_438) + unsigned(ap_const_lv8_1));
    i_11_fu_826_p2 <= std_logic_vector(unsigned(round_assign_1_reg_461) + unsigned(ap_const_lv8_1));
    i_fu_965_p2 <= std_logic_vector(unsigned(round_assign_2_reg_496) + unsigned(ap_const_lv8_1));
    icmp_ln1940_fu_624_p2 <= "1" when (round_assign_reg_438 = ap_const_lv8_DB) else "0";
    icmp_ln1942_1_fu_740_p2 <= "1" when (challenge_fu_726_p3 = ap_const_lv2_2) else "0";
    icmp_ln1942_fu_734_p2 <= "1" when (challenge_fu_726_p3 = ap_const_lv2_1) else "0";
    icmp_ln1951_fu_820_p2 <= "1" when (unsigned(round_assign_1_reg_461) < unsigned(ap_const_lv8_DB)) else "0";
    icmp_ln1953_fu_906_p2 <= "1" when (challenge_1_fu_898_p3 = ap_const_lv2_3) else "0";
    icmp_ln1969_fu_614_p2 <= "1" when (unsigned(sigBytesLen) < unsigned(ap_const_lv32_37)) else "0";
    icmp_ln1980_fu_784_p2 <= "1" when (unsigned(bytesExpected_2_fu_777_p3) > unsigned(sigBytesLen_cast1_reg_1497)) else "0";
    icmp_ln2040_fu_789_p2 <= "1" when (loop_0_reg_449 = ap_const_lv6_37) else "0";
    icmp_ln2049_fu_912_p2 <= "1" when (loop_1_reg_472 = ap_const_lv6_20) else "0";
    icmp_ln2053_fu_959_p2 <= "1" when (round_assign_2_reg_496 = ap_const_lv8_DB) else "0";
    icmp_ln2058_fu_1083_p2 <= "1" when (ap_phi_mux_loop_2_phi_fu_524_p4 = ap_const_lv6_20) else "0";
    icmp_ln2071_fu_1133_p2 <= "1" when (loop_3_reg_532 = ap_const_lv7_4B) else "0";
    icmp_ln2076_fu_1183_p2 <= "1" when (loop_4_reg_543 = ap_const_lv5_10) else "0";
    icmp_ln2081_fu_1237_p2 <= "1" when (ap_phi_mux_loop_5_phi_fu_559_p4 = ap_const_lv5_10) else "0";
    icmp_ln2085_fu_1306_p2 <= "1" when (tmp_fu_1296_p4 = ap_const_lv2_0) else "0";
    inputShareSize_1_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv64_10) + unsigned(inputShareSize_reg_426));
    inputShareSize_2_fu_758_p3 <= 
        inputShareSize_1_fu_752_p2 when (or_ln1942_fu_746_p2(0) = '1') else 
        inputShareSize_reg_426;
    loop_28_fu_918_p2 <= std_logic_vector(unsigned(loop_1_reg_472) + unsigned(ap_const_lv6_1));
    loop_29_fu_1089_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_2_phi_fu_524_p4) + unsigned(ap_const_lv6_1));
    loop_30_fu_1139_p2 <= std_logic_vector(unsigned(loop_3_reg_532) + unsigned(ap_const_lv7_1));
    loop_31_fu_1189_p2 <= std_logic_vector(unsigned(loop_4_reg_543) + unsigned(ap_const_lv5_1));
    loop_32_fu_1243_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_5_phi_fu_559_p4) + unsigned(ap_const_lv5_1));
    loop_33_fu_1440_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_6_reg_567));
    loop_fu_795_p2 <= std_logic_vector(unsigned(loop_0_reg_449) + unsigned(ap_const_lv6_1));
    lshr_ln54_10_fu_888_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_18_fu_884_p1(8-1 downto 0)))));
    lshr_ln54_11_fu_1036_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_19_fu_1032_p1(8-1 downto 0)))));
    lshr_ln54_12_fu_1056_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_20_fu_1052_p1(8-1 downto 0)))));
    lshr_ln54_8_fu_716_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_16_fu_712_p1(8-1 downto 0)))));
    lshr_ln54_9_fu_868_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_17_fu_864_p1(8-1 downto 0)))));
    lshr_ln54_fu_696_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_15_fu_692_p1(8-1 downto 0)))));
    mul_ln1978_fu_673_p1 <= mul_ln1978_fu_673_p10(7 - 1 downto 0);
    mul_ln1978_fu_673_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_UnruhGWithout),16));
    mul_ln1978_fu_673_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_DB) * unsigned(mul_ln1978_fu_673_p1), 16));
    or_ln1942_fu_746_p2 <= (icmp_ln1942_fu_734_p2 or icmp_ln1942_1_fu_740_p2);
    or_ln2088_1_fu_1382_p2 <= (trunc_ln2087_fu_1349_p1 or ap_const_lv4_2);
    or_ln2088_2_fu_1406_p2 <= (trunc_ln2087_fu_1349_p1 or ap_const_lv4_3);
    or_ln2088_fu_1353_p2 <= (trunc_ln2087_fu_1349_p1 or ap_const_lv4_1);
        sext_ln2077_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2077_1_fu_1199_p2),8));

        sext_ln2082_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2082_1_fu_1253_p2),8));

    shl_ln_fu_679_p3 <= (trunc_ln386_reg_1525 & ap_const_lv1_0);
    sigBytesLen_cast1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigBytesLen),64));

    sigBytes_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln54_13_fu_659_p1, zext_ln2041_2_fu_810_p1, zext_ln2050_3_fu_943_p1, zext_ln2059_3_fu_1114_p1, zext_ln2072_3_fu_1174_p1, ap_block_pp1_stage0, zext_ln2077_3_fu_1218_p1, zext_ln2082_3_fu_1272_p1, zext_ln2088_2_fu_1344_p1, zext_ln2088_11_fu_1450_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sigBytes_address0 <= zext_ln2088_11_fu_1450_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sigBytes_address0 <= zext_ln2088_2_fu_1344_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sigBytes_address0 <= zext_ln2082_3_fu_1272_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sigBytes_address0 <= zext_ln2077_3_fu_1218_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sigBytes_address0 <= zext_ln2072_3_fu_1174_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sigBytes_address0 <= zext_ln2059_3_fu_1114_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sigBytes_address0 <= zext_ln2050_3_fu_943_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sigBytes_address0 <= zext_ln2041_2_fu_810_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sigBytes_address0 <= zext_ln54_13_fu_659_p1(16 - 1 downto 0);
        else 
            sigBytes_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_address1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, zext_ln2088_5_fu_1377_p1, zext_ln2088_8_fu_1446_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sigBytes_address1 <= zext_ln2088_8_fu_1446_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sigBytes_address1 <= zext_ln2088_5_fu_1377_p1(16 - 1 downto 0);
        else 
            sigBytes_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sigBytes_ce0 <= ap_const_logic_1;
        else 
            sigBytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigBytes_ce1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            sigBytes_ce1 <= ap_const_logic_1;
        else 
            sigBytes_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state6, zext_ln2041_fu_815_p1, zext_ln54_12_fu_846_p1, zext_ln54_14_fu_981_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_0_challengeBits_address0 <= zext_ln54_14_fu_981_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sig_0_challengeBits_address0 <= zext_ln54_12_fu_846_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_0_challengeBits_address0 <= zext_ln2041_fu_815_p1(6 - 1 downto 0);
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sig_0_challengeBits_ce0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_challengeBits_d0 <= sigBytes_q0;

    sig_0_challengeBits_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_0_challengeBits_we0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_address0 <= zext_ln2072_4_fu_1179_p1(15 - 1 downto 0);

    sig_0_proofs_commun_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sig_0_proofs_commun_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_d0 <= sigBytes_q0;

    sig_0_proofs_commun_we0_assign_proc : process(icmp_ln2071_reg_1657, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2071_reg_1657 = ap_const_lv1_0))) then 
            sig_0_proofs_commun_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_address0 <= zext_ln2088_12_fu_1472_p1(10 - 1 downto 0);

    sig_0_proofs_inputS_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_d0 <= (((sigBytes_q0 & sigBytes_q1) & sigBytes_load_7_reg_1753) & sigBytes_load_6_reg_1748);

    sig_0_proofs_inputS_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sig_0_proofs_inputS_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_address0 <= zext_ln2077_4_fu_1232_p1(12 - 1 downto 0);

    sig_0_proofs_seed1_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_d0 <= sigBytes_q0;

    sig_0_proofs_seed1_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sig_0_proofs_seed1_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_address0 <= zext_ln2082_4_fu_1286_p1(12 - 1 downto 0);

    sig_0_proofs_seed2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_d0 <= sigBytes_q0;

    sig_0_proofs_seed2_we0_assign_proc : process(icmp_ln2081_reg_1690, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2081_reg_1690 = ap_const_lv1_0))) then 
            sig_0_proofs_seed2_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_address0 <= zext_ln2059_5_fu_1128_p1(13 - 1 downto 0);

    sig_0_proofs_view3C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_d0 <= sigBytes_q0;

    sig_0_proofs_view3C_we0_assign_proc : process(icmp_ln2058_reg_1643, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2058_reg_1643 = ap_const_lv1_0))) then 
            sig_0_proofs_view3C_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_address0 <= zext_ln2050_fu_948_p1(5 - 1 downto 0);

    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_0_salt_ce0 <= ap_const_logic_1;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_d0 <= sigBytes_q0;

    sig_0_salt_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_0_salt_we0 <= ap_const_logic_1;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_990_p3 <= (round_assign_2_reg_496 & ap_const_lv4_0);
    tmp_22_fu_1002_p3 <= (round_assign_2_reg_496 & ap_const_lv5_0);
    tmp_23_fu_1465_p3 <= (round_assign_2_reg_496 & trunc_ln2088_4_reg_1738);
    tmp_47_fu_1318_p3 <= loop_6_reg_567(4 downto 4);
    tmp_fu_1296_p4 <= add_ln2085_fu_1291_p2(2 downto 1);
    trunc_ln1977_fu_766_p1 <= params_transform_rea(1 - 1 downto 0);
    trunc_ln2087_fu_1349_p1 <= loop_6_reg_567(4 - 1 downto 0);
    trunc_ln386_3_fu_702_p1 <= lshr_ln54_fu_696_p2(1 - 1 downto 0);
    trunc_ln386_4_fu_832_p1 <= round_assign_1_reg_461(2 - 1 downto 0);
    trunc_ln386_5_fu_874_p1 <= lshr_ln54_9_fu_868_p2(1 - 1 downto 0);
    trunc_ln386_6_fu_1014_p1 <= round_assign_2_reg_496(2 - 1 downto 0);
    trunc_ln386_7_fu_1042_p1 <= lshr_ln54_11_fu_1036_p2(1 - 1 downto 0);
    trunc_ln386_fu_636_p1 <= round_assign_reg_438(2 - 1 downto 0);
    trunc_ln54_10_fu_894_p1 <= lshr_ln54_10_fu_888_p2(1 - 1 downto 0);
    trunc_ln54_11_fu_1062_p1 <= lshr_ln54_12_fu_1056_p2(1 - 1 downto 0);
    trunc_ln54_6_fu_836_p4 <= round_assign_1_reg_461(7 downto 2);
    trunc_ln54_8_fu_971_p4 <= round_assign_2_reg_496(7 downto 2);
    trunc_ln54_9_fu_722_p1 <= lshr_ln54_8_fu_716_p2(1 - 1 downto 0);
    trunc_ln54_fu_620_p1 <= sigBytes_offset(17 - 1 downto 0);
    trunc_ln_fu_640_p4 <= round_assign_reg_438(7 downto 2);
    xor_ln54_2_fu_706_p2 <= (shl_ln_fu_679_p3 xor ap_const_lv3_7);
    xor_ln54_3_fu_858_p2 <= (bitNumber_assign_fu_851_p3 xor ap_const_lv3_6);
    xor_ln54_4_fu_878_p2 <= (bitNumber_assign_fu_851_p3 xor ap_const_lv3_7);
    xor_ln54_5_fu_1026_p2 <= (bitNumber_assign_3_fu_1018_p3 xor ap_const_lv3_6);
    xor_ln54_6_fu_1046_p2 <= (bitNumber_assign_3_fu_1018_p3 xor ap_const_lv3_7);
    xor_ln54_fu_686_p2 <= (shl_ln_fu_679_p3 xor ap_const_lv3_6);
    zext_ln1978_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1978_reg_1541),64));
    zext_ln2041_1_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_449),17));
    zext_ln2041_2_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2041_fu_805_p2),64));
    zext_ln2041_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_449),64));
    zext_ln2050_1_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_472),7));
    zext_ln2050_2_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2050_fu_928_p2),17));
    zext_ln2050_3_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2050_1_fu_938_p2),64));
    zext_ln2050_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_472),64));
    zext_ln2053_1_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1002_p3),14));
    zext_ln2053_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_reg_484),17));
    zext_ln2059_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_2_phi_fu_524_p4),7));
    zext_ln2059_2_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2059_2_fu_1099_p2),17));
    zext_ln2059_3_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2059_1_fu_1109_p2),64));
    zext_ln2059_4_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_520),14));
    zext_ln2059_5_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2059_3_fu_1123_p2),64));
    zext_ln2059_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_990_p3),13));
    zext_ln2072_1_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_532),8));
    zext_ln2072_2_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2072_1_fu_1159_p2),17));
    zext_ln2072_3_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2072_2_fu_1169_p2),64));
    zext_ln2072_4_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2072_reg_1666),64));
    zext_ln2072_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_532),15));
    zext_ln2077_1_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_543),7));
    zext_ln2077_2_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2077_fu_1205_p1),17));
    zext_ln2077_3_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2077_2_fu_1213_p2),64));
    zext_ln2077_4_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2077_fu_1227_p2),64));
    zext_ln2077_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_543),13));
    zext_ln2082_1_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_5_phi_fu_559_p4),7));
    zext_ln2082_2_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2082_fu_1259_p1),17));
    zext_ln2082_3_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2082_2_fu_1267_p2),64));
    zext_ln2082_4_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2082_fu_1281_p2),64));
    zext_ln2082_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_555),13));
    zext_ln2088_10_fu_1421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_7_fu_1416_p2),17));
    zext_ln2088_11_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_8_reg_1733),64));
    zext_ln2088_12_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_1465_p3),64));
    zext_ln2088_1_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_1_fu_1330_p2),17));
    zext_ln2088_2_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_2_fu_1339_p2),64));
    zext_ln2088_3_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2088_fu_1353_p2),16));
    zext_ln2088_4_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_3_fu_1363_p2),17));
    zext_ln2088_5_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_4_fu_1372_p2),64));
    zext_ln2088_6_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2088_1_fu_1382_p2),16));
    zext_ln2088_7_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_5_fu_1392_p2),17));
    zext_ln2088_8_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2088_6_reg_1728),64));
    zext_ln2088_9_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2088_2_fu_1406_p2),16));
    zext_ln2088_fu_1326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_567),16));
    zext_ln2089_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_pn_reg_578),16));
    zext_ln386_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(challenge_2_fu_1066_p3),3));
    zext_ln54_12_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_6_fu_836_p4),64));
    zext_ln54_13_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_654_p2),64));
    zext_ln54_14_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_8_fu_971_p4),64));
    zext_ln54_15_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_686_p2),8));
    zext_ln54_16_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_2_fu_706_p2),8));
    zext_ln54_17_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_3_fu_858_p2),8));
    zext_ln54_18_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_4_fu_878_p2),8));
    zext_ln54_19_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_5_fu_1026_p2),8));
    zext_ln54_20_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_6_fu_1046_p2),8));
    zext_ln54_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_640_p4),17));
end behav;
