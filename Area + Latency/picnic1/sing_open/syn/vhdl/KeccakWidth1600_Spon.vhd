-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakWidth1600_Spon is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_ce0 : OUT STD_LOGIC;
    instance_state_we0 : OUT STD_LOGIC;
    instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_squeezing_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_0_ce0 : OUT STD_LOGIC;
    data_0_we0 : OUT STD_LOGIC;
    data_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_offset1 : IN STD_LOGIC_VECTOR (0 downto 0);
    dataByteLen : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of KeccakWidth1600_Spon is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_A7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010100111";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_A6 : STD_LOGIC_VECTOR (9 downto 0) := "0010100110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv30_A8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010101000";
    constant ap_const_lv64_A8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010101000";
    constant ap_const_lv8_A8 : STD_LOGIC_VECTOR (7 downto 0) := "10101000";
    constant ap_const_lv64_FFFFFFFFFFFFFF58 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dataByteLen_cast_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dataByteLen_cast_reg_562 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln394_13_fu_272_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln394_13_reg_569 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln394_fu_276_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln394_reg_575 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln297_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal instance_state_addr_reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal instance_state_addr_1_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln303_fu_309_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln303_reg_603 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_KeccakP1600_Permute_s_fu_258_ap_ready : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_258_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal zext_ln320_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_36_load_reg_613 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln303_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln303_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln302_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln304_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln303_1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_53_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_53_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln393_1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_11_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln394_11_reg_650 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln310_fu_432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_18_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal partialBlock_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal partialBlock_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal partialBlock_18_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal partialBlock_18_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln323_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln323_reg_677 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_488_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal i_reg_682 : STD_LOGIC_VECTOR (33 downto 0);
    signal loop_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln393_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_10_fu_533_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln394_10_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln330_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln329_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_KeccakP1600_Permute_s_fu_258_ap_start : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_258_ap_idle : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_258_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakP1600_Permute_s_fu_258_state_ce0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_258_state_we0 : STD_LOGIC;
    signal grp_KeccakP1600_Permute_s_fu_258_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_instance_byteIOIndex_phi_fu_147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal instance_byteIOIndex_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal instance_byteIOIndex_1_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal curData_0_idx_reg_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal curData_1_rec_reg_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_0_i_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal offset_assign_1_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_i1_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal instance_byteIOIndex_3_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln304_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curData_1_rec_pn_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakP1600_Permute_s_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln149_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_1_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln394_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln394_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_36_fu_56 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln312_fu_371_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln149_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln149_1_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln303_fu_334_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln303_fu_338_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_fu_349_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln312_fu_364_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln312_fu_367_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln394_15_fu_399_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln304_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln302_4_fu_413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln394_3_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln394_2_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln394_16_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln320_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln321_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln321_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_17_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln323_4_fu_484_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln394_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln394_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln302_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln394_1_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln394_14_fu_529_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component KeccakP1600_Permute_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_KeccakP1600_Permute_s_fu_258 : component KeccakP1600_Permute_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakP1600_Permute_s_fu_258_ap_start,
        ap_done => grp_KeccakP1600_Permute_s_fu_258_ap_done,
        ap_idle => grp_KeccakP1600_Permute_s_fu_258_ap_idle,
        ap_ready => grp_KeccakP1600_Permute_s_fu_258_ap_ready,
        state_address0 => grp_KeccakP1600_Permute_s_fu_258_state_address0,
        state_ce0 => grp_KeccakP1600_Permute_s_fu_258_state_ce0,
        state_we0 => grp_KeccakP1600_Permute_s_fu_258_state_we0,
        state_d0 => grp_KeccakP1600_Permute_s_fu_258_state_d0,
        state_q0 => instance_state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakP1600_Permute_s_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakP1600_Permute_s_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln304_fu_358_p2 = ap_const_lv1_0)) or ((icmp_ln303_1_fu_344_p2 = ap_const_lv1_1) and (icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (icmp_ln303_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_KeccakP1600_Permute_s_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakP1600_Permute_s_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakP1600_Permute_s_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    curData_0_idx_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                curData_0_idx_reg_166 <= add_ln329_fu_551_p2;
            elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                curData_0_idx_reg_166 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    curData_1_rec_pn_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln304_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                curData_1_rec_pn_reg_248 <= curData_1_rec_reg_188;
            elsif (((icmp_ln393_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                curData_1_rec_pn_reg_248 <= zext_ln323_reg_677;
            end if; 
        end if;
    end process;

    curData_1_rec_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                curData_1_rec_reg_188 <= add_ln310_fu_432_p2;
            elsif (((icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (icmp_ln303_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln303_1_fu_344_p2 = ap_const_lv1_0))) then 
                curData_1_rec_reg_188 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_36_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_36_fu_56 <= i_reg_682;
            elsif (((icmp_ln304_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_36_fu_56 <= sub_ln312_fu_371_p2;
            elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_36_fu_56 <= ap_const_lv34_0;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                instance_byteIOIndex_1_reg_155 <= instance_byteIOIndex_3_reg_235;
            elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                instance_byteIOIndex_1_reg_155 <= ap_phi_mux_instance_byteIOIndex_phi_fu_147_p4;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_3_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln304_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                instance_byteIOIndex_3_reg_235 <= ap_const_lv32_A8;
            elsif (((icmp_ln393_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                instance_byteIOIndex_3_reg_235 <= add_ln330_fu_538_p2;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_284_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                instance_byteIOIndex_reg_144 <= instance_byteIOIndex_read;
            elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                instance_byteIOIndex_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_0_reg_178 <= j_18_fu_438_p2;
            elsif (((icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (icmp_ln303_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln303_1_fu_344_p2 = ap_const_lv1_0))) then 
                j_0_reg_178 <= sext_ln304_fu_354_p1;
            end if; 
        end if;
    end process;

    loop_0_i1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                loop_0_i1_reg_224 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                loop_0_i1_reg_224 <= loop_reg_690;
            end if; 
        end if;
    end process;

    loop_0_i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakP1600_Permute_s_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                loop_0_i_reg_200 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_0_i_reg_200 <= loop_53_reg_640;
            end if; 
        end if;
    end process;

    offset_assign_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln303_fu_328_p2 = ap_const_lv1_0))) then 
                offset_assign_1_reg_211 <= instance_byteIOIndex_1_reg_155;
            elsif (((icmp_ln303_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then 
                offset_assign_1_reg_211 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln393_fu_493_p2 = ap_const_lv1_0))) then
                add_ln394_10_reg_700 <= add_ln394_10_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln393_1_fu_382_p2 = ap_const_lv1_0))) then
                add_ln394_11_reg_650 <= add_ln394_11_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dataByteLen_cast_reg_562 <= dataByteLen_cast_fu_268_p1;
                icmp_ln297_reg_581 <= icmp_ln297_fu_284_p2;
                    select_ln394_reg_575(2 downto 1) <= select_ln394_fu_276_p3(2 downto 1);    select_ln394_reg_575(5) <= select_ln394_fu_276_p3(5);    select_ln394_reg_575(7) <= select_ln394_fu_276_p3(7);
                    zext_ln394_13_reg_569(8 downto 0) <= zext_ln394_13_fu_272_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_36_load_reg_613 <= i_36_fu_56;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_reg_682 <= i_fu_488_p2;
                partialBlock_18_reg_671 <= partialBlock_18_fu_473_p3;
                    zext_ln323_reg_677(31 downto 0) <= zext_ln323_fu_480_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln303_reg_622 <= icmp_ln303_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_284_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                instance_state_addr_reg_585 <= zext_ln149_fu_290_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                loop_53_reg_640 <= loop_53_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                loop_reg_690 <= loop_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                partialBlock_reg_665 <= partialBlock_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln303_reg_603(8 downto 0) <= zext_ln303_fu_309_p1(8 downto 0);
                    zext_ln320_reg_608(8 downto 0) <= zext_ln320_fu_312_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln394_13_reg_569(33 downto 9) <= "0000000000000000000000000";
    select_ln394_reg_575(0) <= '0';
    select_ln394_reg_575(4 downto 3) <= "00";
    select_ln394_reg_575(6 downto 6) <= "0";
    select_ln394_reg_575(9 downto 8) <= "00";
    zext_ln303_reg_603(29 downto 9) <= "000000000000000000000";
    zext_ln320_reg_608(31 downto 9) <= "00000000000000000000000";
    zext_ln323_reg_677(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln297_fu_284_p2, ap_CS_fsm_state6, grp_KeccakP1600_Permute_s_fu_258_ap_done, ap_block_state6_on_subcall_done, ap_CS_fsm_state7, icmp_ln303_fu_328_p2, icmp_ln302_fu_323_p2, icmp_ln303_1_fu_344_p2, ap_CS_fsm_state10, icmp_ln393_1_fu_382_p2, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state14, icmp_ln393_fu_493_p2, ap_CS_fsm_state9, ap_CS_fsm_state8, icmp_ln304_fu_358_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln297_fu_284_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln297_fu_284_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln302_fu_323_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln302_fu_323_p2 = ap_const_lv1_1) and (icmp_ln303_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln303_1_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln304_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((grp_KeccakP1600_Permute_s_fu_258_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln393_1_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln393_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln303_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv30_A8) + unsigned(trunc_ln303_fu_334_p1));
    add_ln310_fu_432_p2 <= std_logic_vector(unsigned(curData_1_rec_reg_188) + unsigned(ap_const_lv64_A8));
    add_ln321_fu_456_p2 <= std_logic_vector(unsigned(offset_assign_1_reg_211) + unsigned(partialBlock_reg_665));
    add_ln329_fu_551_p2 <= std_logic_vector(unsigned(curData_1_rec_pn_reg_248) + unsigned(curData_0_idx_reg_166));
    add_ln330_fu_538_p2 <= std_logic_vector(unsigned(offset_assign_1_reg_211) + unsigned(partialBlock_18_reg_671));
    add_ln394_10_fu_533_p2 <= std_logic_vector(unsigned(select_ln394_reg_575) + unsigned(zext_ln394_14_fu_529_p1));
    add_ln394_11_fu_427_p2 <= std_logic_vector(unsigned(select_ln394_reg_575) + unsigned(zext_ln394_16_fu_423_p1));
    add_ln394_1_fu_523_p2 <= std_logic_vector(unsigned(trunc_ln394_fu_515_p1) + unsigned(trunc_ln302_fu_519_p1));
    add_ln394_2_fu_417_p2 <= std_logic_vector(unsigned(trunc_ln302_4_fu_413_p1) + unsigned(add_ln394_3_fu_407_p2));
    add_ln394_3_fu_407_p2 <= std_logic_vector(unsigned(zext_ln394_15_fu_399_p1) + unsigned(trunc_ln304_fu_403_p1));
    add_ln394_fu_504_p2 <= std_logic_vector(unsigned(offset_assign_1_reg_211) + unsigned(loop_0_i1_reg_224));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_on_subcall_done_assign_proc : process(grp_KeccakP1600_Permute_s_fu_258_ap_done, icmp_ln303_reg_622)
    begin
                ap_block_state12_on_subcall_done <= ((icmp_ln303_reg_622 = ap_const_lv1_1) and (grp_KeccakP1600_Permute_s_fu_258_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(icmp_ln297_reg_581, grp_KeccakP1600_Permute_s_fu_258_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((icmp_ln297_reg_581 = ap_const_lv1_1) and (grp_KeccakP1600_Permute_s_fu_258_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln302_fu_323_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln302_fu_323_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_instance_byteIOIndex_phi_fu_147_p4_assign_proc : process(icmp_ln297_reg_581, ap_CS_fsm_state6, instance_byteIOIndex_reg_144)
    begin
        if (((icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_instance_byteIOIndex_phi_fu_147_p4 <= ap_const_lv32_0;
        else 
            ap_phi_mux_instance_byteIOIndex_phi_fu_147_p4 <= instance_byteIOIndex_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln302_fu_323_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln302_fu_323_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        dataByteLen_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dataByteLen),9));


    data_0_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15, sext_ln394_1_fu_444_p1, sext_ln394_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_0_address0 <= sext_ln394_fu_547_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_0_address0 <= sext_ln394_1_fu_444_p1(9 - 1 downto 0);
        else 
            data_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    data_0_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_0_ce0 <= ap_const_logic_1;
        else 
            data_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_0_d0 <= instance_state_q0;

    data_0_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_0_we0 <= ap_const_logic_1;
        else 
            data_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakP1600_Permute_s_fu_258_ap_start <= grp_KeccakP1600_Permute_s_fu_258_ap_start_reg;
    i_fu_488_p2 <= std_logic_vector(unsigned(i_36_load_reg_613) + unsigned(zext_ln323_4_fu_484_p1));
    icmp_ln297_fu_284_p2 <= "1" when (instance_squeezing_read = ap_const_lv32_0) else "0";
    icmp_ln302_fu_323_p2 <= "1" when (unsigned(i_36_fu_56) < unsigned(zext_ln394_13_reg_569)) else "0";
    icmp_ln303_1_fu_344_p2 <= "1" when (unsigned(add_ln303_fu_338_p2) > unsigned(zext_ln303_reg_603)) else "0";
    icmp_ln303_fu_328_p2 <= "1" when (instance_byteIOIndex_1_reg_155 = ap_const_lv32_A8) else "0";
    icmp_ln304_fu_358_p2 <= "1" when (unsigned(j_0_reg_178) < unsigned(ap_const_lv64_A8)) else "0";
    icmp_ln321_fu_461_p2 <= "1" when (unsigned(add_ln321_fu_456_p2) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln393_1_fu_382_p2 <= "1" when (loop_0_i_reg_200 = ap_const_lv8_A8) else "0";
    icmp_ln393_fu_493_p2 <= "1" when (loop_0_i1_reg_224 = partialBlock_18_reg_671) else "0";
    instance_state_addr_1_reg_590 <= ap_const_lv64_A7(8 - 1 downto 0);

    instance_state_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln297_reg_581, instance_state_addr_reg_585, instance_state_addr_1_reg_590, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln303_reg_622, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakP1600_Permute_s_fu_258_state_address0, ap_CS_fsm_state9, zext_ln149_fu_290_p1, zext_ln394_1_fu_394_p1, zext_ln394_fu_510_p1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            instance_state_address0 <= zext_ln394_fu_510_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            instance_state_address0 <= zext_ln394_1_fu_394_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            instance_state_address0 <= instance_state_addr_1_reg_590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            instance_state_address0 <= ap_const_lv64_A7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instance_state_address0 <= instance_state_addr_reg_585;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            instance_state_address0 <= zext_ln149_fu_290_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln303_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            instance_state_address0 <= grp_KeccakP1600_Permute_s_fu_258_state_address0;
        else 
            instance_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln297_reg_581, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln303_reg_622, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, grp_KeccakP1600_Permute_s_fu_258_state_ce0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            instance_state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln303_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            instance_state_ce0 <= grp_KeccakP1600_Permute_s_fu_258_state_ce0;
        else 
            instance_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    instance_state_d0_assign_proc : process(icmp_ln297_reg_581, ap_CS_fsm_state6, icmp_ln303_reg_622, ap_CS_fsm_state12, grp_KeccakP1600_Permute_s_fu_258_state_d0, ap_CS_fsm_state9, ap_CS_fsm_state2, xor_ln149_fu_295_p2, ap_CS_fsm_state4, xor_ln149_1_fu_302_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            instance_state_d0 <= xor_ln149_1_fu_302_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instance_state_d0 <= xor_ln149_fu_295_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln303_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            instance_state_d0 <= grp_KeccakP1600_Permute_s_fu_258_state_d0;
        else 
            instance_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_we0_assign_proc : process(icmp_ln297_reg_581, ap_CS_fsm_state6, icmp_ln303_reg_622, ap_CS_fsm_state12, grp_KeccakP1600_Permute_s_fu_258_state_we0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            instance_state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln297_reg_581 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln303_reg_622 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            instance_state_we0 <= grp_KeccakP1600_Permute_s_fu_258_state_we0;
        else 
            instance_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_18_fu_438_p2 <= std_logic_vector(unsigned(j_0_reg_178) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF58));
    j_fu_349_p2 <= std_logic_vector(unsigned(zext_ln394_13_reg_569) - unsigned(i_36_fu_56));
    loop_53_fu_388_p2 <= std_logic_vector(unsigned(loop_0_i_reg_200) + unsigned(ap_const_lv8_1));
    loop_fu_498_p2 <= std_logic_vector(unsigned(loop_0_i1_reg_224) + unsigned(ap_const_lv32_1));
    partialBlock_17_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv32_A8) - unsigned(offset_assign_1_reg_211));
    partialBlock_18_fu_473_p3 <= 
        partialBlock_17_fu_467_p2 when (icmp_ln321_fu_461_p2(0) = '1') else 
        partialBlock_reg_665;
    partialBlock_fu_451_p2 <= std_logic_vector(unsigned(zext_ln320_reg_608) - unsigned(trunc_ln320_fu_448_p1));
    select_ln394_fu_276_p3 <= 
        ap_const_lv10_A6 when (data_offset1(0) = '1') else 
        ap_const_lv10_0;
        sext_ln304_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_349_p2),64));

        sext_ln394_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln394_11_reg_650),64));

        sext_ln394_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln394_10_reg_700),64));

    sub_ln312_fu_371_p2 <= std_logic_vector(unsigned(zext_ln312_fu_364_p1) - unsigned(trunc_ln312_fu_367_p1));
    trunc_ln302_4_fu_413_p1 <= curData_0_idx_reg_166(9 - 1 downto 0);
    trunc_ln302_fu_519_p1 <= curData_0_idx_reg_166(9 - 1 downto 0);
    trunc_ln303_fu_334_p1 <= i_36_fu_56(30 - 1 downto 0);
    trunc_ln304_fu_403_p1 <= curData_1_rec_reg_188(9 - 1 downto 0);
    trunc_ln312_fu_367_p1 <= j_0_reg_178(34 - 1 downto 0);
    trunc_ln320_fu_448_p1 <= i_36_load_reg_613(32 - 1 downto 0);
    trunc_ln394_fu_515_p1 <= loop_0_i1_reg_224(9 - 1 downto 0);
    xor_ln149_1_fu_302_p2 <= (instance_state_q0 xor ap_const_lv8_80);
    xor_ln149_fu_295_p2 <= (instance_state_q0 xor ap_const_lv8_1);
    zext_ln149_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(instance_byteIOIndex_read),64));
    zext_ln303_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataByteLen_cast_reg_562),30));
    zext_ln312_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataByteLen_cast_reg_562),34));
    zext_ln320_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataByteLen_cast_reg_562),32));
    zext_ln323_4_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_18_fu_473_p3),34));
    zext_ln323_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_18_fu_473_p3),64));
    zext_ln394_13_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dataByteLen_cast_fu_268_p1),34));
    zext_ln394_14_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_1_fu_523_p2),10));
    zext_ln394_15_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_200),9));
    zext_ln394_16_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_2_fu_417_p2),10));
    zext_ln394_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_200),64));
    zext_ln394_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_fu_504_p2),64));
end behav;
