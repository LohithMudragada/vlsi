// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_sign_open.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_sign_open::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_sign_open::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state1 = "1";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state2 = "10";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state3 = "100";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state4 = "1000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state5 = "10000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state6 = "100000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> crypto_sign_open::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> crypto_sign_open::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_sign_open::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_sign_open::ap_const_lv32_2 = "10";
const sc_lv<1> crypto_sign_open::ap_const_lv1_0 = "0";
const sc_lv<32> crypto_sign_open::ap_const_lv32_4 = "100";
const sc_lv<1> crypto_sign_open::ap_const_lv1_1 = "1";
const sc_lv<32> crypto_sign_open::ap_const_lv32_6 = "110";
const sc_lv<32> crypto_sign_open::ap_const_lv32_7 = "111";
const sc_lv<32> crypto_sign_open::ap_const_lv32_8 = "1000";
const sc_lv<32> crypto_sign_open::ap_const_lv32_B = "1011";
const sc_lv<32> crypto_sign_open::ap_const_lv32_3 = "11";
const sc_lv<5> crypto_sign_open::ap_const_lv5_0 = "00000";
const sc_lv<32> crypto_sign_open::ap_const_lv32_5 = "101";
const sc_lv<32> crypto_sign_open::ap_const_lv32_C = "1100";
const sc_lv<32> crypto_sign_open::ap_const_lv32_A = "1010";
const sc_lv<2> crypto_sign_open::ap_const_lv2_0 = "00";
const sc_lv<2> crypto_sign_open::ap_const_lv2_2 = "10";
const sc_lv<2> crypto_sign_open::ap_const_lv2_3 = "11";
const sc_lv<32> crypto_sign_open::ap_const_lv32_9 = "1001";
const sc_lv<64> crypto_sign_open::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> crypto_sign_open::ap_const_lv64_3 = "11";
const sc_lv<64> crypto_sign_open::ap_const_lv64_2 = "10";
const sc_lv<64> crypto_sign_open::ap_const_lv64_1 = "1";
const sc_lv<4> crypto_sign_open::ap_const_lv4_F = "1111";
const sc_lv<4> crypto_sign_open::ap_const_lv4_E = "1110";
const sc_lv<4> crypto_sign_open::ap_const_lv4_D = "1101";
const sc_lv<4> crypto_sign_open::ap_const_lv4_C = "1100";
const sc_lv<4> crypto_sign_open::ap_const_lv4_B = "1011";
const sc_lv<4> crypto_sign_open::ap_const_lv4_A = "1010";
const sc_lv<4> crypto_sign_open::ap_const_lv4_0 = "0000";
const sc_lv<5> crypto_sign_open::ap_const_lv5_10 = "10000";
const sc_lv<5> crypto_sign_open::ap_const_lv5_1 = "1";
const sc_lv<6> crypto_sign_open::ap_const_lv6_11 = "10001";
const sc_lv<64> crypto_sign_open::ap_const_lv64_FFFFFFFFFFFFFFFB = "1111111111111111111111111111111111111111111111111111111111111011";
const sc_lv<64> crypto_sign_open::ap_const_lv64_FFFFFFFFFFFFFFFC = "1111111111111111111111111111111111111111111111111111111111111100";
const sc_lv<32> crypto_sign_open::ap_const_lv32_D = "1101";
const bool crypto_sign_open::ap_const_boolean_1 = true;

crypto_sign_open::crypto_sign_open(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pubkey_0_plaintext_U = new crypto_sign_open_Mgi("pubkey_0_plaintext_U");
    pubkey_0_plaintext_U->clk(ap_clk);
    pubkey_0_plaintext_U->reset(ap_rst);
    pubkey_0_plaintext_U->address0(pubkey_0_plaintext_address0);
    pubkey_0_plaintext_U->ce0(pubkey_0_plaintext_ce0);
    pubkey_0_plaintext_U->we0(pubkey_0_plaintext_we0);
    pubkey_0_plaintext_U->d0(pk_q0);
    pubkey_0_plaintext_U->q0(pubkey_0_plaintext_q0);
    pubkey_0_plaintext_U->address1(grp_picnic_verify_fu_288_pk_0_plaintext_address1);
    pubkey_0_plaintext_U->ce1(pubkey_0_plaintext_ce1);
    pubkey_0_plaintext_U->q1(pubkey_0_plaintext_q1);
    pubkey_0_ciphertext_U = new crypto_sign_open_Mgi("pubkey_0_ciphertext_U");
    pubkey_0_ciphertext_U->clk(ap_clk);
    pubkey_0_ciphertext_U->reset(ap_rst);
    pubkey_0_ciphertext_U->address0(pubkey_0_ciphertext_address0);
    pubkey_0_ciphertext_U->ce0(pubkey_0_ciphertext_ce0);
    pubkey_0_ciphertext_U->we0(pubkey_0_ciphertext_we0);
    pubkey_0_ciphertext_U->d0(pk_q0);
    pubkey_0_ciphertext_U->q0(pubkey_0_ciphertext_q0);
    pubkey_0_ciphertext_U->address1(grp_picnic_verify_fu_288_pk_0_ciphertext_address1);
    pubkey_0_ciphertext_U->ce1(pubkey_0_ciphertext_ce1);
    pubkey_0_ciphertext_U->q1(pubkey_0_ciphertext_q1);
    grp_picnic_verify_fu_288 = new picnic_verify("grp_picnic_verify_fu_288");
    grp_picnic_verify_fu_288->ap_clk(ap_clk);
    grp_picnic_verify_fu_288->ap_rst(ap_rst);
    grp_picnic_verify_fu_288->ap_start(grp_picnic_verify_fu_288_ap_start);
    grp_picnic_verify_fu_288->ap_done(grp_picnic_verify_fu_288_ap_done);
    grp_picnic_verify_fu_288->ap_idle(grp_picnic_verify_fu_288_ap_idle);
    grp_picnic_verify_fu_288->ap_ready(grp_picnic_verify_fu_288_ap_ready);
    grp_picnic_verify_fu_288->pk_0_params_read(pubkey_0_params_reg_534);
    grp_picnic_verify_fu_288->pk_0_plaintext_address0(grp_picnic_verify_fu_288_pk_0_plaintext_address0);
    grp_picnic_verify_fu_288->pk_0_plaintext_ce0(grp_picnic_verify_fu_288_pk_0_plaintext_ce0);
    grp_picnic_verify_fu_288->pk_0_plaintext_q0(pubkey_0_plaintext_q0);
    grp_picnic_verify_fu_288->pk_0_plaintext_address1(grp_picnic_verify_fu_288_pk_0_plaintext_address1);
    grp_picnic_verify_fu_288->pk_0_plaintext_ce1(grp_picnic_verify_fu_288_pk_0_plaintext_ce1);
    grp_picnic_verify_fu_288->pk_0_plaintext_q1(pubkey_0_plaintext_q1);
    grp_picnic_verify_fu_288->pk_0_ciphertext_address0(grp_picnic_verify_fu_288_pk_0_ciphertext_address0);
    grp_picnic_verify_fu_288->pk_0_ciphertext_ce0(grp_picnic_verify_fu_288_pk_0_ciphertext_ce0);
    grp_picnic_verify_fu_288->pk_0_ciphertext_q0(pubkey_0_ciphertext_q0);
    grp_picnic_verify_fu_288->pk_0_ciphertext_address1(grp_picnic_verify_fu_288_pk_0_ciphertext_address1);
    grp_picnic_verify_fu_288->pk_0_ciphertext_ce1(grp_picnic_verify_fu_288_pk_0_ciphertext_ce1);
    grp_picnic_verify_fu_288->pk_0_ciphertext_q1(pubkey_0_ciphertext_q1);
    grp_picnic_verify_fu_288->message_address0(grp_picnic_verify_fu_288_message_address0);
    grp_picnic_verify_fu_288->message_ce0(grp_picnic_verify_fu_288_message_ce0);
    grp_picnic_verify_fu_288->message_q0(sm_q0);
    grp_picnic_verify_fu_288->message_address1(grp_picnic_verify_fu_288_message_address1);
    grp_picnic_verify_fu_288->message_ce1(grp_picnic_verify_fu_288_message_ce1);
    grp_picnic_verify_fu_288->message_q1(sm_q1);
    grp_picnic_verify_fu_288->message_len(message_len_reg_607);
    grp_picnic_verify_fu_288->signature_offset(sub_ln146_reg_601);
    grp_picnic_verify_fu_288->signature_len(signature_len_reg_593);
    grp_picnic_verify_fu_288->viewOutputs_address0(grp_picnic_verify_fu_288_viewOutputs_address0);
    grp_picnic_verify_fu_288->viewOutputs_ce0(grp_picnic_verify_fu_288_viewOutputs_ce0);
    grp_picnic_verify_fu_288->viewOutputs_we0(grp_picnic_verify_fu_288_viewOutputs_we0);
    grp_picnic_verify_fu_288->viewOutputs_d0(grp_picnic_verify_fu_288_viewOutputs_d0);
    grp_picnic_verify_fu_288->viewOutputs_q0(viewOutputs_q0);
    grp_picnic_verify_fu_288->ap_return(grp_picnic_verify_fu_288_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln142_fu_462_p2);
    sensitive << ( smlen );

    SC_METHOD(thread_add_ln155_fu_498_p2);
    sensitive << ( loop_0_reg_257 );

    SC_METHOD(thread_add_ln582_1_fu_432_p2);
    sensitive << ( zext_ln581_fu_416_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_268 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_empty_188_fu_322_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_189_fu_328_p2);
    sensitive << ( empty_188_fu_322_p2 );
    sensitive << ( empty_fu_316_p2 );

    SC_METHOD(thread_empty_190_fu_334_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_191_fu_340_p2);
    sensitive << ( empty_190_fu_334_p2 );
    sensitive << ( empty_189_fu_328_p2 );

    SC_METHOD(thread_empty_192_fu_346_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_193_fu_352_p2);
    sensitive << ( empty_192_fu_346_p2 );
    sensitive << ( empty_191_fu_340_p2 );

    SC_METHOD(thread_empty_194_fu_358_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_195_fu_364_p2);
    sensitive << ( empty_194_fu_358_p2 );
    sensitive << ( empty_193_fu_352_p2 );

    SC_METHOD(thread_empty_196_fu_370_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_197_fu_376_p2);
    sensitive << ( empty_196_fu_370_p2 );
    sensitive << ( empty_195_fu_364_p2 );

    SC_METHOD(thread_empty_198_fu_382_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_empty_199_fu_388_p2);
    sensitive << ( empty_198_fu_382_p2 );
    sensitive << ( empty_197_fu_376_p2 );

    SC_METHOD(thread_empty_fu_316_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_0_params_fu_312_p1 );

    SC_METHOD(thread_grp_picnic_verify_fu_288_ap_start);
    sensitive << ( grp_picnic_verify_fu_288_ap_start_reg );

    SC_METHOD(thread_icmp_ln142_fu_467_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln142_fu_458_p1 );
    sensitive << ( add_ln142_fu_462_p2 );

    SC_METHOD(thread_icmp_ln154_fu_487_p2);
    sensitive << ( message_len_reg_607 );
    sensitive << ( sext_ln154_fu_483_p1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_icmp_ln576_fu_394_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( loop_0_i_reg_233 );

    SC_METHOD(thread_icmp_ln581_fu_420_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( loop_1_i_reg_245 );

    SC_METHOD(thread_loop_38_fu_400_p2);
    sensitive << ( loop_0_i_reg_233 );

    SC_METHOD(thread_loop_39_fu_426_p2);
    sensitive << ( loop_1_i_reg_245 );

    SC_METHOD(thread_loop_fu_492_p2);
    sensitive << ( loop_0_reg_257 );

    SC_METHOD(thread_m_address0);
    sensitive << ( sext_ln154_reg_617 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_d0);
    sensitive << ( sm_q0 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_message_len_fu_478_p2);
    sensitive << ( sub_ln146_reg_601 );

    SC_METHOD(thread_mlen_address0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_mlen_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_mlen_d0);
    sensitive << ( message_len_reg_607 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_mlen_we0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln154_fu_487_p2 );

    SC_METHOD(thread_pk_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln577_fu_406_p1 );
    sensitive << ( zext_ln582_fu_438_p1 );

    SC_METHOD(thread_pk_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_pubkey_0_ciphertext_address0);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_ciphertext_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln577_1_fu_411_p1 );

    SC_METHOD(thread_pubkey_0_ciphertext_ce0);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_ciphertext_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pubkey_0_ciphertext_ce1);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_ciphertext_ce1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pubkey_0_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pubkey_0_params_fu_312_p1);
    sensitive << ( pk_q0 );

    SC_METHOD(thread_pubkey_0_plaintext_address0);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_plaintext_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln582_1_fu_443_p1 );

    SC_METHOD(thread_pubkey_0_plaintext_ce0);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_plaintext_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pubkey_0_plaintext_ce1);
    sensitive << ( grp_picnic_verify_fu_288_pk_0_plaintext_ce1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pubkey_0_plaintext_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sext_ln154_fu_483_p1);
    sensitive << ( loop_0_reg_257 );

    SC_METHOD(thread_sext_ln155_fu_504_p1);
    sensitive << ( add_ln155_fu_498_p2 );

    SC_METHOD(thread_signature_len_fu_448_p5);
    sensitive << ( sm_q0 );
    sensitive << ( sm_q1 );
    sensitive << ( sm_load_reg_578 );
    sensitive << ( sm_load_1_reg_583 );

    SC_METHOD(thread_sm_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_picnic_verify_fu_288_message_address0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( sext_ln155_fu_504_p1 );

    SC_METHOD(thread_sm_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_verify_fu_288_message_address1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sm_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_picnic_verify_fu_288_message_ce0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sm_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_verify_fu_288_message_ce1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_sub_ln146_fu_473_p2);
    sensitive << ( smlen );
    sensitive << ( zext_ln142_fu_458_p1 );

    SC_METHOD(thread_viewOutputs_address0);
    sensitive << ( grp_picnic_verify_fu_288_viewOutputs_address0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_viewOutputs_ce0);
    sensitive << ( grp_picnic_verify_fu_288_viewOutputs_ce0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_viewOutputs_d0);
    sensitive << ( grp_picnic_verify_fu_288_viewOutputs_d0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_viewOutputs_we0);
    sensitive << ( grp_picnic_verify_fu_288_viewOutputs_we0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_zext_ln142_fu_458_p1);
    sensitive << ( signature_len_fu_448_p5 );

    SC_METHOD(thread_zext_ln577_1_fu_411_p1);
    sensitive << ( loop_0_i_reg_233 );

    SC_METHOD(thread_zext_ln577_fu_406_p1);
    sensitive << ( loop_38_fu_400_p2 );

    SC_METHOD(thread_zext_ln581_fu_416_p1);
    sensitive << ( loop_1_i_reg_245 );

    SC_METHOD(thread_zext_ln582_1_fu_443_p1);
    sensitive << ( loop_1_i_reg_245 );

    SC_METHOD(thread_zext_ln582_fu_438_p1);
    sensitive << ( add_ln582_1_fu_432_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln576_fu_394_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln581_fu_420_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln142_fu_467_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln154_fu_487_p2 );
    sensitive << ( grp_picnic_verify_fu_288_ap_done );
    sensitive << ( grp_picnic_verify_fu_288_ap_return );
    sensitive << ( empty_199_fu_388_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000001";
    grp_picnic_verify_fu_288_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_sign_open_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_we0, "(port)m_we0");
    sc_trace(mVcdFile, m_d0, "(port)m_d0");
    sc_trace(mVcdFile, mlen_address0, "(port)mlen_address0");
    sc_trace(mVcdFile, mlen_ce0, "(port)mlen_ce0");
    sc_trace(mVcdFile, mlen_we0, "(port)mlen_we0");
    sc_trace(mVcdFile, mlen_d0, "(port)mlen_d0");
    sc_trace(mVcdFile, sm_address0, "(port)sm_address0");
    sc_trace(mVcdFile, sm_ce0, "(port)sm_ce0");
    sc_trace(mVcdFile, sm_q0, "(port)sm_q0");
    sc_trace(mVcdFile, sm_address1, "(port)sm_address1");
    sc_trace(mVcdFile, sm_ce1, "(port)sm_ce1");
    sc_trace(mVcdFile, sm_q1, "(port)sm_q1");
    sc_trace(mVcdFile, smlen, "(port)smlen");
    sc_trace(mVcdFile, pk_address0, "(port)pk_address0");
    sc_trace(mVcdFile, pk_ce0, "(port)pk_ce0");
    sc_trace(mVcdFile, pk_q0, "(port)pk_q0");
    sc_trace(mVcdFile, viewOutputs_address0, "(port)viewOutputs_address0");
    sc_trace(mVcdFile, viewOutputs_ce0, "(port)viewOutputs_ce0");
    sc_trace(mVcdFile, viewOutputs_we0, "(port)viewOutputs_we0");
    sc_trace(mVcdFile, viewOutputs_d0, "(port)viewOutputs_d0");
    sc_trace(mVcdFile, viewOutputs_q0, "(port)viewOutputs_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, pubkey_0_params_fu_312_p1, "pubkey_0_params_fu_312_p1");
    sc_trace(mVcdFile, pubkey_0_params_reg_534, "pubkey_0_params_reg_534");
    sc_trace(mVcdFile, loop_38_fu_400_p2, "loop_38_fu_400_p2");
    sc_trace(mVcdFile, loop_38_reg_545, "loop_38_reg_545");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln576_fu_394_p2, "icmp_ln576_fu_394_p2");
    sc_trace(mVcdFile, loop_39_fu_426_p2, "loop_39_fu_426_p2");
    sc_trace(mVcdFile, loop_39_reg_558, "loop_39_reg_558");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln581_fu_420_p2, "icmp_ln581_fu_420_p2");
    sc_trace(mVcdFile, sm_load_reg_578, "sm_load_reg_578");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sm_load_1_reg_583, "sm_load_1_reg_583");
    sc_trace(mVcdFile, signature_len_fu_448_p5, "signature_len_fu_448_p5");
    sc_trace(mVcdFile, signature_len_reg_593, "signature_len_reg_593");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, sub_ln146_fu_473_p2, "sub_ln146_fu_473_p2");
    sc_trace(mVcdFile, sub_ln146_reg_601, "sub_ln146_reg_601");
    sc_trace(mVcdFile, icmp_ln142_fu_467_p2, "icmp_ln142_fu_467_p2");
    sc_trace(mVcdFile, message_len_fu_478_p2, "message_len_fu_478_p2");
    sc_trace(mVcdFile, message_len_reg_607, "message_len_reg_607");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, sext_ln154_fu_483_p1, "sext_ln154_fu_483_p1");
    sc_trace(mVcdFile, sext_ln154_reg_617, "sext_ln154_reg_617");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, loop_fu_492_p2, "loop_fu_492_p2");
    sc_trace(mVcdFile, loop_reg_625, "loop_reg_625");
    sc_trace(mVcdFile, icmp_ln154_fu_487_p2, "icmp_ln154_fu_487_p2");
    sc_trace(mVcdFile, pubkey_0_plaintext_address0, "pubkey_0_plaintext_address0");
    sc_trace(mVcdFile, pubkey_0_plaintext_ce0, "pubkey_0_plaintext_ce0");
    sc_trace(mVcdFile, pubkey_0_plaintext_we0, "pubkey_0_plaintext_we0");
    sc_trace(mVcdFile, pubkey_0_plaintext_q0, "pubkey_0_plaintext_q0");
    sc_trace(mVcdFile, pubkey_0_plaintext_ce1, "pubkey_0_plaintext_ce1");
    sc_trace(mVcdFile, pubkey_0_plaintext_q1, "pubkey_0_plaintext_q1");
    sc_trace(mVcdFile, pubkey_0_ciphertext_address0, "pubkey_0_ciphertext_address0");
    sc_trace(mVcdFile, pubkey_0_ciphertext_ce0, "pubkey_0_ciphertext_ce0");
    sc_trace(mVcdFile, pubkey_0_ciphertext_we0, "pubkey_0_ciphertext_we0");
    sc_trace(mVcdFile, pubkey_0_ciphertext_q0, "pubkey_0_ciphertext_q0");
    sc_trace(mVcdFile, pubkey_0_ciphertext_ce1, "pubkey_0_ciphertext_ce1");
    sc_trace(mVcdFile, pubkey_0_ciphertext_q1, "pubkey_0_ciphertext_q1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_start, "grp_picnic_verify_fu_288_ap_start");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_done, "grp_picnic_verify_fu_288_ap_done");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_idle, "grp_picnic_verify_fu_288_ap_idle");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_ready, "grp_picnic_verify_fu_288_ap_ready");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_plaintext_address0, "grp_picnic_verify_fu_288_pk_0_plaintext_address0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_plaintext_ce0, "grp_picnic_verify_fu_288_pk_0_plaintext_ce0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_plaintext_address1, "grp_picnic_verify_fu_288_pk_0_plaintext_address1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_plaintext_ce1, "grp_picnic_verify_fu_288_pk_0_plaintext_ce1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_ciphertext_address0, "grp_picnic_verify_fu_288_pk_0_ciphertext_address0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_ciphertext_ce0, "grp_picnic_verify_fu_288_pk_0_ciphertext_ce0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_ciphertext_address1, "grp_picnic_verify_fu_288_pk_0_ciphertext_address1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_pk_0_ciphertext_ce1, "grp_picnic_verify_fu_288_pk_0_ciphertext_ce1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_message_address0, "grp_picnic_verify_fu_288_message_address0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_message_ce0, "grp_picnic_verify_fu_288_message_ce0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_message_address1, "grp_picnic_verify_fu_288_message_address1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_message_ce1, "grp_picnic_verify_fu_288_message_ce1");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_viewOutputs_address0, "grp_picnic_verify_fu_288_viewOutputs_address0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_viewOutputs_ce0, "grp_picnic_verify_fu_288_viewOutputs_ce0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_viewOutputs_we0, "grp_picnic_verify_fu_288_viewOutputs_we0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_viewOutputs_d0, "grp_picnic_verify_fu_288_viewOutputs_d0");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_return, "grp_picnic_verify_fu_288_ap_return");
    sc_trace(mVcdFile, loop_0_i_reg_233, "loop_0_i_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, empty_199_fu_388_p2, "empty_199_fu_388_p2");
    sc_trace(mVcdFile, loop_1_i_reg_245, "loop_1_i_reg_245");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, loop_0_reg_257, "loop_0_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, p_0_reg_268, "p_0_reg_268");
    sc_trace(mVcdFile, grp_picnic_verify_fu_288_ap_start_reg, "grp_picnic_verify_fu_288_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln577_fu_406_p1, "zext_ln577_fu_406_p1");
    sc_trace(mVcdFile, zext_ln577_1_fu_411_p1, "zext_ln577_1_fu_411_p1");
    sc_trace(mVcdFile, zext_ln582_fu_438_p1, "zext_ln582_fu_438_p1");
    sc_trace(mVcdFile, zext_ln582_1_fu_443_p1, "zext_ln582_1_fu_443_p1");
    sc_trace(mVcdFile, sext_ln155_fu_504_p1, "sext_ln155_fu_504_p1");
    sc_trace(mVcdFile, empty_188_fu_322_p2, "empty_188_fu_322_p2");
    sc_trace(mVcdFile, empty_fu_316_p2, "empty_fu_316_p2");
    sc_trace(mVcdFile, empty_190_fu_334_p2, "empty_190_fu_334_p2");
    sc_trace(mVcdFile, empty_189_fu_328_p2, "empty_189_fu_328_p2");
    sc_trace(mVcdFile, empty_192_fu_346_p2, "empty_192_fu_346_p2");
    sc_trace(mVcdFile, empty_191_fu_340_p2, "empty_191_fu_340_p2");
    sc_trace(mVcdFile, empty_194_fu_358_p2, "empty_194_fu_358_p2");
    sc_trace(mVcdFile, empty_193_fu_352_p2, "empty_193_fu_352_p2");
    sc_trace(mVcdFile, empty_196_fu_370_p2, "empty_196_fu_370_p2");
    sc_trace(mVcdFile, empty_195_fu_364_p2, "empty_195_fu_364_p2");
    sc_trace(mVcdFile, empty_198_fu_382_p2, "empty_198_fu_382_p2");
    sc_trace(mVcdFile, empty_197_fu_376_p2, "empty_197_fu_376_p2");
    sc_trace(mVcdFile, zext_ln581_fu_416_p1, "zext_ln581_fu_416_p1");
    sc_trace(mVcdFile, add_ln582_1_fu_432_p2, "add_ln582_1_fu_432_p2");
    sc_trace(mVcdFile, zext_ln142_fu_458_p1, "zext_ln142_fu_458_p1");
    sc_trace(mVcdFile, add_ln142_fu_462_p2, "add_ln142_fu_462_p2");
    sc_trace(mVcdFile, add_ln155_fu_498_p2, "add_ln155_fu_498_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crypto_sign_open.hdltvin.dat");
    mHdltvoutHandle.open("crypto_sign_open.hdltvout.dat");
}

crypto_sign_open::~crypto_sign_open() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pubkey_0_plaintext_U;
    delete pubkey_0_ciphertext_U;
    delete grp_picnic_verify_fu_288;
}

void crypto_sign_open::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_picnic_verify_fu_288_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            grp_picnic_verify_fu_288_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_picnic_verify_fu_288_ap_ready.read())) {
            grp_picnic_verify_fu_288_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, empty_199_fu_388_p2.read()))) {
        loop_0_i_reg_233 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        loop_0_i_reg_233 = loop_38_reg_545.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(grp_picnic_verify_fu_288_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, grp_picnic_verify_fu_288_ap_return.read()))) {
        loop_0_reg_257 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        loop_0_reg_257 = loop_reg_625.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln576_fu_394_p2.read(), ap_const_lv1_1))) {
        loop_1_i_reg_245 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        loop_1_i_reg_245 = loop_39_reg_558.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(grp_picnic_verify_fu_288_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, grp_picnic_verify_fu_288_ap_return.read()))) {
        p_0_reg_268 = ap_const_lv2_3;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln142_fu_467_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, empty_199_fu_388_p2.read())))) {
        p_0_reg_268 = ap_const_lv2_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln154_fu_487_p2.read()))) {
        p_0_reg_268 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        loop_38_reg_545 = loop_38_fu_400_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        loop_39_reg_558 = loop_39_fu_426_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        loop_reg_625 = loop_fu_492_p2.read();
        sext_ln154_reg_617 = sext_ln154_fu_483_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        message_len_reg_607 = message_len_fu_478_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_0_params_reg_534 = pubkey_0_params_fu_312_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        signature_len_reg_593 = signature_len_fu_448_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_load_1_reg_583 = sm_q1.read();
        sm_load_reg_578 = sm_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln142_fu_467_p2.read()))) {
        sub_ln146_reg_601 = sub_ln146_fu_473_p2.read();
    }
}

void crypto_sign_open::thread_add_ln142_fu_462_p2() {
    add_ln142_fu_462_p2 = (!smlen.read().is_01() || !ap_const_lv64_FFFFFFFFFFFFFFFB.is_01())? sc_lv<64>(): (sc_biguint<64>(smlen.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFFB));
}

void crypto_sign_open::thread_add_ln155_fu_498_p2() {
    add_ln155_fu_498_p2 = (!loop_0_reg_257.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<32>(): (sc_bigint<32>(loop_0_reg_257.read()) + sc_biguint<32>(ap_const_lv32_4));
}

void crypto_sign_open::thread_add_ln582_1_fu_432_p2() {
    add_ln582_1_fu_432_p2 = (!zext_ln581_fu_416_p1.read().is_01() || !ap_const_lv6_11.is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln581_fu_416_p1.read()) + sc_biguint<6>(ap_const_lv6_11));
}

void crypto_sign_open::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_sign_open::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void crypto_sign_open::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void crypto_sign_open::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void crypto_sign_open::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void crypto_sign_open::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void crypto_sign_open::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_sign_open::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_sign_open::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_sign_open::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_sign_open::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_sign_open::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_sign_open::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void crypto_sign_open::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void crypto_sign_open::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_ap_return() {
    ap_return = esl_sext<32,2>(p_0_reg_268.read());
}

void crypto_sign_open::thread_empty_188_fu_322_p2() {
    empty_188_fu_322_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_E);
}

void crypto_sign_open::thread_empty_189_fu_328_p2() {
    empty_189_fu_328_p2 = (empty_188_fu_322_p2.read() | empty_fu_316_p2.read());
}

void crypto_sign_open::thread_empty_190_fu_334_p2() {
    empty_190_fu_334_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_D.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_D);
}

void crypto_sign_open::thread_empty_191_fu_340_p2() {
    empty_191_fu_340_p2 = (empty_190_fu_334_p2.read() | empty_189_fu_328_p2.read());
}

void crypto_sign_open::thread_empty_192_fu_346_p2() {
    empty_192_fu_346_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_C);
}

void crypto_sign_open::thread_empty_193_fu_352_p2() {
    empty_193_fu_352_p2 = (empty_192_fu_346_p2.read() | empty_191_fu_340_p2.read());
}

void crypto_sign_open::thread_empty_194_fu_358_p2() {
    empty_194_fu_358_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_B);
}

void crypto_sign_open::thread_empty_195_fu_364_p2() {
    empty_195_fu_364_p2 = (empty_194_fu_358_p2.read() | empty_193_fu_352_p2.read());
}

void crypto_sign_open::thread_empty_196_fu_370_p2() {
    empty_196_fu_370_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_A);
}

void crypto_sign_open::thread_empty_197_fu_376_p2() {
    empty_197_fu_376_p2 = (empty_196_fu_370_p2.read() | empty_195_fu_364_p2.read());
}

void crypto_sign_open::thread_empty_198_fu_382_p2() {
    empty_198_fu_382_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_0);
}

void crypto_sign_open::thread_empty_199_fu_388_p2() {
    empty_199_fu_388_p2 = (empty_198_fu_382_p2.read() | empty_197_fu_376_p2.read());
}

void crypto_sign_open::thread_empty_fu_316_p2() {
    empty_fu_316_p2 = (!pubkey_0_params_fu_312_p1.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(pubkey_0_params_fu_312_p1.read() == ap_const_lv4_F);
}

void crypto_sign_open::thread_grp_picnic_verify_fu_288_ap_start() {
    grp_picnic_verify_fu_288_ap_start = grp_picnic_verify_fu_288_ap_start_reg.read();
}

void crypto_sign_open::thread_icmp_ln142_fu_467_p2() {
    icmp_ln142_fu_467_p2 = (!zext_ln142_fu_458_p1.read().is_01() || !add_ln142_fu_462_p2.read().is_01())? sc_lv<1>(): (sc_biguint<64>(zext_ln142_fu_458_p1.read()) > sc_biguint<64>(add_ln142_fu_462_p2.read()));
}

void crypto_sign_open::thread_icmp_ln154_fu_487_p2() {
    icmp_ln154_fu_487_p2 = (!sext_ln154_fu_483_p1.read().is_01() || !message_len_reg_607.read().is_01())? sc_lv<1>(): (sc_biguint<64>(sext_ln154_fu_483_p1.read()) < sc_biguint<64>(message_len_reg_607.read()));
}

void crypto_sign_open::thread_icmp_ln576_fu_394_p2() {
    icmp_ln576_fu_394_p2 = (!loop_0_i_reg_233.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_i_reg_233.read() == ap_const_lv5_10);
}

void crypto_sign_open::thread_icmp_ln581_fu_420_p2() {
    icmp_ln581_fu_420_p2 = (!loop_1_i_reg_245.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_1_i_reg_245.read() == ap_const_lv5_10);
}

void crypto_sign_open::thread_loop_38_fu_400_p2() {
    loop_38_fu_400_p2 = (!loop_0_i_reg_233.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_0_i_reg_233.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_open::thread_loop_39_fu_426_p2() {
    loop_39_fu_426_p2 = (!loop_1_i_reg_245.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_1_i_reg_245.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_open::thread_loop_fu_492_p2() {
    loop_fu_492_p2 = (!loop_0_reg_257.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(loop_0_reg_257.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void crypto_sign_open::thread_m_address0() {
    m_address0 =  (sc_lv<12>) (sext_ln154_reg_617.read());
}

void crypto_sign_open::thread_m_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_m_d0() {
    m_d0 = sm_q0.read();
}

void crypto_sign_open::thread_m_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        m_we0 = ap_const_logic_1;
    } else {
        m_we0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_message_len_fu_478_p2() {
    message_len_fu_478_p2 = (!sub_ln146_reg_601.read().is_01() || !ap_const_lv64_FFFFFFFFFFFFFFFC.is_01())? sc_lv<64>(): (sc_biguint<64>(sub_ln146_reg_601.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFFC));
}

void crypto_sign_open::thread_mlen_address0() {
    mlen_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void crypto_sign_open::thread_mlen_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        mlen_ce0 = ap_const_logic_1;
    } else {
        mlen_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_mlen_d0() {
    mlen_d0 = message_len_reg_607.read();
}

void crypto_sign_open::thread_mlen_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln154_fu_487_p2.read()))) {
        mlen_we0 = ap_const_logic_1;
    } else {
        mlen_we0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pk_address0 =  (sc_lv<6>) (zext_ln582_fu_438_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pk_address0 =  (sc_lv<6>) (zext_ln577_fu_406_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        pk_address0 =  (sc_lv<6>) (ap_const_lv64_0);
    } else {
        pk_address0 = "XXXXXX";
    }
}

void crypto_sign_open::thread_pk_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        pk_ce0 = ap_const_logic_1;
    } else {
        pk_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pubkey_0_ciphertext_address0 =  (sc_lv<5>) (zext_ln577_1_fu_411_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_ciphertext_address0 = grp_picnic_verify_fu_288_pk_0_ciphertext_address0.read();
    } else {
        pubkey_0_ciphertext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_open::thread_pubkey_0_ciphertext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pubkey_0_ciphertext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_ciphertext_ce0 = grp_picnic_verify_fu_288_pk_0_ciphertext_ce0.read();
    } else {
        pubkey_0_ciphertext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_ciphertext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_ciphertext_ce1 = grp_picnic_verify_fu_288_pk_0_ciphertext_ce1.read();
    } else {
        pubkey_0_ciphertext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_ciphertext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pubkey_0_ciphertext_we0 = ap_const_logic_1;
    } else {
        pubkey_0_ciphertext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_params_fu_312_p1() {
    pubkey_0_params_fu_312_p1 = pk_q0.read().range(4-1, 0);
}

void crypto_sign_open::thread_pubkey_0_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pubkey_0_plaintext_address0 =  (sc_lv<5>) (zext_ln582_1_fu_443_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_plaintext_address0 = grp_picnic_verify_fu_288_pk_0_plaintext_address0.read();
    } else {
        pubkey_0_plaintext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_open::thread_pubkey_0_plaintext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pubkey_0_plaintext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_plaintext_ce0 = grp_picnic_verify_fu_288_pk_0_plaintext_ce0.read();
    } else {
        pubkey_0_plaintext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_plaintext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pubkey_0_plaintext_ce1 = grp_picnic_verify_fu_288_pk_0_plaintext_ce1.read();
    } else {
        pubkey_0_plaintext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_pubkey_0_plaintext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pubkey_0_plaintext_we0 = ap_const_logic_1;
    } else {
        pubkey_0_plaintext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_sext_ln154_fu_483_p1() {
    sext_ln154_fu_483_p1 = esl_sext<64,32>(loop_0_reg_257.read());
}

void crypto_sign_open::thread_sext_ln155_fu_504_p1() {
    sext_ln155_fu_504_p1 = esl_sext<64,32>(add_ln155_fu_498_p2.read());
}

void crypto_sign_open::thread_signature_len_fu_448_p5() {
    signature_len_fu_448_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sm_load_reg_578.read(), sm_load_1_reg_583.read()), sm_q0.read()), sm_q1.read());
}

void crypto_sign_open::thread_sm_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sm_address0 =  (sc_lv<16>) (sext_ln155_fu_504_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_address0 =  (sc_lv<16>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sm_address0 =  (sc_lv<16>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sm_address0 = grp_picnic_verify_fu_288_message_address0.read();
    } else {
        sm_address0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void crypto_sign_open::thread_sm_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_address1 =  (sc_lv<16>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sm_address1 =  (sc_lv<16>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sm_address1 = grp_picnic_verify_fu_288_message_address1.read();
    } else {
        sm_address1 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void crypto_sign_open::thread_sm_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        sm_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sm_ce0 = grp_picnic_verify_fu_288_message_ce0.read();
    } else {
        sm_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_sm_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sm_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sm_ce1 = grp_picnic_verify_fu_288_message_ce1.read();
    } else {
        sm_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_open::thread_sub_ln146_fu_473_p2() {
    sub_ln146_fu_473_p2 = (!smlen.read().is_01() || !zext_ln142_fu_458_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(smlen.read()) - sc_biguint<64>(zext_ln142_fu_458_p1.read()));
}

void crypto_sign_open::thread_viewOutputs_address0() {
    viewOutputs_address0 = grp_picnic_verify_fu_288_viewOutputs_address0.read();
}

void crypto_sign_open::thread_viewOutputs_ce0() {
    viewOutputs_ce0 = grp_picnic_verify_fu_288_viewOutputs_ce0.read();
}

void crypto_sign_open::thread_viewOutputs_d0() {
    viewOutputs_d0 = grp_picnic_verify_fu_288_viewOutputs_d0.read();
}

void crypto_sign_open::thread_viewOutputs_we0() {
    viewOutputs_we0 = grp_picnic_verify_fu_288_viewOutputs_we0.read();
}

void crypto_sign_open::thread_zext_ln142_fu_458_p1() {
    zext_ln142_fu_458_p1 = esl_zext<64,32>(signature_len_fu_448_p5.read());
}

void crypto_sign_open::thread_zext_ln577_1_fu_411_p1() {
    zext_ln577_1_fu_411_p1 = esl_zext<64,5>(loop_0_i_reg_233.read());
}

void crypto_sign_open::thread_zext_ln577_fu_406_p1() {
    zext_ln577_fu_406_p1 = esl_zext<64,5>(loop_38_fu_400_p2.read());
}

void crypto_sign_open::thread_zext_ln581_fu_416_p1() {
    zext_ln581_fu_416_p1 = esl_zext<6,5>(loop_1_i_reg_245.read());
}

void crypto_sign_open::thread_zext_ln582_1_fu_443_p1() {
    zext_ln582_1_fu_443_p1 = esl_zext<64,5>(loop_1_i_reg_245.read());
}

void crypto_sign_open::thread_zext_ln582_fu_438_p1() {
    zext_ln582_fu_438_p1 = esl_zext<64,6>(add_ln582_1_fu_432_p2.read());
}

void crypto_sign_open::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, empty_199_fu_388_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln576_fu_394_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln581_fu_420_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln142_fu_467_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_picnic_verify_fu_288_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_picnic_verify_fu_288_ap_return.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_picnic_verify_fu_288_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_picnic_verify_fu_288_ap_return.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln154_fu_487_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

void crypto_sign_open::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_address0\" :  \"" << m_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_ce0\" :  \"" << m_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_we0\" :  \"" << m_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_d0\" :  \"" << m_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mlen_address0\" :  \"" << mlen_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mlen_ce0\" :  \"" << mlen_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mlen_we0\" :  \"" << mlen_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mlen_d0\" :  \"" << mlen_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_address0\" :  \"" << sm_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_ce0\" :  \"" << sm_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sm_q0\" :  \"" << sm_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_address1\" :  \"" << sm_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_ce1\" :  \"" << sm_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sm_q1\" :  \"" << sm_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"smlen\" :  \"" << smlen.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address0\" :  \"" << pk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce0\" :  \"" << pk_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pk_q0\" :  \"" << pk_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_address0\" :  \"" << viewOutputs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_ce0\" :  \"" << viewOutputs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_we0\" :  \"" << viewOutputs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_d0\" :  \"" << viewOutputs_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"viewOutputs_q0\" :  \"" << viewOutputs_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

