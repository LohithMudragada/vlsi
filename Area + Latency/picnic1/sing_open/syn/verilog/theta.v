// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module theta (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
output   A_we0;
output  [63:0] A_d0;
input  [63:0] A_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg A_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] x_3_fu_190_p2;
reg   [2:0] x_3_reg_438;
wire    ap_CS_fsm_state2;
reg   [2:0] C_addr_reg_443;
wire   [0:0] icmp_ln336_fu_184_p2;
wire   [3:0] zext_ln339_1_fu_201_p1;
reg   [3:0] zext_ln339_1_reg_448;
wire   [2:0] y_fu_211_p2;
reg   [2:0] y_reg_456;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln338_fu_205_p2;
wire   [2:0] x_fu_266_p2;
reg   [2:0] x_reg_469;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln341_fu_260_p2;
wire   [2:0] x_4_fu_370_p2;
reg   [2:0] x_4_reg_487;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln343_fu_364_p2;
wire   [63:0] D_q0;
reg   [63:0] D_load_reg_497;
wire    ap_CS_fsm_state8;
wire   [3:0] zext_ln345_2_fu_381_p1;
reg   [3:0] zext_ln345_2_reg_502;
wire   [2:0] y_2_fu_391_p2;
reg   [2:0] y_2_reg_510;
wire    ap_CS_fsm_state9;
reg   [4:0] A_addr_1_reg_515;
wire   [0:0] icmp_ln344_fu_385_p2;
reg   [2:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [63:0] C_d0;
wire   [63:0] C_q0;
wire   [2:0] C_address1;
reg    C_ce1;
wire   [63:0] C_q1;
reg   [2:0] D_address0;
reg    D_ce0;
reg    D_we0;
wire   [63:0] D_d0;
reg   [2:0] x_0_reg_127;
reg   [2:0] y_0_reg_138;
wire    ap_CS_fsm_state4;
reg   [2:0] x_1_reg_149;
wire    ap_CS_fsm_state6;
reg   [2:0] x_2_reg_161;
reg   [2:0] y_1_reg_173;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln337_fu_196_p1;
wire   [63:0] zext_ln339_fu_244_p1;
wire   [63:0] zext_ln342_fu_292_p1;
wire   [63:0] zext_ln342_1_fu_327_p1;
wire   [63:0] zext_ln342_2_fu_359_p1;
wire   [63:0] zext_ln345_fu_376_p1;
wire   [63:0] zext_ln345_1_fu_424_p1;
wire   [63:0] xor_ln339_fu_249_p2;
wire   [3:0] zext_ln339_2_fu_217_p1;
wire   [3:0] add_ln339_1_fu_229_p2;
wire   [4:0] shl_ln_fu_221_p3;
wire   [4:0] zext_ln339_3_fu_234_p1;
wire   [4:0] add_ln339_fu_238_p2;
wire   [0:0] icmp_ln342_fu_272_p2;
wire   [2:0] xor_ln342_1_fu_278_p2;
wire   [2:0] select_ln342_fu_284_p3;
wire   [3:0] zext_ln341_fu_256_p1;
wire   [3:0] add_ln342_1_fu_297_p2;
wire   [2:0] add_ln342_2_fu_309_p2;
wire   [0:0] icmp_ln342_1_fu_303_p2;
wire  signed [3:0] sext_ln342_fu_315_p1;
wire   [3:0] select_ln342_1_fu_319_p3;
wire   [62:0] trunc_ln342_fu_332_p1;
wire   [0:0] tmp_31_fu_336_p3;
wire   [63:0] or_ln_fu_344_p3;
wire   [3:0] zext_ln345_3_fu_397_p1;
wire   [3:0] add_ln345_1_fu_409_p2;
wire   [4:0] shl_ln2_fu_401_p3;
wire   [4:0] zext_ln345_4_fu_414_p1;
wire   [4:0] add_ln345_fu_418_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

theta_C #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(C_d0),
    .q0(C_q0),
    .address1(C_address1),
    .ce1(C_ce1),
    .q1(C_q1)
);

theta_D #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
D_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_address0),
    .ce0(D_ce0),
    .we0(D_we0),
    .d0(D_d0),
    .q0(D_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_127 <= x_3_reg_438;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_1_reg_149 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_reg_149 <= x_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln341_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_2_reg_161 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln344_fu_385_p2 == 1'd1))) begin
        x_2_reg_161 <= x_4_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_reg_138 <= y_reg_456;
    end else if (((icmp_ln336_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_reg_138 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_1_reg_173 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        y_1_reg_173 <= y_2_reg_510;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln344_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        A_addr_1_reg_515 <= zext_ln345_1_fu_424_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        C_addr_reg_443 <= zext_ln337_fu_196_p1;
        zext_ln339_1_reg_448[2 : 0] <= zext_ln339_1_fu_201_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        D_load_reg_497 <= D_q0;
        zext_ln345_2_reg_502[2 : 0] <= zext_ln345_2_fu_381_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_3_reg_438 <= x_3_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_4_reg_487 <= x_4_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_469 <= x_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_2_reg_510 <= y_2_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_456 <= y_fu_211_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = A_addr_1_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = zext_ln345_1_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln339_fu_244_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_address0 = zext_ln342_fu_292_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        C_address0 = C_addr_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_address0 = zext_ln337_fu_196_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_d0 = xor_ln339_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_d0 = 64'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln336_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        D_address0 = zext_ln345_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        D_address0 = zext_ln342_2_fu_359_p1;
    end else begin
        D_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln343_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln343_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln336_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln338_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln341_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln343_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln344_fu_385_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = (D_load_reg_497 ^ A_q0);

assign C_address1 = zext_ln342_1_fu_327_p1;

assign D_d0 = (or_ln_fu_344_p3 ^ C_q1);

assign add_ln339_1_fu_229_p2 = (zext_ln339_1_reg_448 + zext_ln339_2_fu_217_p1);

assign add_ln339_fu_238_p2 = (shl_ln_fu_221_p3 + zext_ln339_3_fu_234_p1);

assign add_ln342_1_fu_297_p2 = (4'd4 + zext_ln341_fu_256_p1);

assign add_ln342_2_fu_309_p2 = ($signed(3'd7) + $signed(x_1_reg_149));

assign add_ln345_1_fu_409_p2 = (zext_ln345_2_reg_502 + zext_ln345_3_fu_397_p1);

assign add_ln345_fu_418_p2 = (shl_ln2_fu_401_p3 + zext_ln345_4_fu_414_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln336_fu_184_p2 = ((x_0_reg_127 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_205_p2 = ((y_0_reg_138 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln341_fu_260_p2 = ((x_1_reg_149 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln342_1_fu_303_p2 = ((add_ln342_1_fu_297_p2 < 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_272_p2 = ((x_fu_266_p2 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln343_fu_364_p2 = ((x_2_reg_161 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln344_fu_385_p2 = ((y_1_reg_173 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln_fu_344_p3 = {{trunc_ln342_fu_332_p1}, {tmp_31_fu_336_p3}};

assign select_ln342_1_fu_319_p3 = ((icmp_ln342_1_fu_303_p2[0:0] === 1'b1) ? add_ln342_1_fu_297_p2 : sext_ln342_fu_315_p1);

assign select_ln342_fu_284_p3 = ((icmp_ln342_fu_272_p2[0:0] === 1'b1) ? x_fu_266_p2 : xor_ln342_1_fu_278_p2);

assign sext_ln342_fu_315_p1 = $signed(add_ln342_2_fu_309_p2);

assign shl_ln2_fu_401_p3 = {{y_1_reg_173}, {2'd0}};

assign shl_ln_fu_221_p3 = {{y_0_reg_138}, {2'd0}};

assign tmp_31_fu_336_p3 = C_q0[32'd63];

assign trunc_ln342_fu_332_p1 = C_q0[62:0];

assign x_3_fu_190_p2 = (x_0_reg_127 + 3'd1);

assign x_4_fu_370_p2 = (x_2_reg_161 + 3'd1);

assign x_fu_266_p2 = (x_1_reg_149 + 3'd1);

assign xor_ln339_fu_249_p2 = (C_q0 ^ A_q0);

assign xor_ln342_1_fu_278_p2 = (x_1_reg_149 ^ 3'd4);

assign y_2_fu_391_p2 = (y_1_reg_173 + 3'd1);

assign y_fu_211_p2 = (y_0_reg_138 + 3'd1);

assign zext_ln337_fu_196_p1 = x_0_reg_127;

assign zext_ln339_1_fu_201_p1 = x_0_reg_127;

assign zext_ln339_2_fu_217_p1 = y_0_reg_138;

assign zext_ln339_3_fu_234_p1 = add_ln339_1_fu_229_p2;

assign zext_ln339_fu_244_p1 = add_ln339_fu_238_p2;

assign zext_ln341_fu_256_p1 = x_1_reg_149;

assign zext_ln342_1_fu_327_p1 = select_ln342_1_fu_319_p3;

assign zext_ln342_2_fu_359_p1 = x_1_reg_149;

assign zext_ln342_fu_292_p1 = select_ln342_fu_284_p3;

assign zext_ln345_1_fu_424_p1 = add_ln345_fu_418_p2;

assign zext_ln345_2_fu_381_p1 = x_2_reg_161;

assign zext_ln345_3_fu_397_p1 = y_1_reg_173;

assign zext_ln345_4_fu_414_p1 = add_ln345_1_fu_409_p2;

assign zext_ln345_fu_376_p1 = x_2_reg_161;

always @ (posedge ap_clk) begin
    zext_ln339_1_reg_448[3] <= 1'b0;
    zext_ln345_2_reg_502[3] <= 1'b0;
end

endmodule //theta
