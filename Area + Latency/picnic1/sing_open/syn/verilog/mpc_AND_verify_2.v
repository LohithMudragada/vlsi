// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mpc_AND_verify_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_0_read,
        in1_1_read,
        in2_0_read,
        in2_1_read,
        rand_0_tape_address0,
        rand_0_tape_ce0,
        rand_0_tape_q0,
        rand_0_tape_address1,
        rand_0_tape_ce1,
        rand_0_tape_q1,
        rand_0_pos_read,
        view1_communicatedBi_address0,
        view1_communicatedBi_ce0,
        view1_communicatedBi_we0,
        view1_communicatedBi_d0,
        view1_communicatedBi_q0,
        view1_communicatedBits_offset,
        view2_communicatedBi_address0,
        view2_communicatedBi_ce0,
        view2_communicatedBi_q0,
        view2_communicatedBits_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in1_0_read;
input  [7:0] in1_1_read;
input  [7:0] in2_0_read;
input  [7:0] in2_1_read;
output  [8:0] rand_0_tape_address0;
output   rand_0_tape_ce0;
input  [7:0] rand_0_tape_q0;
output  [8:0] rand_0_tape_address1;
output   rand_0_tape_ce1;
input  [7:0] rand_0_tape_q1;
input  [31:0] rand_0_pos_read;
output  [14:0] view1_communicatedBi_address0;
output   view1_communicatedBi_ce0;
output   view1_communicatedBi_we0;
output  [7:0] view1_communicatedBi_d0;
input  [7:0] view1_communicatedBi_q0;
input  [7:0] view1_communicatedBits_offset;
output  [14:0] view2_communicatedBi_address0;
output   view2_communicatedBi_ce0;
input  [7:0] view2_communicatedBi_q0;
input  [7:0] view2_communicatedBits_offset;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rand_0_tape_ce0;
reg rand_0_tape_ce1;
reg[14:0] view1_communicatedBi_address0;
reg view1_communicatedBi_ce0;
reg view1_communicatedBi_we0;
reg view2_communicatedBi_ce0;
reg[31:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] zext_ln54_cast1_reg_372;
wire   [2:0] trunc_ln54_fu_193_p1;
reg   [2:0] trunc_ln54_reg_388;
reg   [14:0] view1_communicatedBi_2_reg_393;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln54_11_fu_218_p1;
reg   [7:0] zext_ln54_11_reg_403;
wire   [7:0] xor_ln752_3_fu_282_p2;
reg   [7:0] xor_ln752_3_reg_410;
wire   [63:0] zext_ln54_fu_157_p1;
wire  signed [63:0] sext_ln54_fu_188_p1;
wire  signed [63:0] sext_ln66_fu_205_p1;
wire  signed [63:0] sext_ln54_1_fu_209_p1;
wire    ap_CS_fsm_state3;
wire   [28:0] lshr_ln_fu_147_p4;
wire   [9:0] zext_ln54_cast_fu_172_p4;
wire   [9:0] add_ln54_fu_182_p2;
wire   [15:0] grp_fu_359_p3;
wire   [15:0] grp_fu_351_p3;
wire   [2:0] xor_ln54_fu_213_p2;
wire   [7:0] lshr_ln54_fu_222_p2;
wire   [7:0] lshr_ln54_6_fu_232_p2;
wire   [0:0] trunc_ln752_fu_238_p1;
wire   [0:0] trunc_ln52_fu_228_p1;
wire   [0:0] xor_ln752_fu_260_p2;
wire   [7:0] and_ln752_fu_242_p2;
wire   [7:0] and_ln752_1_fu_248_p2;
wire   [7:0] zext_ln752_fu_266_p1;
wire   [7:0] and_ln752_2_fu_254_p2;
wire   [7:0] xor_ln752_2_fu_276_p2;
wire   [7:0] xor_ln752_1_fu_270_p2;
wire   [7:0] shl_ln66_fu_288_p2;
wire   [7:0] xor_ln66_fu_293_p2;
wire   [7:0] and_ln66_fu_303_p2;
wire   [7:0] shl_ln66_9_fu_299_p2;
wire   [7:0] lshr_ln54_7_fu_316_p2;
wire   [0:0] trunc_ln54_7_fu_321_p1;
wire   [31:0] add_ln756_fu_329_p2;
wire   [7:0] zext_ln54_12_fu_325_p1;
wire   [7:0] grp_fu_351_p0;
wire   [7:0] grp_fu_351_p1;
wire   [7:0] grp_fu_359_p0;
wire   [7:0] grp_fu_359_p1;
reg   [31:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [2:0] ap_NS_fsm;
wire   [15:0] grp_fu_351_p10;
wire   [15:0] grp_fu_359_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
end

crypto_sign_open_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
crypto_sign_open_g8j_U71(
    .din0(grp_fu_351_p0),
    .din1(grp_fu_351_p1),
    .din2(zext_ln54_cast1_reg_372),
    .dout(grp_fu_351_p3)
);

crypto_sign_open_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
crypto_sign_open_g8j_U72(
    .din0(grp_fu_359_p0),
    .din1(grp_fu_359_p1),
    .din2(zext_ln54_cast1_reg_372),
    .dout(grp_fu_359_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_0_preg <= add_ln756_fu_329_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_1_preg <= xor_ln752_3_reg_410;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
                        ap_return_2_preg[0] <= zext_ln54_12_fu_325_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln54_reg_388 <= trunc_ln54_fu_193_p1;
        zext_ln54_cast1_reg_372 <= {{rand_0_pos_read[18:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        view1_communicatedBi_2_reg_393 <= sext_ln66_fu_205_p1;
        xor_ln752_3_reg_410 <= xor_ln752_3_fu_282_p2;
        zext_ln54_11_reg_403[2 : 0] <= zext_ln54_11_fu_218_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_0 = add_ln756_fu_329_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_1 = xor_ln752_3_reg_410;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_2 = zext_ln54_12_fu_325_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rand_0_tape_ce0 = 1'b1;
    end else begin
        rand_0_tape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rand_0_tape_ce1 = 1'b1;
    end else begin
        rand_0_tape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        view1_communicatedBi_address0 = view1_communicatedBi_2_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        view1_communicatedBi_address0 = sext_ln66_fu_205_p1;
    end else begin
        view1_communicatedBi_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        view1_communicatedBi_ce0 = 1'b1;
    end else begin
        view1_communicatedBi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        view1_communicatedBi_we0 = 1'b1;
    end else begin
        view1_communicatedBi_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        view2_communicatedBi_ce0 = 1'b1;
    end else begin
        view2_communicatedBi_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_182_p2 = (10'd166 + zext_ln54_cast_fu_172_p4);

assign add_ln756_fu_329_p2 = (32'd1 + rand_0_pos_read);

assign and_ln66_fu_303_p2 = (xor_ln66_fu_293_p2 & view1_communicatedBi_q0);

assign and_ln752_1_fu_248_p2 = (in2_0_read & in1_1_read);

assign and_ln752_2_fu_254_p2 = (in2_0_read & in1_0_read);

assign and_ln752_fu_242_p2 = (in2_1_read & in1_0_read);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_fu_351_p0 = 16'd75;

assign grp_fu_351_p1 = grp_fu_351_p10;

assign grp_fu_351_p10 = view2_communicatedBits_offset;

assign grp_fu_359_p0 = 16'd75;

assign grp_fu_359_p1 = grp_fu_359_p10;

assign grp_fu_359_p10 = view1_communicatedBits_offset;

assign lshr_ln54_6_fu_232_p2 = rand_0_tape_q1 >> zext_ln54_11_fu_218_p1;

assign lshr_ln54_7_fu_316_p2 = view2_communicatedBi_q0 >> zext_ln54_11_reg_403;

assign lshr_ln54_fu_222_p2 = rand_0_tape_q0 >> zext_ln54_11_fu_218_p1;

assign lshr_ln_fu_147_p4 = {{rand_0_pos_read[31:3]}};

assign rand_0_tape_address0 = zext_ln54_fu_157_p1;

assign rand_0_tape_address1 = sext_ln54_fu_188_p1;

assign sext_ln54_1_fu_209_p1 = $signed(grp_fu_351_p3);

assign sext_ln54_fu_188_p1 = $signed(add_ln54_fu_182_p2);

assign sext_ln66_fu_205_p1 = $signed(grp_fu_359_p3);

assign shl_ln66_9_fu_299_p2 = xor_ln752_3_reg_410 << zext_ln54_11_reg_403;

assign shl_ln66_fu_288_p2 = 8'd1 << zext_ln54_11_reg_403;

assign trunc_ln52_fu_228_p1 = lshr_ln54_fu_222_p2[0:0];

assign trunc_ln54_7_fu_321_p1 = lshr_ln54_7_fu_316_p2[0:0];

assign trunc_ln54_fu_193_p1 = rand_0_pos_read[2:0];

assign trunc_ln752_fu_238_p1 = lshr_ln54_6_fu_232_p2[0:0];

assign view1_communicatedBi_d0 = (shl_ln66_9_fu_299_p2 | and_ln66_fu_303_p2);

assign view2_communicatedBi_address0 = sext_ln54_1_fu_209_p1;

assign xor_ln54_fu_213_p2 = (trunc_ln54_reg_388 ^ 3'd7);

assign xor_ln66_fu_293_p2 = (shl_ln66_fu_288_p2 ^ 8'd255);

assign xor_ln752_1_fu_270_p2 = (and_ln752_fu_242_p2 ^ and_ln752_1_fu_248_p2);

assign xor_ln752_2_fu_276_p2 = (zext_ln752_fu_266_p1 ^ and_ln752_2_fu_254_p2);

assign xor_ln752_3_fu_282_p2 = (xor_ln752_2_fu_276_p2 ^ xor_ln752_1_fu_270_p2);

assign xor_ln752_fu_260_p2 = (trunc_ln752_fu_238_p1 ^ trunc_ln52_fu_228_p1);

assign zext_ln54_11_fu_218_p1 = xor_ln54_fu_213_p2;

assign zext_ln54_12_fu_325_p1 = trunc_ln54_7_fu_321_p1;

assign zext_ln54_cast_fu_172_p4 = {{rand_0_pos_read[12:3]}};

assign zext_ln54_fu_157_p1 = lshr_ln_fu_147_p4;

assign zext_ln752_fu_266_p1 = xor_ln752_fu_260_p2;

always @ (posedge ap_clk) begin
    zext_ln54_11_reg_403[7:3] <= 5'b00000;
    ap_return_2_preg[7:1] <= 7'b0000000;
end

endmodule //mpc_AND_verify_2
