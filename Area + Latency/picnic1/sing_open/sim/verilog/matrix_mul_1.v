// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        state_offset,
        matrix_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
output  [3:0] output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
input  [4:0] state_offset;
input  [13:0] matrix_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg[3:0] output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] temp_matrix2_address0;
reg    temp_matrix2_ce0;
wire   [31:0] temp_matrix2_q0;
wire   [3:0] trunc_ln127_fu_275_p1;
reg   [3:0] trunc_ln127_reg_928;
wire   [2:0] trunc_ln124_fu_279_p1;
reg   [2:0] trunc_ln124_reg_934;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_289_p2;
reg   [7:0] i_reg_942;
wire   [8:0] shl_ln_fu_299_p3;
reg   [8:0] shl_ln_reg_947;
wire   [0:0] icmp_ln124_fu_283_p2;
wire   [2:0] j_fu_317_p2;
reg   [2:0] j_reg_955;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln125_fu_311_p2;
wire   [31:0] prod_q0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln85_fu_373_p2;
wire   [2:0] i_18_fu_379_p2;
reg   [2:0] i_18_reg_983;
reg   [1:0] tmp_53_reg_988;
reg   [5:0] temp_addr_4_reg_994;
wire   [31:0] x_6_fu_410_p2;
wire    ap_CS_fsm_state7;
wire   [4:0] start_pos_fu_622_p3;
reg   [4:0] start_pos_reg_1004;
wire    ap_CS_fsm_state8;
wire   [4:0] or_ln66_10_fu_630_p2;
reg   [4:0] or_ln66_10_reg_1010;
wire   [7:0] or_ln66_fu_766_p2;
reg   [7:0] or_ln66_reg_1016;
wire   [2:0] loop_fu_894_p2;
reg   [2:0] loop_reg_1024;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln133_fu_888_p2;
wire   [3:0] add_ln134_fu_909_p2;
reg   [3:0] add_ln134_reg_1034;
reg   [5:0] prod_address0;
reg    prod_ce0;
reg    prod_we0;
wire   [31:0] prod_d0;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg   [3:0] temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [7:0] bitNumber_assign_reg_215;
wire    ap_CS_fsm_state9;
reg   [2:0] j_0_reg_227;
wire    ap_CS_fsm_state4;
reg   [31:0] x_0_i_reg_239;
reg   [2:0] i_0_i_reg_249;
reg   [2:0] loop_0_reg_260;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln127_2_fu_341_p1;
wire   [63:0] zext_ln127_3_fu_351_p1;
wire   [63:0] zext_ln127_fu_356_p1;
wire   [63:0] zext_ln85_fu_368_p1;
wire   [63:0] zext_ln66_fu_405_p1;
wire   [63:0] zext_ln134_fu_900_p1;
wire   [63:0] zext_ln134_2_fu_914_p1;
wire   [3:0] shl_ln66_20_fu_881_p2;
reg   [4:0] grp_fu_271_p0;
reg   [4:0] grp_fu_271_p1;
wire   [6:0] trunc_ln126_fu_295_p1;
wire   [8:0] zext_ln125_fu_307_p1;
wire   [8:0] add_ln126_fu_323_p2;
wire   [3:0] zext_ln127_1_fu_332_p1;
wire   [3:0] add_ln127_fu_336_p2;
wire   [13:0] zext_ln126_fu_328_p1;
wire   [13:0] add_ln127_1_fu_346_p2;
wire   [2:0] adjSize_fu_395_p4;
wire   [30:0] lshr_ln_fu_416_p4;
wire   [31:0] zext_ln93_fu_426_p1;
wire   [31:0] y_fu_456_p2;
wire   [29:0] lshr_ln1_fu_462_p4;
wire   [23:0] trunc_ln93_3_fu_446_p4;
wire   [23:0] trunc_ln93_1_fu_442_p1;
wire   [31:0] zext_ln94_fu_472_p1;
wire   [31:0] y_4_fu_500_p2;
wire   [27:0] lshr_ln2_fu_506_p4;
wire   [23:0] trunc_ln94_1_fu_490_p4;
wire   [23:0] xor_ln94_fu_484_p2;
wire   [31:0] zext_ln95_fu_516_p1;
wire   [23:0] trunc_ln95_1_fu_534_p4;
wire   [23:0] xor_ln95_fu_528_p2;
wire   [31:0] y_5_fu_544_p2;
wire   [23:0] trunc_ln_fu_556_p4;
wire   [23:0] xor_ln95_2_fu_550_p2;
wire   [23:0] y_6_fu_574_p2;
wire   [0:0] trunc_ln93_fu_430_p1;
wire   [0:0] tmp_49_fu_476_p3;
wire   [0:0] xor_ln98_fu_588_p2;
wire   [0:0] tmp_48_fu_434_p3;
wire   [0:0] tmp_51_fu_566_p3;
wire   [0:0] tmp_52_fu_580_p3;
wire   [0:0] xor_ln98_2_fu_600_p2;
wire   [0:0] tmp_50_fu_520_p3;
wire   [0:0] xor_ln98_3_fu_606_p2;
wire   [0:0] xor_ln98_1_fu_594_p2;
wire   [0:0] xor_ln98_4_fu_612_p2;
wire   [5:0] zext_ln66_39_fu_637_p1;
wire   [5:0] zext_ln66_40_fu_641_p1;
wire   [0:0] grp_fu_271_p2;
wire   [5:0] sub_ln66_fu_655_p2;
wire   [5:0] sub_ln66_9_fu_667_p2;
reg   [31:0] tmp_54_fu_645_p4;
wire   [5:0] xor_ln66_20_fu_661_p2;
wire   [5:0] select_ln66_fu_673_p3;
wire   [5:0] select_ln66_27_fu_689_p3;
wire   [5:0] sub_ln66_10_fu_697_p2;
wire   [31:0] select_ln66_26_fu_681_p3;
wire   [31:0] zext_ln66_41_fu_703_p1;
wire   [31:0] zext_ln66_42_fu_707_p1;
wire   [31:0] lshr_ln66_fu_711_p2;
wire   [31:0] lshr_ln66_10_fu_717_p2;
wire   [31:0] and_ln66_18_fu_723_p2;
wire   [2:0] xor_ln66_fu_733_p2;
wire   [7:0] zext_ln66_3_fu_738_p1;
wire   [7:0] shl_ln66_fu_742_p2;
wire   [7:0] zext_ln98_fu_618_p1;
wire   [7:0] trunc_ln66_fu_729_p1;
wire   [7:0] xor_ln66_6_fu_748_p2;
wire   [7:0] and_ln66_fu_760_p2;
wire   [7:0] shl_ln66_10_fu_754_p2;
wire   [5:0] zext_ln66_43_fu_772_p1;
wire   [5:0] zext_ln66_44_fu_775_p1;
wire   [5:0] xor_ln66_21_fu_781_p2;
wire   [5:0] select_ln66_28_fu_787_p3;
wire   [5:0] select_ln66_30_fu_803_p3;
wire   [5:0] select_ln66_29_fu_795_p3;
wire   [5:0] xor_ln66_22_fu_811_p2;
wire   [31:0] zext_ln66_45_fu_778_p1;
wire   [31:0] zext_ln66_46_fu_817_p1;
wire   [31:0] shl_ln66_18_fu_829_p2;
reg   [31:0] tmp_55_fu_835_p4;
wire   [31:0] zext_ln66_47_fu_821_p1;
wire   [31:0] zext_ln66_48_fu_825_p1;
wire   [31:0] shl_ln66_19_fu_853_p2;
wire   [31:0] lshr_ln66_11_fu_859_p2;
wire   [31:0] select_ln66_31_fu_845_p3;
wire   [31:0] and_ln66_19_fu_865_p2;
wire   [3:0] zext_ln66_49_fu_878_p1;
wire   [3:0] zext_ln134_1_fu_905_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

matrix_mul_1_temphbi #(
    .DataWidth( 32 ),
    .AddressRange( 10240 ),
    .AddressWidth( 14 ))
temp_matrix2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix2_address0),
    .ce0(temp_matrix2_ce0),
    .q0(temp_matrix2_q0)
);

matrix_mul_prod #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prod_address0),
    .ce0(prod_ce0),
    .we0(prod_we0),
    .d0(prod_d0),
    .q0(prod_q0)
);

matrix_mul_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bitNumber_assign_reg_215 <= i_reg_942;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitNumber_assign_reg_215 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_249 <= i_18_reg_983;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i_reg_249 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_227 <= j_reg_955;
    end else if (((icmp_ln124_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_227 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_0_reg_260 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_0_reg_260 <= loop_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_0_i_reg_239 <= x_6_fu_410_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_0_i_reg_239 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_888_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln134_reg_1034 <= add_ln134_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_18_reg_983 <= i_18_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_942 <= i_fu_289_p2;
        trunc_ln124_reg_934 <= trunc_ln124_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_955 <= j_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_reg_1024 <= loop_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        or_ln66_10_reg_1010[4 : 3] <= or_ln66_10_fu_630_p2[4 : 3];
        or_ln66_reg_1016 <= or_ln66_fu_766_p2;
        start_pos_reg_1004[4 : 3] <= start_pos_fu_622_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_947[8 : 2] <= shl_ln_fu_299_p3[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        temp_addr_4_reg_994[2 : 0] <= zext_ln66_fu_405_p1[2 : 0];
        tmp_53_reg_988 <= {{bitNumber_assign_reg_215[4:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln127_reg_928 <= trunc_ln127_fu_275_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln133_fu_888_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln133_fu_888_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_271_p0 = start_pos_reg_1004;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_271_p0 = start_pos_fu_622_p3;
    end else begin
        grp_fu_271_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_271_p1 = or_ln66_10_reg_1010;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_271_p1 = or_ln66_10_fu_630_p2;
    end else begin
        grp_fu_271_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = zext_ln134_2_fu_914_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = zext_ln127_2_fu_341_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 4'd15;
    end else begin
        output_r_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prod_address0 = zext_ln85_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_address0 = zext_ln127_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        prod_address0 = 64'd0;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = zext_ln134_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_address0 = temp_addr_4_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address0 = zext_ln66_fu_405_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_matrix2_ce0 = 1'b1;
    end else begin
        temp_matrix2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_we0 = shl_ln66_20_fu_881_p2;
    end else begin
        temp_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln124_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln125_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln85_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln133_fu_888_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_fu_323_p2 = (shl_ln_reg_947 + zext_ln125_fu_307_p1);

assign add_ln127_1_fu_346_p2 = (zext_ln126_fu_328_p1 + matrix_offset);

assign add_ln127_fu_336_p2 = (zext_ln127_1_fu_332_p1 + trunc_ln127_reg_928);

assign add_ln134_fu_909_p2 = (zext_ln134_1_fu_905_p1 + trunc_ln127_reg_928);

assign adjSize_fu_395_p4 = {{bitNumber_assign_reg_215[7:5]}};

assign and_ln66_18_fu_723_p2 = (lshr_ln66_fu_711_p2 & lshr_ln66_10_fu_717_p2);

assign and_ln66_19_fu_865_p2 = (shl_ln66_19_fu_853_p2 & lshr_ln66_11_fu_859_p2);

assign and_ln66_fu_760_p2 = (xor_ln66_6_fu_748_p2 & trunc_ln66_fu_729_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_271_p2 = ((grp_fu_271_p0 > grp_fu_271_p1) ? 1'b1 : 1'b0);

assign i_18_fu_379_p2 = (i_0_i_reg_249 + 3'd1);

assign i_fu_289_p2 = (8'd1 + bitNumber_assign_reg_215);

assign icmp_ln124_fu_283_p2 = ((bitNumber_assign_reg_215 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_311_p2 = ((j_0_reg_227 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_888_p2 = ((loop_0_reg_260 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_373_p2 = ((i_0_i_reg_249 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_317_p2 = (j_0_reg_227 + 3'd1);

assign loop_fu_894_p2 = (loop_0_reg_260 + 3'd1);

assign lshr_ln1_fu_462_p4 = {{y_fu_456_p2[31:2]}};

assign lshr_ln2_fu_506_p4 = {{y_4_fu_500_p2[31:4]}};

assign lshr_ln66_10_fu_717_p2 = 32'd4294967295 >> zext_ln66_42_fu_707_p1;

assign lshr_ln66_11_fu_859_p2 = 32'd4294967295 >> zext_ln66_48_fu_825_p1;

assign lshr_ln66_fu_711_p2 = select_ln66_26_fu_681_p3 >> zext_ln66_41_fu_703_p1;

assign lshr_ln_fu_416_p4 = {{x_0_i_reg_239[31:1]}};

assign or_ln66_10_fu_630_p2 = (start_pos_fu_622_p3 | 5'd7);

assign or_ln66_fu_766_p2 = (shl_ln66_10_fu_754_p2 | and_ln66_fu_760_p2);

assign output_r_d0 = temp_q0;

assign prod_d0 = (temp_matrix2_q0 & output_r_q0);

assign select_ln66_26_fu_681_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? tmp_54_fu_645_p4 : temp_q0);

assign select_ln66_27_fu_689_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? xor_ln66_20_fu_661_p2 : zext_ln66_39_fu_637_p1);

assign select_ln66_28_fu_787_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? zext_ln66_43_fu_772_p1 : zext_ln66_44_fu_775_p1);

assign select_ln66_29_fu_795_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? zext_ln66_44_fu_775_p1 : zext_ln66_43_fu_772_p1);

assign select_ln66_30_fu_803_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? xor_ln66_21_fu_781_p2 : zext_ln66_43_fu_772_p1);

assign select_ln66_31_fu_845_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? tmp_55_fu_835_p4 : shl_ln66_18_fu_829_p2);

assign select_ln66_fu_673_p3 = ((grp_fu_271_p2[0:0] === 1'b1) ? sub_ln66_fu_655_p2 : sub_ln66_9_fu_667_p2);

assign shl_ln66_10_fu_754_p2 = zext_ln98_fu_618_p1 << zext_ln66_3_fu_738_p1;

assign shl_ln66_18_fu_829_p2 = zext_ln66_45_fu_778_p1 << zext_ln66_46_fu_817_p1;

assign shl_ln66_19_fu_853_p2 = 32'd4294967295 << zext_ln66_47_fu_821_p1;

assign shl_ln66_20_fu_881_p2 = 4'd1 << zext_ln66_49_fu_878_p1;

assign shl_ln66_fu_742_p2 = 8'd1 << zext_ln66_3_fu_738_p1;

assign shl_ln_fu_299_p3 = {{trunc_ln126_fu_295_p1}, {2'd0}};

assign start_pos_fu_622_p3 = {{tmp_53_reg_988}, {3'd0}};

assign sub_ln66_10_fu_697_p2 = (6'd31 - select_ln66_fu_673_p3);

assign sub_ln66_9_fu_667_p2 = (zext_ln66_40_fu_641_p1 - zext_ln66_39_fu_637_p1);

assign sub_ln66_fu_655_p2 = (zext_ln66_39_fu_637_p1 - zext_ln66_40_fu_641_p1);

assign temp_d0 = (select_ln66_31_fu_845_p3 & and_ln66_19_fu_865_p2);

assign temp_matrix2_address0 = zext_ln127_3_fu_351_p1;

assign tmp_48_fu_434_p3 = x_0_i_reg_239[32'd1];

assign tmp_49_fu_476_p3 = y_fu_456_p2[32'd2];

assign tmp_50_fu_520_p3 = y_4_fu_500_p2[32'd4];

assign tmp_51_fu_566_p3 = y_5_fu_544_p2[32'd8];

assign tmp_52_fu_580_p3 = y_6_fu_574_p2[32'd16];

integer ap_tvar_int_0;

always @ (temp_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_54_fu_645_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_54_fu_645_p4[ap_tvar_int_0] = temp_q0[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln66_18_fu_829_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_55_fu_835_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_55_fu_835_p4[ap_tvar_int_1] = shl_ln66_18_fu_829_p2[31 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln124_fu_279_p1 = bitNumber_assign_reg_215[2:0];

assign trunc_ln126_fu_295_p1 = bitNumber_assign_reg_215[6:0];

assign trunc_ln127_fu_275_p1 = state_offset[3:0];

assign trunc_ln66_fu_729_p1 = and_ln66_18_fu_723_p2[7:0];

assign trunc_ln93_1_fu_442_p1 = x_0_i_reg_239[23:0];

assign trunc_ln93_3_fu_446_p4 = {{x_0_i_reg_239[24:1]}};

assign trunc_ln93_fu_430_p1 = x_0_i_reg_239[0:0];

assign trunc_ln94_1_fu_490_p4 = {{y_fu_456_p2[25:2]}};

assign trunc_ln95_1_fu_534_p4 = {{y_4_fu_500_p2[27:4]}};

assign trunc_ln_fu_556_p4 = {{y_5_fu_544_p2[31:8]}};

assign x_6_fu_410_p2 = (x_0_i_reg_239 ^ prod_q0);

assign xor_ln66_20_fu_661_p2 = (zext_ln66_39_fu_637_p1 ^ 6'd31);

assign xor_ln66_21_fu_781_p2 = (zext_ln66_43_fu_772_p1 ^ 6'd31);

assign xor_ln66_22_fu_811_p2 = (select_ln66_28_fu_787_p3 ^ 6'd31);

assign xor_ln66_6_fu_748_p2 = (shl_ln66_fu_742_p2 ^ 8'd255);

assign xor_ln66_fu_733_p2 = (trunc_ln124_reg_934 ^ 3'd7);

assign xor_ln94_fu_484_p2 = (trunc_ln93_3_fu_446_p4 ^ trunc_ln93_1_fu_442_p1);

assign xor_ln95_2_fu_550_p2 = (xor_ln95_fu_528_p2 ^ trunc_ln95_1_fu_534_p4);

assign xor_ln95_fu_528_p2 = (xor_ln94_fu_484_p2 ^ trunc_ln94_1_fu_490_p4);

assign xor_ln98_1_fu_594_p2 = (xor_ln98_fu_588_p2 ^ tmp_48_fu_434_p3);

assign xor_ln98_2_fu_600_p2 = (tmp_52_fu_580_p3 ^ tmp_51_fu_566_p3);

assign xor_ln98_3_fu_606_p2 = (xor_ln98_2_fu_600_p2 ^ tmp_50_fu_520_p3);

assign xor_ln98_4_fu_612_p2 = (xor_ln98_3_fu_606_p2 ^ xor_ln98_1_fu_594_p2);

assign xor_ln98_fu_588_p2 = (trunc_ln93_fu_430_p1 ^ tmp_49_fu_476_p3);

assign y_4_fu_500_p2 = (zext_ln94_fu_472_p1 ^ y_fu_456_p2);

assign y_5_fu_544_p2 = (zext_ln95_fu_516_p1 ^ y_4_fu_500_p2);

assign y_6_fu_574_p2 = (xor_ln95_2_fu_550_p2 ^ trunc_ln_fu_556_p4);

assign y_fu_456_p2 = (zext_ln93_fu_426_p1 ^ x_0_i_reg_239);

assign zext_ln125_fu_307_p1 = j_0_reg_227;

assign zext_ln126_fu_328_p1 = add_ln126_fu_323_p2;

assign zext_ln127_1_fu_332_p1 = j_0_reg_227;

assign zext_ln127_2_fu_341_p1 = add_ln127_fu_336_p2;

assign zext_ln127_3_fu_351_p1 = add_ln127_1_fu_346_p2;

assign zext_ln127_fu_356_p1 = j_0_reg_227;

assign zext_ln134_1_fu_905_p1 = loop_0_reg_260;

assign zext_ln134_2_fu_914_p1 = add_ln134_reg_1034;

assign zext_ln134_fu_900_p1 = loop_0_reg_260;

assign zext_ln66_39_fu_637_p1 = start_pos_fu_622_p3;

assign zext_ln66_3_fu_738_p1 = xor_ln66_fu_733_p2;

assign zext_ln66_40_fu_641_p1 = or_ln66_10_fu_630_p2;

assign zext_ln66_41_fu_703_p1 = select_ln66_27_fu_689_p3;

assign zext_ln66_42_fu_707_p1 = sub_ln66_10_fu_697_p2;

assign zext_ln66_43_fu_772_p1 = start_pos_reg_1004;

assign zext_ln66_44_fu_775_p1 = or_ln66_10_reg_1010;

assign zext_ln66_45_fu_778_p1 = or_ln66_reg_1016;

assign zext_ln66_46_fu_817_p1 = select_ln66_30_fu_803_p3;

assign zext_ln66_47_fu_821_p1 = select_ln66_29_fu_795_p3;

assign zext_ln66_48_fu_825_p1 = xor_ln66_22_fu_811_p2;

assign zext_ln66_49_fu_878_p1 = tmp_53_reg_988;

assign zext_ln66_fu_405_p1 = adjSize_fu_395_p4;

assign zext_ln85_fu_368_p1 = i_0_i_reg_249;

assign zext_ln93_fu_426_p1 = lshr_ln_fu_416_p4;

assign zext_ln94_fu_472_p1 = lshr_ln1_fu_462_p4;

assign zext_ln95_fu_516_p1 = lshr_ln2_fu_506_p4;

assign zext_ln98_fu_618_p1 = xor_ln98_4_fu_612_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_947[1:0] <= 2'b00;
    temp_addr_4_reg_994[5:3] <= 3'b000;
    start_pos_reg_1004[2:0] <= 3'b000;
    or_ln66_10_reg_1010[2:0] <= 3'b111;
end

endmodule //matrix_mul_1
