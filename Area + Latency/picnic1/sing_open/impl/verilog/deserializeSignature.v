// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module deserializeSignature (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_we0,
        sig_0_proofs_seed1_d0,
        sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_we0,
        sig_0_proofs_seed2_d0,
        sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_we0,
        sig_0_proofs_inputS_d0,
        sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_we0,
        sig_0_proofs_commun_d0,
        sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_we0,
        sig_0_proofs_view3C_d0,
        sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0,
        sig_0_challengeBits_we0,
        sig_0_challengeBits_d0,
        sig_0_challengeBits_q0,
        sig_0_salt_address0,
        sig_0_salt_ce0,
        sig_0_salt_we0,
        sig_0_salt_d0,
        sigBytes_address0,
        sigBytes_ce0,
        sigBytes_q0,
        sigBytes_address1,
        sigBytes_ce1,
        sigBytes_q1,
        sigBytes_offset,
        sigBytesLen,
        params_UnruhGWithout,
        params_transform_rea,
        ap_return
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_pp0_stage0 = 25'd16;
parameter    ap_ST_fsm_state7 = 25'd32;
parameter    ap_ST_fsm_state8 = 25'd64;
parameter    ap_ST_fsm_state9 = 25'd128;
parameter    ap_ST_fsm_pp1_stage0 = 25'd256;
parameter    ap_ST_fsm_state12 = 25'd512;
parameter    ap_ST_fsm_state13 = 25'd1024;
parameter    ap_ST_fsm_state14 = 25'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 25'd4096;
parameter    ap_ST_fsm_state17 = 25'd8192;
parameter    ap_ST_fsm_pp3_stage0 = 25'd16384;
parameter    ap_ST_fsm_state20 = 25'd32768;
parameter    ap_ST_fsm_pp4_stage0 = 25'd65536;
parameter    ap_ST_fsm_state23 = 25'd131072;
parameter    ap_ST_fsm_pp5_stage0 = 25'd262144;
parameter    ap_ST_fsm_state26 = 25'd524288;
parameter    ap_ST_fsm_state27 = 25'd1048576;
parameter    ap_ST_fsm_state28 = 25'd2097152;
parameter    ap_ST_fsm_state29 = 25'd4194304;
parameter    ap_ST_fsm_state30 = 25'd8388608;
parameter    ap_ST_fsm_state31 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] sig_0_proofs_seed1_address0;
output   sig_0_proofs_seed1_ce0;
output   sig_0_proofs_seed1_we0;
output  [7:0] sig_0_proofs_seed1_d0;
output  [11:0] sig_0_proofs_seed2_address0;
output   sig_0_proofs_seed2_ce0;
output   sig_0_proofs_seed2_we0;
output  [7:0] sig_0_proofs_seed2_d0;
output  [9:0] sig_0_proofs_inputS_address0;
output   sig_0_proofs_inputS_ce0;
output   sig_0_proofs_inputS_we0;
output  [31:0] sig_0_proofs_inputS_d0;
output  [14:0] sig_0_proofs_commun_address0;
output   sig_0_proofs_commun_ce0;
output   sig_0_proofs_commun_we0;
output  [7:0] sig_0_proofs_commun_d0;
output  [12:0] sig_0_proofs_view3C_address0;
output   sig_0_proofs_view3C_ce0;
output   sig_0_proofs_view3C_we0;
output  [7:0] sig_0_proofs_view3C_d0;
output  [5:0] sig_0_challengeBits_address0;
output   sig_0_challengeBits_ce0;
output   sig_0_challengeBits_we0;
output  [7:0] sig_0_challengeBits_d0;
input  [7:0] sig_0_challengeBits_q0;
output  [4:0] sig_0_salt_address0;
output   sig_0_salt_ce0;
output   sig_0_salt_we0;
output  [7:0] sig_0_salt_d0;
output  [15:0] sigBytes_address0;
output   sigBytes_ce0;
input  [7:0] sigBytes_q0;
output  [15:0] sigBytes_address1;
output   sigBytes_ce1;
input  [7:0] sigBytes_q1;
input  [63:0] sigBytes_offset;
input  [31:0] sigBytesLen;
input  [6:0] params_UnruhGWithout;
input  [1:0] params_transform_rea;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sig_0_proofs_seed1_ce0;
reg sig_0_proofs_seed1_we0;
reg sig_0_proofs_seed2_ce0;
reg sig_0_proofs_seed2_we0;
reg sig_0_proofs_inputS_ce0;
reg sig_0_proofs_inputS_we0;
reg sig_0_proofs_commun_ce0;
reg sig_0_proofs_commun_we0;
reg sig_0_proofs_view3C_ce0;
reg sig_0_proofs_view3C_we0;
reg[5:0] sig_0_challengeBits_address0;
reg sig_0_challengeBits_ce0;
reg sig_0_challengeBits_we0;
reg sig_0_salt_ce0;
reg sig_0_salt_we0;
reg[15:0] sigBytes_address0;
reg sigBytes_ce0;
reg[15:0] sigBytes_address1;
reg sigBytes_ce1;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] loop_0_reg_447;
reg   [5:0] loop_1_reg_470;
reg   [5:0] loop_2_reg_518;
reg   [6:0] loop_3_reg_530;
reg   [4:0] loop_4_reg_541;
reg   [4:0] loop_5_reg_553;
wire   [63:0] sigBytesLen_cast1_fu_608_p1;
reg   [63:0] sigBytesLen_cast1_reg_1495;
wire   [16:0] trunc_ln54_fu_618_p1;
reg   [16:0] trunc_ln54_reg_1503;
wire   [0:0] icmp_ln1968_fu_612_p2;
wire   [7:0] i_20_fu_628_p2;
reg   [7:0] i_20_reg_1518;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln386_fu_634_p1;
reg   [1:0] trunc_ln386_reg_1523;
wire   [0:0] icmp_ln1940_fu_622_p2;
wire   [63:0] bytesExpected_fu_662_p2;
reg   [63:0] bytesExpected_reg_1533;
wire   [15:0] mul_ln1977_fu_671_p2;
reg   [15:0] mul_ln1977_reg_1539;
wire   [63:0] inputShareSize_2_fu_756_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1979_fu_782_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln2039_fu_787_p2;
reg   [0:0] icmp_ln2039_reg_1553;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] loop_fu_793_p2;
reg   [5:0] loop_reg_1557;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln1951_fu_818_p2;
wire    ap_CS_fsm_state8;
wire   [7:0] i_21_fu_824_p2;
reg   [7:0] i_21_reg_1571;
wire   [1:0] trunc_ln386_4_fu_830_p1;
reg   [1:0] trunc_ln386_4_reg_1576;
wire   [0:0] icmp_ln2048_fu_910_p2;
reg   [0:0] icmp_ln2048_reg_1589;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [5:0] loop_32_fu_916_p2;
reg   [5:0] loop_32_reg_1593;
reg    ap_enable_reg_pp1_iter0;
wire   [14:0] add_ln2052_fu_951_p2;
reg   [14:0] add_ln2052_reg_1603;
wire    ap_CS_fsm_state13;
wire   [7:0] i_fu_963_p2;
reg   [7:0] i_reg_1611;
wire   [0:0] icmp_ln2052_fu_957_p2;
wire   [12:0] zext_ln2058_fu_996_p1;
reg   [12:0] zext_ln2058_reg_1621;
wire    ap_CS_fsm_state14;
wire   [13:0] zext_ln382_fu_1008_p1;
reg   [13:0] zext_ln382_reg_1627;
wire   [2:0] zext_ln386_fu_1072_p1;
reg   [2:0] zext_ln386_reg_1632;
wire   [16:0] add_ln2058_fu_1076_p2;
reg   [16:0] add_ln2058_reg_1637;
wire   [0:0] icmp_ln2057_fu_1081_p2;
reg   [0:0] icmp_ln2057_reg_1645;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state15_pp2_stage0_iter0;
wire    ap_block_state16_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [5:0] loop_33_fu_1087_p2;
reg   [5:0] loop_33_reg_1649;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln2070_fu_1131_p2;
reg   [0:0] icmp_ln2070_reg_1659;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state18_pp3_stage0_iter0;
wire    ap_block_state19_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [6:0] loop_34_fu_1137_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [14:0] add_ln2071_fu_1147_p2;
reg   [14:0] add_ln2071_reg_1668;
wire   [0:0] icmp_ln2075_fu_1181_p2;
reg   [0:0] icmp_ln2075_reg_1678;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state21_pp4_stage0_iter0;
wire    ap_block_state22_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [4:0] loop_35_fu_1187_p2;
reg   [4:0] loop_35_reg_1682;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln2080_fu_1235_p2;
reg   [0:0] icmp_ln2080_reg_1692;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state24_pp5_stage0_iter0;
wire    ap_block_state25_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [4:0] loop_36_fu_1241_p2;
reg   [4:0] loop_36_reg_1696;
reg    ap_enable_reg_pp5_iter0;
wire   [15:0] add_ln2087_fu_1310_p2;
reg   [15:0] add_ln2087_reg_1709;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln2084_fu_1304_p2;
wire    ap_CS_fsm_state27;
wire   [0:0] tmp_64_fu_1316_p3;
wire   [16:0] add_ln2087_6_fu_1399_p2;
reg   [16:0] add_ln2087_6_reg_1730;
wire   [16:0] add_ln2087_8_fu_1423_p2;
reg   [16:0] add_ln2087_8_reg_1735;
reg   [1:0] trunc_ln2087_4_reg_1740;
wire   [4:0] loop_37_fu_1438_p2;
reg   [4:0] loop_37_reg_1745;
reg   [7:0] sigBytes_load_6_reg_1750;
wire    ap_CS_fsm_state28;
reg   [7:0] sigBytes_load_7_reg_1755;
wire   [15:0] add_ln2088_fu_1479_p2;
wire    ap_CS_fsm_state30;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state15;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state17;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state18;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_state20;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state21;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state23;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state24;
reg    ap_enable_reg_pp5_iter1;
reg   [63:0] inputShareSize_reg_424;
reg   [7:0] round_assign_reg_436;
reg   [5:0] ap_phi_mux_loop_0_phi_fu_451_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] round_assign_2_reg_459;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1953_fu_904_p2;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_phi_mux_loop_1_phi_fu_474_p4;
wire    ap_block_pp1_stage0;
reg   [15:0] p_01_rec_reg_482;
wire    ap_CS_fsm_state12;
reg   [7:0] round_assign_3_reg_494;
reg   [14:0] phi_mul_reg_506;
reg   [5:0] ap_phi_mux_loop_2_phi_fu_522_p4;
wire    ap_block_pp2_stage0;
reg   [4:0] ap_phi_mux_loop_4_phi_fu_545_p4;
wire    ap_block_pp4_stage0;
reg   [4:0] ap_phi_mux_loop_5_phi_fu_557_p4;
wire    ap_block_pp5_stage0;
reg   [4:0] loop_6_reg_565;
wire    ap_CS_fsm_state29;
reg   [7:0] p_sum5_pn_reg_576;
reg   [0:0] p_0_reg_589;
wire   [63:0] zext_ln54_13_fu_657_p1;
wire   [63:0] zext_ln2040_2_fu_808_p1;
wire   [63:0] zext_ln2040_fu_813_p1;
wire   [63:0] zext_ln54_12_fu_844_p1;
wire   [63:0] zext_ln2049_3_fu_941_p1;
wire   [63:0] zext_ln2049_fu_946_p1;
wire   [63:0] zext_ln54_14_fu_979_p1;
wire   [63:0] zext_ln2058_3_fu_1112_p1;
wire   [63:0] zext_ln2058_5_fu_1126_p1;
wire   [63:0] zext_ln2071_3_fu_1172_p1;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln2071_4_fu_1177_p1;
wire   [63:0] zext_ln2076_3_fu_1216_p1;
wire   [63:0] zext_ln2076_4_fu_1230_p1;
wire   [63:0] zext_ln2081_3_fu_1270_p1;
wire   [63:0] zext_ln2081_4_fu_1284_p1;
wire   [63:0] zext_ln2087_2_fu_1342_p1;
wire   [63:0] zext_ln2087_5_fu_1375_p1;
wire   [63:0] zext_ln2087_8_fu_1444_p1;
wire   [63:0] zext_ln2087_11_fu_1448_p1;
wire   [63:0] zext_ln2087_12_fu_1470_p1;
wire   [5:0] trunc_ln_fu_638_p4;
wire   [16:0] zext_ln54_fu_648_p1;
wire   [16:0] add_ln54_fu_652_p2;
wire   [6:0] mul_ln1977_fu_671_p1;
wire   [2:0] shl_ln_fu_677_p3;
wire   [2:0] xor_ln54_fu_684_p2;
wire   [7:0] zext_ln54_15_fu_690_p1;
wire   [7:0] lshr_ln54_fu_694_p2;
wire   [2:0] xor_ln54_2_fu_704_p2;
wire   [7:0] zext_ln54_16_fu_710_p1;
wire   [7:0] lshr_ln54_8_fu_714_p2;
wire   [0:0] trunc_ln386_3_fu_700_p1;
wire   [0:0] trunc_ln54_9_fu_720_p1;
wire   [1:0] challenge_fu_724_p3;
wire   [0:0] icmp_ln1942_fu_732_p2;
wire   [0:0] icmp_ln1942_1_fu_738_p2;
wire   [0:0] or_ln1942_fu_744_p2;
wire   [63:0] inputShareSize_1_fu_750_p2;
wire   [63:0] zext_ln1977_fu_767_p1;
wire   [0:0] trunc_ln1976_fu_764_p1;
wire   [63:0] bytesExpected_1_fu_770_p2;
wire   [63:0] bytesExpected_2_fu_775_p3;
wire   [16:0] zext_ln2040_1_fu_799_p1;
wire   [16:0] add_ln2040_fu_803_p2;
wire   [5:0] trunc_ln54_6_fu_834_p4;
wire   [2:0] bitNumber_assign_fu_849_p3;
wire   [2:0] xor_ln54_3_fu_856_p2;
wire   [7:0] zext_ln54_17_fu_862_p1;
wire   [7:0] lshr_ln54_9_fu_866_p2;
wire   [2:0] xor_ln54_4_fu_876_p2;
wire   [7:0] zext_ln54_18_fu_882_p1;
wire   [7:0] lshr_ln54_10_fu_886_p2;
wire   [0:0] trunc_ln386_5_fu_872_p1;
wire   [0:0] trunc_ln54_10_fu_892_p1;
wire   [1:0] challenge_1_fu_896_p3;
wire   [6:0] zext_ln2049_1_fu_922_p1;
wire   [6:0] add_ln2049_fu_926_p2;
wire   [16:0] zext_ln2049_2_fu_932_p1;
wire   [16:0] add_ln2049_1_fu_936_p2;
wire   [5:0] trunc_ln54_8_fu_969_p4;
wire   [11:0] tmp_19_fu_988_p3;
wire   [12:0] tmp_20_fu_1000_p3;
wire   [1:0] trunc_ln386_6_fu_1012_p1;
wire   [2:0] bitNumber_assign_4_fu_1016_p3;
wire   [2:0] xor_ln54_5_fu_1024_p2;
wire   [7:0] zext_ln54_19_fu_1030_p1;
wire   [7:0] lshr_ln54_11_fu_1034_p2;
wire   [2:0] xor_ln54_6_fu_1044_p2;
wire   [7:0] zext_ln54_20_fu_1050_p1;
wire   [7:0] lshr_ln54_12_fu_1054_p2;
wire   [0:0] trunc_ln386_7_fu_1040_p1;
wire   [0:0] trunc_ln54_11_fu_1060_p1;
wire   [1:0] challenge_2_fu_1064_p3;
wire   [16:0] zext_ln2052_fu_984_p1;
wire   [6:0] zext_ln2058_1_fu_1093_p1;
wire   [6:0] add_ln2058_2_fu_1097_p2;
wire   [16:0] zext_ln2058_2_fu_1103_p1;
wire   [16:0] add_ln2058_1_fu_1107_p2;
wire   [13:0] zext_ln2058_4_fu_1117_p1;
wire   [13:0] add_ln2058_3_fu_1121_p2;
wire   [14:0] zext_ln2071_fu_1143_p1;
wire   [7:0] zext_ln2071_1_fu_1153_p1;
wire   [7:0] add_ln2071_1_fu_1157_p2;
wire   [16:0] zext_ln2071_2_fu_1163_p1;
wire   [16:0] add_ln2071_2_fu_1167_p2;
wire   [6:0] zext_ln2076_1_fu_1193_p1;
wire   [6:0] add_ln2076_1_fu_1197_p2;
wire  signed [7:0] sext_ln2076_fu_1203_p1;
wire   [16:0] zext_ln2076_2_fu_1207_p1;
wire   [16:0] add_ln2076_2_fu_1211_p2;
wire   [12:0] zext_ln2076_fu_1221_p1;
wire   [12:0] add_ln2076_fu_1225_p2;
wire   [6:0] zext_ln2081_1_fu_1247_p1;
wire   [6:0] add_ln2081_1_fu_1251_p2;
wire  signed [7:0] sext_ln2081_fu_1257_p1;
wire   [16:0] zext_ln2081_2_fu_1261_p1;
wire   [16:0] add_ln2081_2_fu_1265_p2;
wire   [12:0] zext_ln2081_fu_1275_p1;
wire   [12:0] add_ln2081_fu_1279_p2;
wire   [2:0] add_ln2084_fu_1289_p2;
wire   [1:0] tmp_fu_1294_p4;
wire   [15:0] zext_ln2087_fu_1324_p1;
wire   [15:0] add_ln2087_1_fu_1328_p2;
wire   [16:0] zext_ln2087_1_fu_1333_p1;
wire   [16:0] add_ln2087_2_fu_1337_p2;
wire   [3:0] trunc_ln2086_fu_1347_p1;
wire   [3:0] or_ln2087_fu_1351_p2;
wire   [15:0] zext_ln2087_3_fu_1357_p1;
wire   [15:0] add_ln2087_3_fu_1361_p2;
wire   [16:0] zext_ln2087_4_fu_1366_p1;
wire   [16:0] add_ln2087_4_fu_1370_p2;
wire   [3:0] or_ln2087_1_fu_1380_p2;
wire   [15:0] zext_ln2087_6_fu_1386_p1;
wire   [15:0] add_ln2087_5_fu_1390_p2;
wire   [16:0] zext_ln2087_7_fu_1395_p1;
wire   [3:0] or_ln2087_2_fu_1404_p2;
wire   [15:0] zext_ln2087_9_fu_1410_p1;
wire   [15:0] add_ln2087_7_fu_1414_p2;
wire   [16:0] zext_ln2087_10_fu_1419_p1;
wire   [9:0] tmp_21_fu_1463_p3;
wire   [15:0] zext_ln2088_fu_1475_p1;
reg   [0:0] ap_return_preg;
wire    ap_CS_fsm_state31;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire   [15:0] mul_ln1977_fu_671_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_782_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_782_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1951_fu_818_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state10))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1951_fu_818_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state15))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state18))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state21))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state21);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state24))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state24);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_return_preg <= p_0_reg_589;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd0))) begin
        inputShareSize_reg_424 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inputShareSize_reg_424 <= inputShareSize_2_fu_756_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_782_p2 == 1'd0))) begin
        loop_0_reg_447 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2039_reg_1553 == 1'd0))) begin
        loop_0_reg_447 <= loop_reg_1557;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1951_fu_818_p2 == 1'd0))) begin
        loop_1_reg_470 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2048_reg_1589 == 1'd0))) begin
        loop_1_reg_470 <= loop_32_reg_1593;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2057_reg_1645 == 1'd0))) begin
        loop_2_reg_518 <= loop_33_reg_1649;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_2_reg_518 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        loop_3_reg_530 <= 7'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln2070_fu_1131_p2 == 1'd0))) begin
        loop_3_reg_530 <= loop_34_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        loop_4_reg_541 <= 5'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln2075_reg_1678 == 1'd0))) begin
        loop_4_reg_541 <= loop_35_reg_1682;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        loop_5_reg_553 <= 5'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln2080_reg_1692 == 1'd0))) begin
        loop_5_reg_553 <= loop_36_reg_1696;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln2084_fu_1304_p2 == 1'd1))) begin
        loop_6_reg_565 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        loop_6_reg_565 <= loop_37_reg_1745;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_01_rec_reg_482 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        p_01_rec_reg_482 <= add_ln2088_fu_1479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln2052_fu_957_p2 == 1'd1))) begin
        p_0_reg_589 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (icmp_ln1953_fu_904_p2 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_782_p2 == 1'd1)))) begin
        p_0_reg_589 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_64_fu_1316_p3 == 1'd1))) begin
                p_sum5_pn_reg_576[4] <= 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln2084_fu_1304_p2 == 1'd0))) begin
                p_sum5_pn_reg_576[4] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_mul_reg_506 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        phi_mul_reg_506 <= add_ln2052_reg_1603;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        round_assign_2_reg_459 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln1953_fu_904_p2 == 1'd0))) begin
        round_assign_2_reg_459 <= i_21_reg_1571;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        round_assign_3_reg_494 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        round_assign_3_reg_494 <= i_reg_1611;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd0))) begin
        round_assign_reg_436 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        round_assign_reg_436 <= i_20_reg_1518;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln2052_reg_1603 <= add_ln2052_fu_951_p2;
        i_reg_1611 <= i_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln2058_reg_1637 <= add_ln2058_fu_1076_p2;
        zext_ln2058_reg_1621[11 : 4] <= zext_ln2058_fu_996_p1[11 : 4];
        zext_ln382_reg_1627[12 : 5] <= zext_ln382_fu_1008_p1[12 : 5];
        zext_ln386_reg_1632[1 : 0] <= zext_ln386_fu_1072_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln2070_fu_1131_p2 == 1'd0))) begin
        add_ln2071_reg_1668 <= add_ln2071_fu_1147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_64_fu_1316_p3 == 1'd0))) begin
        add_ln2087_6_reg_1730 <= add_ln2087_6_fu_1399_p2;
        add_ln2087_8_reg_1735 <= add_ln2087_8_fu_1423_p2;
        loop_37_reg_1745 <= loop_37_fu_1438_p2;
        trunc_ln2087_4_reg_1740 <= {{loop_6_reg_565[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln2084_fu_1304_p2 == 1'd1))) begin
        add_ln2087_reg_1709 <= add_ln2087_fu_1310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_622_p2 == 1'd1))) begin
        bytesExpected_reg_1533 <= bytesExpected_fu_662_p2;
        mul_ln1977_reg_1539 <= mul_ln1977_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_20_reg_1518 <= i_20_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_21_reg_1571 <= i_21_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln2039_reg_1553 <= icmp_ln2039_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln2048_reg_1589 <= icmp_ln2048_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln2057_reg_1645 <= icmp_ln2057_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln2070_reg_1659 <= icmp_ln2070_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln2075_reg_1678 <= icmp_ln2075_fu_1181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln2080_reg_1692 <= icmp_ln2080_fu_1235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_32_reg_1593 <= loop_32_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_33_reg_1649 <= loop_33_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_35_reg_1682 <= loop_35_fu_1187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        loop_36_reg_1696 <= loop_36_fu_1241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_reg_1557 <= loop_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sigBytesLen_cast1_reg_1495[31 : 0] <= sigBytesLen_cast1_fu_608_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sigBytes_load_6_reg_1750 <= sigBytes_q0;
        sigBytes_load_7_reg_1755 <= sigBytes_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1951_fu_818_p2 == 1'd1))) begin
        trunc_ln386_4_reg_1576 <= trunc_ln386_4_fu_830_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_622_p2 == 1'd0))) begin
        trunc_ln386_reg_1523 <= trunc_ln386_fu_634_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd0))) begin
        trunc_ln54_reg_1503 <= trunc_ln54_fu_618_p1;
    end
end

always @ (*) begin
    if ((icmp_ln2039_fu_787_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2048_fu_910_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2057_fu_1081_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2070_fu_1131_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2075_fu_1181_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln2080_fu_1235_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2039_reg_1553 == 1'd0))) begin
        ap_phi_mux_loop_0_phi_fu_451_p4 = loop_reg_1557;
    end else begin
        ap_phi_mux_loop_0_phi_fu_451_p4 = loop_0_reg_447;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2048_reg_1589 == 1'd0))) begin
        ap_phi_mux_loop_1_phi_fu_474_p4 = loop_32_reg_1593;
    end else begin
        ap_phi_mux_loop_1_phi_fu_474_p4 = loop_1_reg_470;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2057_reg_1645 == 1'd0))) begin
        ap_phi_mux_loop_2_phi_fu_522_p4 = loop_33_reg_1649;
    end else begin
        ap_phi_mux_loop_2_phi_fu_522_p4 = loop_2_reg_518;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln2075_reg_1678 == 1'd0))) begin
        ap_phi_mux_loop_4_phi_fu_545_p4 = loop_35_reg_1682;
    end else begin
        ap_phi_mux_loop_4_phi_fu_545_p4 = loop_4_reg_541;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln2080_reg_1692 == 1'd0))) begin
        ap_phi_mux_loop_5_phi_fu_557_p4 = loop_36_reg_1696;
    end else begin
        ap_phi_mux_loop_5_phi_fu_557_p4 = loop_5_reg_553;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_return = p_0_reg_589;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sigBytes_address0 = zext_ln2087_11_fu_1448_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        sigBytes_address0 = zext_ln2087_2_fu_1342_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        sigBytes_address0 = zext_ln2081_3_fu_1270_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        sigBytes_address0 = zext_ln2076_3_fu_1216_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        sigBytes_address0 = zext_ln2071_3_fu_1172_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sigBytes_address0 = zext_ln2058_3_fu_1112_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sigBytes_address0 = zext_ln2049_3_fu_941_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sigBytes_address0 = zext_ln2040_2_fu_808_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sigBytes_address0 = zext_ln54_13_fu_657_p1;
    end else begin
        sigBytes_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sigBytes_address1 = zext_ln2087_8_fu_1444_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        sigBytes_address1 = zext_ln2087_5_fu_1375_p1;
    end else begin
        sigBytes_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sigBytes_ce0 = 1'b1;
    end else begin
        sigBytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        sigBytes_ce1 = 1'b1;
    end else begin
        sigBytes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sig_0_challengeBits_address0 = zext_ln54_14_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_challengeBits_address0 = zext_ln54_12_fu_844_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sig_0_challengeBits_address0 = zext_ln2040_fu_813_p1;
    end else begin
        sig_0_challengeBits_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sig_0_challengeBits_ce0 = 1'b1;
    end else begin
        sig_0_challengeBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2039_reg_1553 == 1'd0))) begin
        sig_0_challengeBits_we0 = 1'b1;
    end else begin
        sig_0_challengeBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        sig_0_proofs_commun_ce0 = 1'b1;
    end else begin
        sig_0_proofs_commun_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln2070_reg_1659 == 1'd0))) begin
        sig_0_proofs_commun_we0 = 1'b1;
    end else begin
        sig_0_proofs_commun_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sig_0_proofs_inputS_ce0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sig_0_proofs_inputS_we0 = 1'b1;
    end else begin
        sig_0_proofs_inputS_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        sig_0_proofs_seed1_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln2075_reg_1678 == 1'd0))) begin
        sig_0_proofs_seed1_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        sig_0_proofs_seed2_ce0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln2080_reg_1692 == 1'd0))) begin
        sig_0_proofs_seed2_we0 = 1'b1;
    end else begin
        sig_0_proofs_seed2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sig_0_proofs_view3C_ce0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln2057_reg_1645 == 1'd0))) begin
        sig_0_proofs_view3C_we0 = 1'b1;
    end else begin
        sig_0_proofs_view3C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sig_0_salt_ce0 = 1'b1;
    end else begin
        sig_0_salt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln2048_reg_1589 == 1'd0))) begin
        sig_0_salt_we0 = 1'b1;
    end else begin
        sig_0_salt_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln1968_fu_612_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1940_fu_622_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1979_fu_782_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln2039_fu_787_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln2039_fu_787_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln1951_fu_818_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln1953_fu_904_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln2048_fu_910_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln2048_fu_910_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln2052_fu_957_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln2057_fu_1081_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln2057_fu_1081_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln2070_fu_1131_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln2070_fu_1131_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln2075_fu_1181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln2075_fu_1181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln2080_fu_1235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln2080_fu_1235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln2084_fu_1304_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (tmp_64_fu_1316_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2040_fu_803_p2 = (zext_ln2040_1_fu_799_p1 + trunc_ln54_reg_1503);

assign add_ln2049_1_fu_936_p2 = (zext_ln2049_2_fu_932_p1 + trunc_ln54_reg_1503);

assign add_ln2049_fu_926_p2 = (zext_ln2049_1_fu_922_p1 + 7'd55);

assign add_ln2052_fu_951_p2 = (phi_mul_reg_506 + 15'd75);

assign add_ln2058_1_fu_1107_p2 = (add_ln2058_reg_1637 + zext_ln2058_2_fu_1103_p1);

assign add_ln2058_2_fu_1097_p2 = ($signed(zext_ln2058_1_fu_1093_p1) + $signed(7'd87));

assign add_ln2058_3_fu_1121_p2 = (zext_ln382_reg_1627 + zext_ln2058_4_fu_1117_p1);

assign add_ln2058_fu_1076_p2 = (trunc_ln54_reg_1503 + zext_ln2052_fu_984_p1);

assign add_ln2071_1_fu_1157_p2 = (zext_ln2071_1_fu_1153_p1 + 8'd119);

assign add_ln2071_2_fu_1167_p2 = (add_ln2058_reg_1637 + zext_ln2071_2_fu_1163_p1);

assign add_ln2071_fu_1147_p2 = (phi_mul_reg_506 + zext_ln2071_fu_1143_p1);

assign add_ln2076_1_fu_1197_p2 = ($signed(zext_ln2076_1_fu_1193_p1) + $signed(7'd66));

assign add_ln2076_2_fu_1211_p2 = (add_ln2058_reg_1637 + zext_ln2076_2_fu_1207_p1);

assign add_ln2076_fu_1225_p2 = (zext_ln2058_reg_1621 + zext_ln2076_fu_1221_p1);

assign add_ln2081_1_fu_1251_p2 = ($signed(zext_ln2081_1_fu_1247_p1) + $signed(7'd82));

assign add_ln2081_2_fu_1265_p2 = (add_ln2058_reg_1637 + zext_ln2081_2_fu_1261_p1);

assign add_ln2081_fu_1279_p2 = (zext_ln2058_reg_1621 + zext_ln2081_fu_1275_p1);

assign add_ln2084_fu_1289_p2 = ($signed(zext_ln386_reg_1632) + $signed(3'd7));

assign add_ln2087_1_fu_1328_p2 = (zext_ln2087_fu_1324_p1 + add_ln2087_reg_1709);

assign add_ln2087_2_fu_1337_p2 = (trunc_ln54_reg_1503 + zext_ln2087_1_fu_1333_p1);

assign add_ln2087_3_fu_1361_p2 = (zext_ln2087_3_fu_1357_p1 + add_ln2087_reg_1709);

assign add_ln2087_4_fu_1370_p2 = (trunc_ln54_reg_1503 + zext_ln2087_4_fu_1366_p1);

assign add_ln2087_5_fu_1390_p2 = (zext_ln2087_6_fu_1386_p1 + add_ln2087_reg_1709);

assign add_ln2087_6_fu_1399_p2 = (trunc_ln54_reg_1503 + zext_ln2087_7_fu_1395_p1);

assign add_ln2087_7_fu_1414_p2 = (zext_ln2087_9_fu_1410_p1 + add_ln2087_reg_1709);

assign add_ln2087_8_fu_1423_p2 = (trunc_ln54_reg_1503 + zext_ln2087_10_fu_1419_p1);

assign add_ln2087_fu_1310_p2 = (p_01_rec_reg_482 + 16'd226);

assign add_ln2088_fu_1479_p2 = (zext_ln2088_fu_1475_p1 + p_01_rec_reg_482);

assign add_ln54_fu_652_p2 = (trunc_ln54_reg_1503 + zext_ln54_fu_648_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign bitNumber_assign_4_fu_1016_p3 = {{trunc_ln386_6_fu_1012_p1}, {1'd0}};

assign bitNumber_assign_fu_849_p3 = {{trunc_ln386_4_reg_1576}, {1'd0}};

assign bytesExpected_1_fu_770_p2 = (bytesExpected_reg_1533 + zext_ln1977_fu_767_p1);

assign bytesExpected_2_fu_775_p3 = ((trunc_ln1976_fu_764_p1[0:0] === 1'b1) ? bytesExpected_1_fu_770_p2 : bytesExpected_reg_1533);

assign bytesExpected_fu_662_p2 = (64'd30528 + inputShareSize_reg_424);

assign challenge_1_fu_896_p3 = {{trunc_ln386_5_fu_872_p1}, {trunc_ln54_10_fu_892_p1}};

assign challenge_2_fu_1064_p3 = {{trunc_ln386_7_fu_1040_p1}, {trunc_ln54_11_fu_1060_p1}};

assign challenge_fu_724_p3 = {{trunc_ln386_3_fu_700_p1}, {trunc_ln54_9_fu_720_p1}};

assign i_20_fu_628_p2 = (round_assign_reg_436 + 8'd1);

assign i_21_fu_824_p2 = (round_assign_2_reg_459 + 8'd1);

assign i_fu_963_p2 = (round_assign_3_reg_494 + 8'd1);

assign icmp_ln1940_fu_622_p2 = ((round_assign_reg_436 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1942_1_fu_738_p2 = ((challenge_fu_724_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln1942_fu_732_p2 = ((challenge_fu_724_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln1951_fu_818_p2 = ((round_assign_2_reg_459 < 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln1953_fu_904_p2 = ((challenge_1_fu_896_p3 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1968_fu_612_p2 = ((sigBytesLen < 32'd55) ? 1'b1 : 1'b0);

assign icmp_ln1979_fu_782_p2 = ((bytesExpected_2_fu_775_p3 > sigBytesLen_cast1_reg_1495) ? 1'b1 : 1'b0);

assign icmp_ln2039_fu_787_p2 = ((ap_phi_mux_loop_0_phi_fu_451_p4 == 6'd55) ? 1'b1 : 1'b0);

assign icmp_ln2048_fu_910_p2 = ((ap_phi_mux_loop_1_phi_fu_474_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2052_fu_957_p2 = ((round_assign_3_reg_494 == 8'd219) ? 1'b1 : 1'b0);

assign icmp_ln2057_fu_1081_p2 = ((ap_phi_mux_loop_2_phi_fu_522_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln2070_fu_1131_p2 = ((loop_3_reg_530 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln2075_fu_1181_p2 = ((ap_phi_mux_loop_4_phi_fu_545_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2080_fu_1235_p2 = ((ap_phi_mux_loop_5_phi_fu_557_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln2084_fu_1304_p2 = ((tmp_fu_1294_p4 == 2'd0) ? 1'b1 : 1'b0);

assign inputShareSize_1_fu_750_p2 = (64'd16 + inputShareSize_reg_424);

assign inputShareSize_2_fu_756_p3 = ((or_ln1942_fu_744_p2[0:0] === 1'b1) ? inputShareSize_1_fu_750_p2 : inputShareSize_reg_424);

assign loop_32_fu_916_p2 = (ap_phi_mux_loop_1_phi_fu_474_p4 + 6'd1);

assign loop_33_fu_1087_p2 = (ap_phi_mux_loop_2_phi_fu_522_p4 + 6'd1);

assign loop_34_fu_1137_p2 = (loop_3_reg_530 + 7'd1);

assign loop_35_fu_1187_p2 = (ap_phi_mux_loop_4_phi_fu_545_p4 + 5'd1);

assign loop_36_fu_1241_p2 = (ap_phi_mux_loop_5_phi_fu_557_p4 + 5'd1);

assign loop_37_fu_1438_p2 = (5'd4 + loop_6_reg_565);

assign loop_fu_793_p2 = (ap_phi_mux_loop_0_phi_fu_451_p4 + 6'd1);

assign lshr_ln54_10_fu_886_p2 = sig_0_challengeBits_q0 >> zext_ln54_18_fu_882_p1;

assign lshr_ln54_11_fu_1034_p2 = sig_0_challengeBits_q0 >> zext_ln54_19_fu_1030_p1;

assign lshr_ln54_12_fu_1054_p2 = sig_0_challengeBits_q0 >> zext_ln54_20_fu_1050_p1;

assign lshr_ln54_8_fu_714_p2 = sigBytes_q0 >> zext_ln54_16_fu_710_p1;

assign lshr_ln54_9_fu_866_p2 = sig_0_challengeBits_q0 >> zext_ln54_17_fu_862_p1;

assign lshr_ln54_fu_694_p2 = sigBytes_q0 >> zext_ln54_15_fu_690_p1;

assign mul_ln1977_fu_671_p1 = mul_ln1977_fu_671_p10;

assign mul_ln1977_fu_671_p10 = params_UnruhGWithout;

assign mul_ln1977_fu_671_p2 = (16'd219 * mul_ln1977_fu_671_p1);

assign or_ln1942_fu_744_p2 = (icmp_ln1942_fu_732_p2 | icmp_ln1942_1_fu_738_p2);

assign or_ln2087_1_fu_1380_p2 = (trunc_ln2086_fu_1347_p1 | 4'd2);

assign or_ln2087_2_fu_1404_p2 = (trunc_ln2086_fu_1347_p1 | 4'd3);

assign or_ln2087_fu_1351_p2 = (trunc_ln2086_fu_1347_p1 | 4'd1);

assign sext_ln2076_fu_1203_p1 = $signed(add_ln2076_1_fu_1197_p2);

assign sext_ln2081_fu_1257_p1 = $signed(add_ln2081_1_fu_1251_p2);

assign shl_ln_fu_677_p3 = {{trunc_ln386_reg_1523}, {1'd0}};

assign sigBytesLen_cast1_fu_608_p1 = sigBytesLen;

assign sig_0_challengeBits_d0 = sigBytes_q0;

assign sig_0_proofs_commun_address0 = zext_ln2071_4_fu_1177_p1;

assign sig_0_proofs_commun_d0 = sigBytes_q0;

assign sig_0_proofs_inputS_address0 = zext_ln2087_12_fu_1470_p1;

assign sig_0_proofs_inputS_d0 = {{{{sigBytes_q0}, {sigBytes_q1}}, {sigBytes_load_7_reg_1755}}, {sigBytes_load_6_reg_1750}};

assign sig_0_proofs_seed1_address0 = zext_ln2076_4_fu_1230_p1;

assign sig_0_proofs_seed1_d0 = sigBytes_q0;

assign sig_0_proofs_seed2_address0 = zext_ln2081_4_fu_1284_p1;

assign sig_0_proofs_seed2_d0 = sigBytes_q0;

assign sig_0_proofs_view3C_address0 = zext_ln2058_5_fu_1126_p1;

assign sig_0_proofs_view3C_d0 = sigBytes_q0;

assign sig_0_salt_address0 = zext_ln2049_fu_946_p1;

assign sig_0_salt_d0 = sigBytes_q0;

assign tmp_19_fu_988_p3 = {{round_assign_3_reg_494}, {4'd0}};

assign tmp_20_fu_1000_p3 = {{round_assign_3_reg_494}, {5'd0}};

assign tmp_21_fu_1463_p3 = {{round_assign_3_reg_494}, {trunc_ln2087_4_reg_1740}};

assign tmp_64_fu_1316_p3 = loop_6_reg_565[32'd4];

assign tmp_fu_1294_p4 = {{add_ln2084_fu_1289_p2[2:1]}};

assign trunc_ln1976_fu_764_p1 = params_transform_rea[0:0];

assign trunc_ln2086_fu_1347_p1 = loop_6_reg_565[3:0];

assign trunc_ln386_3_fu_700_p1 = lshr_ln54_fu_694_p2[0:0];

assign trunc_ln386_4_fu_830_p1 = round_assign_2_reg_459[1:0];

assign trunc_ln386_5_fu_872_p1 = lshr_ln54_9_fu_866_p2[0:0];

assign trunc_ln386_6_fu_1012_p1 = round_assign_3_reg_494[1:0];

assign trunc_ln386_7_fu_1040_p1 = lshr_ln54_11_fu_1034_p2[0:0];

assign trunc_ln386_fu_634_p1 = round_assign_reg_436[1:0];

assign trunc_ln54_10_fu_892_p1 = lshr_ln54_10_fu_886_p2[0:0];

assign trunc_ln54_11_fu_1060_p1 = lshr_ln54_12_fu_1054_p2[0:0];

assign trunc_ln54_6_fu_834_p4 = {{round_assign_2_reg_459[7:2]}};

assign trunc_ln54_8_fu_969_p4 = {{round_assign_3_reg_494[7:2]}};

assign trunc_ln54_9_fu_720_p1 = lshr_ln54_8_fu_714_p2[0:0];

assign trunc_ln54_fu_618_p1 = sigBytes_offset[16:0];

assign trunc_ln_fu_638_p4 = {{round_assign_reg_436[7:2]}};

assign xor_ln54_2_fu_704_p2 = (shl_ln_fu_677_p3 ^ 3'd7);

assign xor_ln54_3_fu_856_p2 = (bitNumber_assign_fu_849_p3 ^ 3'd6);

assign xor_ln54_4_fu_876_p2 = (bitNumber_assign_fu_849_p3 ^ 3'd7);

assign xor_ln54_5_fu_1024_p2 = (bitNumber_assign_4_fu_1016_p3 ^ 3'd6);

assign xor_ln54_6_fu_1044_p2 = (bitNumber_assign_4_fu_1016_p3 ^ 3'd7);

assign xor_ln54_fu_684_p2 = (shl_ln_fu_677_p3 ^ 3'd6);

assign zext_ln1977_fu_767_p1 = mul_ln1977_reg_1539;

assign zext_ln2040_1_fu_799_p1 = ap_phi_mux_loop_0_phi_fu_451_p4;

assign zext_ln2040_2_fu_808_p1 = add_ln2040_fu_803_p2;

assign zext_ln2040_fu_813_p1 = loop_0_reg_447;

assign zext_ln2049_1_fu_922_p1 = ap_phi_mux_loop_1_phi_fu_474_p4;

assign zext_ln2049_2_fu_932_p1 = add_ln2049_fu_926_p2;

assign zext_ln2049_3_fu_941_p1 = add_ln2049_1_fu_936_p2;

assign zext_ln2049_fu_946_p1 = loop_1_reg_470;

assign zext_ln2052_fu_984_p1 = p_01_rec_reg_482;

assign zext_ln2058_1_fu_1093_p1 = ap_phi_mux_loop_2_phi_fu_522_p4;

assign zext_ln2058_2_fu_1103_p1 = add_ln2058_2_fu_1097_p2;

assign zext_ln2058_3_fu_1112_p1 = add_ln2058_1_fu_1107_p2;

assign zext_ln2058_4_fu_1117_p1 = loop_2_reg_518;

assign zext_ln2058_5_fu_1126_p1 = add_ln2058_3_fu_1121_p2;

assign zext_ln2058_fu_996_p1 = tmp_19_fu_988_p3;

assign zext_ln2071_1_fu_1153_p1 = loop_3_reg_530;

assign zext_ln2071_2_fu_1163_p1 = add_ln2071_1_fu_1157_p2;

assign zext_ln2071_3_fu_1172_p1 = add_ln2071_2_fu_1167_p2;

assign zext_ln2071_4_fu_1177_p1 = add_ln2071_reg_1668;

assign zext_ln2071_fu_1143_p1 = loop_3_reg_530;

assign zext_ln2076_1_fu_1193_p1 = ap_phi_mux_loop_4_phi_fu_545_p4;

assign zext_ln2076_2_fu_1207_p1 = $unsigned(sext_ln2076_fu_1203_p1);

assign zext_ln2076_3_fu_1216_p1 = add_ln2076_2_fu_1211_p2;

assign zext_ln2076_4_fu_1230_p1 = add_ln2076_fu_1225_p2;

assign zext_ln2076_fu_1221_p1 = loop_4_reg_541;

assign zext_ln2081_1_fu_1247_p1 = ap_phi_mux_loop_5_phi_fu_557_p4;

assign zext_ln2081_2_fu_1261_p1 = $unsigned(sext_ln2081_fu_1257_p1);

assign zext_ln2081_3_fu_1270_p1 = add_ln2081_2_fu_1265_p2;

assign zext_ln2081_4_fu_1284_p1 = add_ln2081_fu_1279_p2;

assign zext_ln2081_fu_1275_p1 = loop_5_reg_553;

assign zext_ln2087_10_fu_1419_p1 = add_ln2087_7_fu_1414_p2;

assign zext_ln2087_11_fu_1448_p1 = add_ln2087_8_reg_1735;

assign zext_ln2087_12_fu_1470_p1 = tmp_21_fu_1463_p3;

assign zext_ln2087_1_fu_1333_p1 = add_ln2087_1_fu_1328_p2;

assign zext_ln2087_2_fu_1342_p1 = add_ln2087_2_fu_1337_p2;

assign zext_ln2087_3_fu_1357_p1 = or_ln2087_fu_1351_p2;

assign zext_ln2087_4_fu_1366_p1 = add_ln2087_3_fu_1361_p2;

assign zext_ln2087_5_fu_1375_p1 = add_ln2087_4_fu_1370_p2;

assign zext_ln2087_6_fu_1386_p1 = or_ln2087_1_fu_1380_p2;

assign zext_ln2087_7_fu_1395_p1 = add_ln2087_5_fu_1390_p2;

assign zext_ln2087_8_fu_1444_p1 = add_ln2087_6_reg_1730;

assign zext_ln2087_9_fu_1410_p1 = or_ln2087_2_fu_1404_p2;

assign zext_ln2087_fu_1324_p1 = loop_6_reg_565;

assign zext_ln2088_fu_1475_p1 = p_sum5_pn_reg_576;

assign zext_ln382_fu_1008_p1 = tmp_20_fu_1000_p3;

assign zext_ln386_fu_1072_p1 = challenge_2_fu_1064_p3;

assign zext_ln54_12_fu_844_p1 = trunc_ln54_6_fu_834_p4;

assign zext_ln54_13_fu_657_p1 = add_ln54_fu_652_p2;

assign zext_ln54_14_fu_979_p1 = trunc_ln54_8_fu_969_p4;

assign zext_ln54_15_fu_690_p1 = xor_ln54_fu_684_p2;

assign zext_ln54_16_fu_710_p1 = xor_ln54_2_fu_704_p2;

assign zext_ln54_17_fu_862_p1 = xor_ln54_3_fu_856_p2;

assign zext_ln54_18_fu_882_p1 = xor_ln54_4_fu_876_p2;

assign zext_ln54_19_fu_1030_p1 = xor_ln54_5_fu_1024_p2;

assign zext_ln54_20_fu_1050_p1 = xor_ln54_6_fu_1044_p2;

assign zext_ln54_fu_648_p1 = trunc_ln_fu_638_p4;

always @ (posedge ap_clk) begin
    sigBytesLen_cast1_reg_1495[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln2058_reg_1621[3:0] <= 4'b0000;
    zext_ln2058_reg_1621[12] <= 1'b0;
    zext_ln382_reg_1627[4:0] <= 5'b00000;
    zext_ln382_reg_1627[13] <= 1'b0;
    zext_ln386_reg_1632[2] <= 1'b0;
    p_sum5_pn_reg_576[3:0] <= 4'b1011;
    p_sum5_pn_reg_576[7:5] <= 3'b100;
end

endmodule //deserializeSignature
