-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity theta is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of theta is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_3_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_reg_438 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal C_addr_reg_443 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln336_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln339_1_fu_201_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_1_reg_448 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_fu_211_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_456 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln338_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_266_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_469 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln341_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_reg_487 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln343_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal D_load_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln345_2_fu_381_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln345_2_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_2_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_2_reg_510 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal A_addr_1_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln344_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal C_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal D_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_ce0 : STD_LOGIC;
    signal D_we0 : STD_LOGIC;
    signal D_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_0_reg_127 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_1_reg_149 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x_2_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln337_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_1_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln339_fu_249_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_2_fu_217_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln339_1_fu_229_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_221_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_3_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln339_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln342_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln342_1_fu_278_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln342_fu_284_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln341_fu_256_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln342_1_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln342_2_fu_309_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln342_1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln342_fu_315_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln342_1_fu_319_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln342_fu_332_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_31_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_3_fu_397_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln345_1_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_401_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln345_4_fu_414_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln345_fu_418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component theta_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component theta_D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    C_U : component theta_C
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0,
        address1 => C_address1,
        ce1 => C_ce1,
        q1 => C_q1);

    D_U : component theta_D
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_address0,
        ce0 => D_ce0,
        we0 => D_we0,
        d0 => D_d0,
        q0 => D_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln338_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_127 <= x_3_reg_438;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_127 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_1_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln336_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_1_reg_149 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_1_reg_149 <= x_reg_469;
            end if; 
        end if;
    end process;

    x_2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln341_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_2_reg_161 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln344_fu_385_p2 = ap_const_lv1_1))) then 
                x_2_reg_161 <= x_4_reg_487;
            end if; 
        end if;
    end process;

    y_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                y_0_reg_138 <= y_reg_456;
            elsif (((icmp_ln336_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_0_reg_138 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                y_1_reg_173 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                y_1_reg_173 <= y_2_reg_510;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln344_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                A_addr_1_reg_515 <= zext_ln345_1_fu_424_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln336_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                C_addr_reg_443 <= zext_ln337_fu_196_p1(3 - 1 downto 0);
                    zext_ln339_1_reg_448(2 downto 0) <= zext_ln339_1_fu_201_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                D_load_reg_497 <= D_q0;
                    zext_ln345_2_reg_502(2 downto 0) <= zext_ln345_2_fu_381_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_3_reg_438 <= x_3_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_4_reg_487 <= x_4_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_reg_469 <= x_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                y_2_reg_510 <= y_2_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_reg_456 <= y_fu_211_p2;
            end if;
        end if;
    end process;
    zext_ln339_1_reg_448(3) <= '0';
    zext_ln345_2_reg_502(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln336_fu_184_p2, ap_CS_fsm_state3, icmp_ln338_fu_205_p2, ap_CS_fsm_state5, icmp_ln341_fu_260_p2, ap_CS_fsm_state7, icmp_ln343_fu_364_p2, ap_CS_fsm_state9, icmp_ln344_fu_385_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln336_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln338_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln341_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln343_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln344_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, A_addr_1_reg_515, ap_CS_fsm_state10, zext_ln339_fu_244_p1, zext_ln345_1_fu_424_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= A_addr_1_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= zext_ln345_1_fu_424_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln339_fu_244_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= (D_load_reg_497 xor A_q0);

    A_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state2, C_addr_reg_443, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, zext_ln337_fu_196_p1, zext_ln342_fu_292_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_address0 <= zext_ln342_fu_292_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            C_address0 <= C_addr_reg_443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_address0 <= zext_ln337_fu_196_p1(3 - 1 downto 0);
        else 
            C_address0 <= "XXX";
        end if; 
    end process;

    C_address1 <= zext_ln342_1_fu_327_p1(3 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, xor_ln339_fu_249_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_d0 <= xor_ln339_fu_249_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_d0 <= ap_const_lv64_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln336_fu_184_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln336_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6, zext_ln342_2_fu_359_p1, zext_ln345_fu_376_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            D_address0 <= zext_ln345_fu_376_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            D_address0 <= zext_ln342_2_fu_359_p1(3 - 1 downto 0);
        else 
            D_address0 <= "XXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= (or_ln_fu_344_p3 xor C_q1);

    D_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln339_1_fu_229_p2 <= std_logic_vector(unsigned(zext_ln339_1_reg_448) + unsigned(zext_ln339_2_fu_217_p1));
    add_ln339_fu_238_p2 <= std_logic_vector(unsigned(shl_ln_fu_221_p3) + unsigned(zext_ln339_3_fu_234_p1));
    add_ln342_1_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(zext_ln341_fu_256_p1));
    add_ln342_2_fu_309_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(x_1_reg_149));
    add_ln345_1_fu_409_p2 <= std_logic_vector(unsigned(zext_ln345_2_reg_502) + unsigned(zext_ln345_3_fu_397_p1));
    add_ln345_fu_418_p2 <= std_logic_vector(unsigned(shl_ln2_fu_401_p3) + unsigned(zext_ln345_4_fu_414_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln343_fu_364_p2)
    begin
        if ((((icmp_ln343_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln343_fu_364_p2)
    begin
        if (((icmp_ln343_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln336_fu_184_p2 <= "1" when (x_0_reg_127 = ap_const_lv3_5) else "0";
    icmp_ln338_fu_205_p2 <= "1" when (y_0_reg_138 = ap_const_lv3_5) else "0";
    icmp_ln341_fu_260_p2 <= "1" when (x_1_reg_149 = ap_const_lv3_5) else "0";
    icmp_ln342_1_fu_303_p2 <= "1" when (unsigned(add_ln342_1_fu_297_p2) < unsigned(ap_const_lv4_5)) else "0";
    icmp_ln342_fu_272_p2 <= "1" when (unsigned(x_fu_266_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln343_fu_364_p2 <= "1" when (x_2_reg_161 = ap_const_lv3_5) else "0";
    icmp_ln344_fu_385_p2 <= "1" when (y_1_reg_173 = ap_const_lv3_5) else "0";
    or_ln_fu_344_p3 <= (trunc_ln342_fu_332_p1 & tmp_31_fu_336_p3);
    select_ln342_1_fu_319_p3 <= 
        add_ln342_1_fu_297_p2 when (icmp_ln342_1_fu_303_p2(0) = '1') else 
        sext_ln342_fu_315_p1;
    select_ln342_fu_284_p3 <= 
        x_fu_266_p2 when (icmp_ln342_fu_272_p2(0) = '1') else 
        xor_ln342_1_fu_278_p2;
        sext_ln342_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln342_2_fu_309_p2),4));

    shl_ln2_fu_401_p3 <= (y_1_reg_173 & ap_const_lv2_0);
    shl_ln_fu_221_p3 <= (y_0_reg_138 & ap_const_lv2_0);
    tmp_31_fu_336_p3 <= C_q0(63 downto 63);
    trunc_ln342_fu_332_p1 <= C_q0(63 - 1 downto 0);
    x_3_fu_190_p2 <= std_logic_vector(unsigned(x_0_reg_127) + unsigned(ap_const_lv3_1));
    x_4_fu_370_p2 <= std_logic_vector(unsigned(x_2_reg_161) + unsigned(ap_const_lv3_1));
    x_fu_266_p2 <= std_logic_vector(unsigned(x_1_reg_149) + unsigned(ap_const_lv3_1));
    xor_ln339_fu_249_p2 <= (C_q0 xor A_q0);
    xor_ln342_1_fu_278_p2 <= (x_1_reg_149 xor ap_const_lv3_4);
    y_2_fu_391_p2 <= std_logic_vector(unsigned(y_1_reg_173) + unsigned(ap_const_lv3_1));
    y_fu_211_p2 <= std_logic_vector(unsigned(y_0_reg_138) + unsigned(ap_const_lv3_1));
    zext_ln337_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_127),64));
    zext_ln339_1_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_127),4));
    zext_ln339_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_138),4));
    zext_ln339_3_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_1_fu_229_p2),5));
    zext_ln339_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_fu_238_p2),64));
    zext_ln341_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_149),4));
    zext_ln342_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln342_1_fu_319_p3),64));
    zext_ln342_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_149),64));
    zext_ln342_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln342_fu_284_p3),64));
    zext_ln345_1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_fu_418_p2),64));
    zext_ln345_2_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_reg_161),4));
    zext_ln345_3_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_173),4));
    zext_ln345_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_1_fu_409_p2),5));
    zext_ln345_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_reg_161),64));
end behav;
