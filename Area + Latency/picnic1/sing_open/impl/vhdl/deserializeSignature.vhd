-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deserializeSignature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
    sig_0_proofs_commun_we0 : OUT STD_LOGIC;
    sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sig_0_challengeBits_ce0 : OUT STD_LOGIC;
    sig_0_challengeBits_we0 : OUT STD_LOGIC;
    sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sig_0_salt_ce0 : OUT STD_LOGIC;
    sig_0_salt_we0 : OUT STD_LOGIC;
    sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce0 : OUT STD_LOGIC;
    sigBytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce1 : OUT STD_LOGIC;
    sigBytes_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    sigBytesLen : IN STD_LOGIC_VECTOR (31 downto 0);
    params_UnruhGWithout : IN STD_LOGIC_VECTOR (6 downto 0);
    params_transform_rea : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of deserializeSignature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_8B : STD_LOGIC_VECTOR (7 downto 0) := "10001011";
    constant ap_const_lv8_9B : STD_LOGIC_VECTOR (7 downto 0) := "10011011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_7740 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111011101000000";
    constant ap_const_lv16_DB : STD_LOGIC_VECTOR (15 downto 0) := "0000000011011011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_77 : STD_LOGIC_VECTOR (7 downto 0) := "01110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_E2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_0_reg_447 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_1_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_2_reg_518 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_3_reg_530 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_4_reg_541 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_5_reg_553 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigBytesLen_cast1_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigBytesLen_cast1_reg_1495 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln54_fu_618_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_reg_1503 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1968_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_20_reg_1518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln386_fu_634_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_reg_1523 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1940_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_fu_662_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_reg_1533 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1977_fu_671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1977_reg_1539 : STD_LOGIC_VECTOR (15 downto 0);
    signal inputShareSize_2_fu_756_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1979_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln2039_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2039_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_fu_793_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_1557 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln1951_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_21_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_21_reg_1571 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_4_fu_830_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln386_4_reg_1576 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln2048_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2048_reg_1589 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_32_fu_916_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_32_reg_1593 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln2052_fu_951_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2052_reg_1603 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_fu_963_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1611 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln2052_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln2058_fu_996_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2058_reg_1621 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln382_fu_1008_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln382_reg_1627 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln386_fu_1072_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln386_reg_1632 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln2058_fu_1076_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2058_reg_1637 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln2057_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2057_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_33_fu_1087_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_33_reg_1649 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln2070_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2070_reg_1659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state18_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal loop_34_fu_1137_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal add_ln2071_fu_1147_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln2071_reg_1668 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln2075_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2075_reg_1678 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state21_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal loop_35_fu_1187_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_35_reg_1682 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln2080_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2080_reg_1692 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state24_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal loop_36_fu_1241_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_36_reg_1696 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal add_ln2087_fu_1310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_reg_1709 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln2084_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_64_fu_1316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2087_6_fu_1399_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_6_reg_1730 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_8_fu_1423_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_8_reg_1735 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2087_4_reg_1740 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_37_fu_1438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_37_reg_1745 : STD_LOGIC_VECTOR (4 downto 0);
    signal sigBytes_load_6_reg_1750 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sigBytes_load_7_reg_1755 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2088_fu_1479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal inputShareSize_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal round_assign_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_loop_0_phi_fu_451_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal round_assign_2_reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1953_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_loop_1_phi_fu_474_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_01_rec_reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal round_assign_3_reg_494 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_506 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_loop_2_phi_fu_522_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_loop_4_phi_fu_545_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_loop_5_phi_fu_557_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal loop_6_reg_565 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal p_sum5_pn_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_13_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_2_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_12_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2049_3_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2049_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_14_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2058_3_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2058_5_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2071_3_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln2071_4_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2076_3_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2076_4_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2081_3_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2081_4_fu_1284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_2_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_5_fu_1375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_8_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_11_fu_1448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2087_12_fu_1470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_638_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_fu_648_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln54_fu_652_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1977_fu_671_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_677_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_fu_684_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_15_fu_690_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_2_fu_704_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_16_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_8_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_3_fu_700_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_9_fu_720_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_fu_724_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1942_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1942_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1942_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputShareSize_1_fu_750_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1977_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1976_fu_764_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytesExpected_1_fu_770_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bytesExpected_2_fu_775_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2040_1_fu_799_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2040_fu_803_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_6_fu_834_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitNumber_assign_fu_849_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_3_fu_856_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_17_fu_862_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_9_fu_866_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_4_fu_876_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_18_fu_882_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_10_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_5_fu_872_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_10_fu_892_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_1_fu_896_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2049_1_fu_922_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2049_fu_926_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2049_2_fu_932_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2049_1_fu_936_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln54_8_fu_969_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_988_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_1000_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln386_6_fu_1012_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitNumber_assign_4_fu_1016_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_5_fu_1024_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_19_fu_1030_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_11_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_6_fu_1044_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_20_fu_1050_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_12_fu_1054_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_7_fu_1040_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_11_fu_1060_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_2_fu_1064_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2052_fu_984_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2058_1_fu_1093_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2058_2_fu_1097_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2058_2_fu_1103_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2058_1_fu_1107_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2058_4_fu_1117_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln2058_3_fu_1121_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln2071_fu_1143_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln2071_1_fu_1153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2071_1_fu_1157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2071_2_fu_1163_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2071_2_fu_1167_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2076_1_fu_1193_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2076_1_fu_1197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2076_fu_1203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2076_2_fu_1207_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2076_2_fu_1211_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2076_fu_1221_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2076_fu_1225_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln2081_1_fu_1247_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2081_1_fu_1251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln2081_fu_1257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2081_2_fu_1261_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2081_2_fu_1265_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln2081_fu_1275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2081_fu_1279_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln2084_fu_1289_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1294_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln2087_fu_1324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_1_fu_1328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_1_fu_1333_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_2_fu_1337_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln2086_fu_1347_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2087_fu_1351_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_3_fu_1357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_3_fu_1361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_4_fu_1366_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln2087_4_fu_1370_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2087_1_fu_1380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_6_fu_1386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_5_fu_1390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_7_fu_1395_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln2087_2_fu_1404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2087_9_fu_1410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln2087_7_fu_1414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln2087_10_fu_1419_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_1463_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2088_fu_1475_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal mul_ln1977_fu_671_p10 : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_782_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_782_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1951_fu_818_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1951_fu_818_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state21))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state21);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state24))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state24);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_return_preg <= p_0_reg_589;
                end if; 
            end if;
        end if;
    end process;


    inputShareSize_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_0))) then 
                inputShareSize_reg_424 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                inputShareSize_reg_424 <= inputShareSize_2_fu_756_p3;
            end if; 
        end if;
    end process;

    loop_0_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_782_p2 = ap_const_lv1_0))) then 
                loop_0_reg_447 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2039_reg_1553 = ap_const_lv1_0))) then 
                loop_0_reg_447 <= loop_reg_1557;
            end if; 
        end if;
    end process;

    loop_1_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1951_fu_818_p2 = ap_const_lv1_0))) then 
                loop_1_reg_470 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2048_reg_1589 = ap_const_lv1_0))) then 
                loop_1_reg_470 <= loop_32_reg_1593;
            end if; 
        end if;
    end process;

    loop_2_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2057_reg_1645 = ap_const_lv1_0))) then 
                loop_2_reg_518 <= loop_33_reg_1649;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                loop_2_reg_518 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    loop_3_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                loop_3_reg_530 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln2070_fu_1131_p2 = ap_const_lv1_0))) then 
                loop_3_reg_530 <= loop_34_fu_1137_p2;
            end if; 
        end if;
    end process;

    loop_4_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_4_reg_541 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln2075_reg_1678 = ap_const_lv1_0))) then 
                loop_4_reg_541 <= loop_35_reg_1682;
            end if; 
        end if;
    end process;

    loop_5_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                loop_5_reg_553 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln2080_reg_1692 = ap_const_lv1_0))) then 
                loop_5_reg_553 <= loop_36_reg_1696;
            end if; 
        end if;
    end process;

    loop_6_reg_565_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln2084_fu_1304_p2 = ap_const_lv1_1))) then 
                loop_6_reg_565 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                loop_6_reg_565 <= loop_37_reg_1745;
            end if; 
        end if;
    end process;

    p_01_rec_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_01_rec_reg_482 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_01_rec_reg_482 <= add_ln2088_fu_1479_p2;
            end if; 
        end if;
    end process;

    p_0_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln2052_fu_957_p2 = ap_const_lv1_1))) then 
                p_0_reg_589 <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1953_fu_904_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_782_p2 = ap_const_lv1_1)))) then 
                p_0_reg_589 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    p_sum5_pn_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_64_fu_1316_p3 = ap_const_lv1_1))) then 
                p_sum5_pn_reg_576(4) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln2084_fu_1304_p2 = ap_const_lv1_0))) then 
                p_sum5_pn_reg_576(4) <= '0';
            end if; 
        end if;
    end process;

    phi_mul_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_mul_reg_506 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                phi_mul_reg_506 <= add_ln2052_reg_1603;
            end if; 
        end if;
    end process;

    round_assign_2_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                round_assign_2_reg_459 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1953_fu_904_p2 = ap_const_lv1_0))) then 
                round_assign_2_reg_459 <= i_21_reg_1571;
            end if; 
        end if;
    end process;

    round_assign_3_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                round_assign_3_reg_494 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                round_assign_3_reg_494 <= i_reg_1611;
            end if; 
        end if;
    end process;

    round_assign_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_0))) then 
                round_assign_reg_436 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                round_assign_reg_436 <= i_20_reg_1518;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln2052_reg_1603 <= add_ln2052_fu_951_p2;
                i_reg_1611 <= i_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln2058_reg_1637 <= add_ln2058_fu_1076_p2;
                    zext_ln2058_reg_1621(11 downto 4) <= zext_ln2058_fu_996_p1(11 downto 4);
                    zext_ln382_reg_1627(12 downto 5) <= zext_ln382_fu_1008_p1(12 downto 5);
                    zext_ln386_reg_1632(1 downto 0) <= zext_ln386_fu_1072_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln2070_fu_1131_p2 = ap_const_lv1_0))) then
                add_ln2071_reg_1668 <= add_ln2071_fu_1147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_64_fu_1316_p3 = ap_const_lv1_0))) then
                add_ln2087_6_reg_1730 <= add_ln2087_6_fu_1399_p2;
                add_ln2087_8_reg_1735 <= add_ln2087_8_fu_1423_p2;
                loop_37_reg_1745 <= loop_37_fu_1438_p2;
                trunc_ln2087_4_reg_1740 <= loop_6_reg_565(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln2084_fu_1304_p2 = ap_const_lv1_1))) then
                add_ln2087_reg_1709 <= add_ln2087_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_622_p2 = ap_const_lv1_1))) then
                bytesExpected_reg_1533 <= bytesExpected_fu_662_p2;
                mul_ln1977_reg_1539 <= mul_ln1977_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_20_reg_1518 <= i_20_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_21_reg_1571 <= i_21_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln2039_reg_1553 <= icmp_ln2039_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln2048_reg_1589 <= icmp_ln2048_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln2057_reg_1645 <= icmp_ln2057_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln2070_reg_1659 <= icmp_ln2070_fu_1131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln2075_reg_1678 <= icmp_ln2075_fu_1181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln2080_reg_1692 <= icmp_ln2080_fu_1235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                loop_32_reg_1593 <= loop_32_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                loop_33_reg_1649 <= loop_33_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                loop_35_reg_1682 <= loop_35_fu_1187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                loop_36_reg_1696 <= loop_36_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                loop_reg_1557 <= loop_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sigBytesLen_cast1_reg_1495(31 downto 0) <= sigBytesLen_cast1_fu_608_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                sigBytes_load_6_reg_1750 <= sigBytes_q0;
                sigBytes_load_7_reg_1755 <= sigBytes_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1951_fu_818_p2 = ap_const_lv1_1))) then
                trunc_ln386_4_reg_1576 <= trunc_ln386_4_fu_830_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_622_p2 = ap_const_lv1_0))) then
                trunc_ln386_reg_1523 <= trunc_ln386_fu_634_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_0))) then
                trunc_ln54_reg_1503 <= trunc_ln54_fu_618_p1;
            end if;
        end if;
    end process;
    sigBytesLen_cast1_reg_1495(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln2058_reg_1621(3 downto 0) <= "0000";
    zext_ln2058_reg_1621(12) <= '0';
    zext_ln382_reg_1627(4 downto 0) <= "00000";
    zext_ln382_reg_1627(13) <= '0';
    zext_ln386_reg_1632(2) <= '0';
    p_sum5_pn_reg_576(3 downto 0) <= "1011";
    p_sum5_pn_reg_576(7 downto 5) <= "100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1968_fu_612_p2, ap_CS_fsm_state2, icmp_ln1940_fu_622_p2, icmp_ln1979_fu_782_p2, ap_CS_fsm_state4, icmp_ln2039_fu_787_p2, ap_enable_reg_pp0_iter0, icmp_ln1951_fu_818_p2, ap_CS_fsm_state8, icmp_ln2048_fu_910_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, icmp_ln2052_fu_957_p2, icmp_ln2057_fu_1081_p2, ap_enable_reg_pp2_iter0, icmp_ln2070_fu_1131_p2, ap_enable_reg_pp3_iter0, icmp_ln2075_fu_1181_p2, ap_enable_reg_pp4_iter0, icmp_ln2080_fu_1235_p2, ap_enable_reg_pp5_iter0, ap_CS_fsm_state26, icmp_ln2084_fu_1304_p2, ap_CS_fsm_state27, tmp_64_fu_1316_p3, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_CS_fsm_state9, icmp_ln1953_fu_904_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln1968_fu_612_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1940_fu_622_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1979_fu_782_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2039_fu_787_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln2039_fu_787_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1951_fu_818_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1953_fu_904_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln2048_fu_910_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln2048_fu_910_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln2052_fu_957_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln2057_fu_1081_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln2057_fu_1081_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln2070_fu_1131_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln2070_fu_1131_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln2075_fu_1181_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln2075_fu_1181_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln2080_fu_1235_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln2080_fu_1235_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln2084_fu_1304_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_64_fu_1316_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln2040_fu_803_p2 <= std_logic_vector(unsigned(zext_ln2040_1_fu_799_p1) + unsigned(trunc_ln54_reg_1503));
    add_ln2049_1_fu_936_p2 <= std_logic_vector(unsigned(zext_ln2049_2_fu_932_p1) + unsigned(trunc_ln54_reg_1503));
    add_ln2049_fu_926_p2 <= std_logic_vector(unsigned(zext_ln2049_1_fu_922_p1) + unsigned(ap_const_lv7_37));
    add_ln2052_fu_951_p2 <= std_logic_vector(unsigned(phi_mul_reg_506) + unsigned(ap_const_lv15_4B));
    add_ln2058_1_fu_1107_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1637) + unsigned(zext_ln2058_2_fu_1103_p1));
    add_ln2058_2_fu_1097_p2 <= std_logic_vector(unsigned(zext_ln2058_1_fu_1093_p1) + unsigned(ap_const_lv7_57));
    add_ln2058_3_fu_1121_p2 <= std_logic_vector(unsigned(zext_ln382_reg_1627) + unsigned(zext_ln2058_4_fu_1117_p1));
    add_ln2058_fu_1076_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln2052_fu_984_p1));
    add_ln2071_1_fu_1157_p2 <= std_logic_vector(unsigned(zext_ln2071_1_fu_1153_p1) + unsigned(ap_const_lv8_77));
    add_ln2071_2_fu_1167_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1637) + unsigned(zext_ln2071_2_fu_1163_p1));
    add_ln2071_fu_1147_p2 <= std_logic_vector(unsigned(phi_mul_reg_506) + unsigned(zext_ln2071_fu_1143_p1));
    add_ln2076_1_fu_1197_p2 <= std_logic_vector(unsigned(zext_ln2076_1_fu_1193_p1) + unsigned(ap_const_lv7_42));
    add_ln2076_2_fu_1211_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1637) + unsigned(zext_ln2076_2_fu_1207_p1));
    add_ln2076_fu_1225_p2 <= std_logic_vector(unsigned(zext_ln2058_reg_1621) + unsigned(zext_ln2076_fu_1221_p1));
    add_ln2081_1_fu_1251_p2 <= std_logic_vector(unsigned(zext_ln2081_1_fu_1247_p1) + unsigned(ap_const_lv7_52));
    add_ln2081_2_fu_1265_p2 <= std_logic_vector(unsigned(add_ln2058_reg_1637) + unsigned(zext_ln2081_2_fu_1261_p1));
    add_ln2081_fu_1279_p2 <= std_logic_vector(unsigned(zext_ln2058_reg_1621) + unsigned(zext_ln2081_fu_1275_p1));
    add_ln2084_fu_1289_p2 <= std_logic_vector(unsigned(zext_ln386_reg_1632) + unsigned(ap_const_lv3_7));
    add_ln2087_1_fu_1328_p2 <= std_logic_vector(unsigned(zext_ln2087_fu_1324_p1) + unsigned(add_ln2087_reg_1709));
    add_ln2087_2_fu_1337_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln2087_1_fu_1333_p1));
    add_ln2087_3_fu_1361_p2 <= std_logic_vector(unsigned(zext_ln2087_3_fu_1357_p1) + unsigned(add_ln2087_reg_1709));
    add_ln2087_4_fu_1370_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln2087_4_fu_1366_p1));
    add_ln2087_5_fu_1390_p2 <= std_logic_vector(unsigned(zext_ln2087_6_fu_1386_p1) + unsigned(add_ln2087_reg_1709));
    add_ln2087_6_fu_1399_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln2087_7_fu_1395_p1));
    add_ln2087_7_fu_1414_p2 <= std_logic_vector(unsigned(zext_ln2087_9_fu_1410_p1) + unsigned(add_ln2087_reg_1709));
    add_ln2087_8_fu_1423_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln2087_10_fu_1419_p1));
    add_ln2087_fu_1310_p2 <= std_logic_vector(unsigned(p_01_rec_reg_482) + unsigned(ap_const_lv16_E2));
    add_ln2088_fu_1479_p2 <= std_logic_vector(unsigned(zext_ln2088_fu_1475_p1) + unsigned(p_01_rec_reg_482));
    add_ln54_fu_652_p2 <= std_logic_vector(unsigned(trunc_ln54_reg_1503) + unsigned(zext_ln54_fu_648_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(15);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state26 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(20);
    ap_CS_fsm_state28 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(23);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln2039_fu_787_p2)
    begin
        if ((icmp_ln2039_fu_787_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln2048_fu_910_p2)
    begin
        if ((icmp_ln2048_fu_910_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state15_assign_proc : process(icmp_ln2057_fu_1081_p2)
    begin
        if ((icmp_ln2057_fu_1081_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state18_assign_proc : process(icmp_ln2070_fu_1131_p2)
    begin
        if ((icmp_ln2070_fu_1131_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state21_assign_proc : process(icmp_ln2075_fu_1181_p2)
    begin
        if ((icmp_ln2075_fu_1181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state24_assign_proc : process(icmp_ln2080_fu_1235_p2)
    begin
        if ((icmp_ln2080_fu_1235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_0_phi_fu_451_p4_assign_proc : process(loop_0_reg_447, icmp_ln2039_reg_1553, ap_CS_fsm_pp0_stage0, loop_reg_1557, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2039_reg_1553 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_0_phi_fu_451_p4 <= loop_reg_1557;
        else 
            ap_phi_mux_loop_0_phi_fu_451_p4 <= loop_0_reg_447;
        end if; 
    end process;


    ap_phi_mux_loop_1_phi_fu_474_p4_assign_proc : process(loop_1_reg_470, icmp_ln2048_reg_1589, ap_CS_fsm_pp1_stage0, loop_32_reg_1593, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2048_reg_1589 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_1_phi_fu_474_p4 <= loop_32_reg_1593;
        else 
            ap_phi_mux_loop_1_phi_fu_474_p4 <= loop_1_reg_470;
        end if; 
    end process;


    ap_phi_mux_loop_2_phi_fu_522_p4_assign_proc : process(loop_2_reg_518, icmp_ln2057_reg_1645, ap_CS_fsm_pp2_stage0, loop_33_reg_1649, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2057_reg_1645 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_2_phi_fu_522_p4 <= loop_33_reg_1649;
        else 
            ap_phi_mux_loop_2_phi_fu_522_p4 <= loop_2_reg_518;
        end if; 
    end process;


    ap_phi_mux_loop_4_phi_fu_545_p4_assign_proc : process(loop_4_reg_541, icmp_ln2075_reg_1678, ap_CS_fsm_pp4_stage0, loop_35_reg_1682, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln2075_reg_1678 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_4_phi_fu_545_p4 <= loop_35_reg_1682;
        else 
            ap_phi_mux_loop_4_phi_fu_545_p4 <= loop_4_reg_541;
        end if; 
    end process;


    ap_phi_mux_loop_5_phi_fu_557_p4_assign_proc : process(loop_5_reg_553, icmp_ln2080_reg_1692, ap_CS_fsm_pp5_stage0, loop_36_reg_1696, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln2080_reg_1692 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_5_phi_fu_557_p4 <= loop_36_reg_1696;
        else 
            ap_phi_mux_loop_5_phi_fu_557_p4 <= loop_5_reg_553;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(p_0_reg_589, ap_return_preg, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            ap_return <= p_0_reg_589;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitNumber_assign_4_fu_1016_p3 <= (trunc_ln386_6_fu_1012_p1 & ap_const_lv1_0);
    bitNumber_assign_fu_849_p3 <= (trunc_ln386_4_reg_1576 & ap_const_lv1_0);
    bytesExpected_1_fu_770_p2 <= std_logic_vector(unsigned(bytesExpected_reg_1533) + unsigned(zext_ln1977_fu_767_p1));
    bytesExpected_2_fu_775_p3 <= 
        bytesExpected_1_fu_770_p2 when (trunc_ln1976_fu_764_p1(0) = '1') else 
        bytesExpected_reg_1533;
    bytesExpected_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv64_7740) + unsigned(inputShareSize_reg_424));
    challenge_1_fu_896_p3 <= (trunc_ln386_5_fu_872_p1 & trunc_ln54_10_fu_892_p1);
    challenge_2_fu_1064_p3 <= (trunc_ln386_7_fu_1040_p1 & trunc_ln54_11_fu_1060_p1);
    challenge_fu_724_p3 <= (trunc_ln386_3_fu_700_p1 & trunc_ln54_9_fu_720_p1);
    i_20_fu_628_p2 <= std_logic_vector(unsigned(round_assign_reg_436) + unsigned(ap_const_lv8_1));
    i_21_fu_824_p2 <= std_logic_vector(unsigned(round_assign_2_reg_459) + unsigned(ap_const_lv8_1));
    i_fu_963_p2 <= std_logic_vector(unsigned(round_assign_3_reg_494) + unsigned(ap_const_lv8_1));
    icmp_ln1940_fu_622_p2 <= "1" when (round_assign_reg_436 = ap_const_lv8_DB) else "0";
    icmp_ln1942_1_fu_738_p2 <= "1" when (challenge_fu_724_p3 = ap_const_lv2_2) else "0";
    icmp_ln1942_fu_732_p2 <= "1" when (challenge_fu_724_p3 = ap_const_lv2_1) else "0";
    icmp_ln1951_fu_818_p2 <= "1" when (unsigned(round_assign_2_reg_459) < unsigned(ap_const_lv8_DB)) else "0";
    icmp_ln1953_fu_904_p2 <= "1" when (challenge_1_fu_896_p3 = ap_const_lv2_3) else "0";
    icmp_ln1968_fu_612_p2 <= "1" when (unsigned(sigBytesLen) < unsigned(ap_const_lv32_37)) else "0";
    icmp_ln1979_fu_782_p2 <= "1" when (unsigned(bytesExpected_2_fu_775_p3) > unsigned(sigBytesLen_cast1_reg_1495)) else "0";
    icmp_ln2039_fu_787_p2 <= "1" when (ap_phi_mux_loop_0_phi_fu_451_p4 = ap_const_lv6_37) else "0";
    icmp_ln2048_fu_910_p2 <= "1" when (ap_phi_mux_loop_1_phi_fu_474_p4 = ap_const_lv6_20) else "0";
    icmp_ln2052_fu_957_p2 <= "1" when (round_assign_3_reg_494 = ap_const_lv8_DB) else "0";
    icmp_ln2057_fu_1081_p2 <= "1" when (ap_phi_mux_loop_2_phi_fu_522_p4 = ap_const_lv6_20) else "0";
    icmp_ln2070_fu_1131_p2 <= "1" when (loop_3_reg_530 = ap_const_lv7_4B) else "0";
    icmp_ln2075_fu_1181_p2 <= "1" when (ap_phi_mux_loop_4_phi_fu_545_p4 = ap_const_lv5_10) else "0";
    icmp_ln2080_fu_1235_p2 <= "1" when (ap_phi_mux_loop_5_phi_fu_557_p4 = ap_const_lv5_10) else "0";
    icmp_ln2084_fu_1304_p2 <= "1" when (tmp_fu_1294_p4 = ap_const_lv2_0) else "0";
    inputShareSize_1_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv64_10) + unsigned(inputShareSize_reg_424));
    inputShareSize_2_fu_756_p3 <= 
        inputShareSize_1_fu_750_p2 when (or_ln1942_fu_744_p2(0) = '1') else 
        inputShareSize_reg_424;
    loop_32_fu_916_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_1_phi_fu_474_p4) + unsigned(ap_const_lv6_1));
    loop_33_fu_1087_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_2_phi_fu_522_p4) + unsigned(ap_const_lv6_1));
    loop_34_fu_1137_p2 <= std_logic_vector(unsigned(loop_3_reg_530) + unsigned(ap_const_lv7_1));
    loop_35_fu_1187_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_4_phi_fu_545_p4) + unsigned(ap_const_lv5_1));
    loop_36_fu_1241_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_5_phi_fu_557_p4) + unsigned(ap_const_lv5_1));
    loop_37_fu_1438_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_6_reg_565));
    loop_fu_793_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_0_phi_fu_451_p4) + unsigned(ap_const_lv6_1));
    lshr_ln54_10_fu_886_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_18_fu_882_p1(8-1 downto 0)))));
    lshr_ln54_11_fu_1034_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_19_fu_1030_p1(8-1 downto 0)))));
    lshr_ln54_12_fu_1054_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_20_fu_1050_p1(8-1 downto 0)))));
    lshr_ln54_8_fu_714_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_16_fu_710_p1(8-1 downto 0)))));
    lshr_ln54_9_fu_866_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_17_fu_862_p1(8-1 downto 0)))));
    lshr_ln54_fu_694_p2 <= std_logic_vector(shift_right(unsigned(sigBytes_q0),to_integer(unsigned('0' & zext_ln54_15_fu_690_p1(8-1 downto 0)))));
    mul_ln1977_fu_671_p1 <= mul_ln1977_fu_671_p10(7 - 1 downto 0);
    mul_ln1977_fu_671_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(params_UnruhGWithout),16));
    mul_ln1977_fu_671_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_DB) * unsigned(mul_ln1977_fu_671_p1), 16));
    or_ln1942_fu_744_p2 <= (icmp_ln1942_fu_732_p2 or icmp_ln1942_1_fu_738_p2);
    or_ln2087_1_fu_1380_p2 <= (trunc_ln2086_fu_1347_p1 or ap_const_lv4_2);
    or_ln2087_2_fu_1404_p2 <= (trunc_ln2086_fu_1347_p1 or ap_const_lv4_3);
    or_ln2087_fu_1351_p2 <= (trunc_ln2086_fu_1347_p1 or ap_const_lv4_1);
        sext_ln2076_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2076_1_fu_1197_p2),8));

        sext_ln2081_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln2081_1_fu_1251_p2),8));

    shl_ln_fu_677_p3 <= (trunc_ln386_reg_1523 & ap_const_lv1_0);
    sigBytesLen_cast1_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sigBytesLen),64));

    sigBytes_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, zext_ln54_13_fu_657_p1, zext_ln2040_2_fu_808_p1, zext_ln2049_3_fu_941_p1, zext_ln2058_3_fu_1112_p1, zext_ln2071_3_fu_1172_p1, ap_block_pp3_stage0, zext_ln2076_3_fu_1216_p1, zext_ln2081_3_fu_1270_p1, zext_ln2087_2_fu_1342_p1, zext_ln2087_11_fu_1448_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sigBytes_address0 <= zext_ln2087_11_fu_1448_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sigBytes_address0 <= zext_ln2087_2_fu_1342_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            sigBytes_address0 <= zext_ln2081_3_fu_1270_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            sigBytes_address0 <= zext_ln2076_3_fu_1216_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            sigBytes_address0 <= zext_ln2071_3_fu_1172_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sigBytes_address0 <= zext_ln2058_3_fu_1112_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sigBytes_address0 <= zext_ln2049_3_fu_941_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sigBytes_address0 <= zext_ln2040_2_fu_808_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sigBytes_address0 <= zext_ln54_13_fu_657_p1(16 - 1 downto 0);
        else 
            sigBytes_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, zext_ln2087_5_fu_1375_p1, zext_ln2087_8_fu_1444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sigBytes_address1 <= zext_ln2087_8_fu_1444_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sigBytes_address1 <= zext_ln2087_5_fu_1375_p1(16 - 1 downto 0);
        else 
            sigBytes_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sigBytes_ce0 <= ap_const_logic_1;
        else 
            sigBytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigBytes_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sigBytes_ce1 <= ap_const_logic_1;
        else 
            sigBytes_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln2040_fu_813_p1, zext_ln54_12_fu_844_p1, zext_ln54_14_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sig_0_challengeBits_address0 <= zext_ln54_14_fu_979_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_address0 <= zext_ln54_12_fu_844_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sig_0_challengeBits_address0 <= zext_ln2040_fu_813_p1(6 - 1 downto 0);
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sig_0_challengeBits_ce0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_challengeBits_d0 <= sigBytes_q0;

    sig_0_challengeBits_we0_assign_proc : process(icmp_ln2039_reg_1553, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2039_reg_1553 = ap_const_lv1_0))) then 
            sig_0_challengeBits_we0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_address0 <= zext_ln2071_4_fu_1177_p1(15 - 1 downto 0);

    sig_0_proofs_commun_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            sig_0_proofs_commun_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_d0 <= sigBytes_q0;

    sig_0_proofs_commun_we0_assign_proc : process(icmp_ln2070_reg_1659, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln2070_reg_1659 = ap_const_lv1_0))) then 
            sig_0_proofs_commun_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_address0 <= zext_ln2087_12_fu_1470_p1(10 - 1 downto 0);

    sig_0_proofs_inputS_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_d0 <= (((sigBytes_q0 & sigBytes_q1) & sigBytes_load_7_reg_1755) & sigBytes_load_6_reg_1750);

    sig_0_proofs_inputS_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sig_0_proofs_inputS_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_address0 <= zext_ln2076_4_fu_1230_p1(12 - 1 downto 0);

    sig_0_proofs_seed1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_d0 <= sigBytes_q0;

    sig_0_proofs_seed1_we0_assign_proc : process(icmp_ln2075_reg_1678, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln2075_reg_1678 = ap_const_lv1_0))) then 
            sig_0_proofs_seed1_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_address0 <= zext_ln2081_4_fu_1284_p1(12 - 1 downto 0);

    sig_0_proofs_seed2_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_d0 <= sigBytes_q0;

    sig_0_proofs_seed2_we0_assign_proc : process(icmp_ln2080_reg_1692, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln2080_reg_1692 = ap_const_lv1_0))) then 
            sig_0_proofs_seed2_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_address0 <= zext_ln2058_5_fu_1126_p1(13 - 1 downto 0);

    sig_0_proofs_view3C_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_d0 <= sigBytes_q0;

    sig_0_proofs_view3C_we0_assign_proc : process(icmp_ln2057_reg_1645, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln2057_reg_1645 = ap_const_lv1_0))) then 
            sig_0_proofs_view3C_we0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_address0 <= zext_ln2049_fu_946_p1(5 - 1 downto 0);

    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            sig_0_salt_ce0 <= ap_const_logic_1;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_d0 <= sigBytes_q0;

    sig_0_salt_we0_assign_proc : process(icmp_ln2048_reg_1589, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln2048_reg_1589 = ap_const_lv1_0))) then 
            sig_0_salt_we0 <= ap_const_logic_1;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_988_p3 <= (round_assign_3_reg_494 & ap_const_lv4_0);
    tmp_20_fu_1000_p3 <= (round_assign_3_reg_494 & ap_const_lv5_0);
    tmp_21_fu_1463_p3 <= (round_assign_3_reg_494 & trunc_ln2087_4_reg_1740);
    tmp_64_fu_1316_p3 <= loop_6_reg_565(4 downto 4);
    tmp_fu_1294_p4 <= add_ln2084_fu_1289_p2(2 downto 1);
    trunc_ln1976_fu_764_p1 <= params_transform_rea(1 - 1 downto 0);
    trunc_ln2086_fu_1347_p1 <= loop_6_reg_565(4 - 1 downto 0);
    trunc_ln386_3_fu_700_p1 <= lshr_ln54_fu_694_p2(1 - 1 downto 0);
    trunc_ln386_4_fu_830_p1 <= round_assign_2_reg_459(2 - 1 downto 0);
    trunc_ln386_5_fu_872_p1 <= lshr_ln54_9_fu_866_p2(1 - 1 downto 0);
    trunc_ln386_6_fu_1012_p1 <= round_assign_3_reg_494(2 - 1 downto 0);
    trunc_ln386_7_fu_1040_p1 <= lshr_ln54_11_fu_1034_p2(1 - 1 downto 0);
    trunc_ln386_fu_634_p1 <= round_assign_reg_436(2 - 1 downto 0);
    trunc_ln54_10_fu_892_p1 <= lshr_ln54_10_fu_886_p2(1 - 1 downto 0);
    trunc_ln54_11_fu_1060_p1 <= lshr_ln54_12_fu_1054_p2(1 - 1 downto 0);
    trunc_ln54_6_fu_834_p4 <= round_assign_2_reg_459(7 downto 2);
    trunc_ln54_8_fu_969_p4 <= round_assign_3_reg_494(7 downto 2);
    trunc_ln54_9_fu_720_p1 <= lshr_ln54_8_fu_714_p2(1 - 1 downto 0);
    trunc_ln54_fu_618_p1 <= sigBytes_offset(17 - 1 downto 0);
    trunc_ln_fu_638_p4 <= round_assign_reg_436(7 downto 2);
    xor_ln54_2_fu_704_p2 <= (shl_ln_fu_677_p3 xor ap_const_lv3_7);
    xor_ln54_3_fu_856_p2 <= (bitNumber_assign_fu_849_p3 xor ap_const_lv3_6);
    xor_ln54_4_fu_876_p2 <= (bitNumber_assign_fu_849_p3 xor ap_const_lv3_7);
    xor_ln54_5_fu_1024_p2 <= (bitNumber_assign_4_fu_1016_p3 xor ap_const_lv3_6);
    xor_ln54_6_fu_1044_p2 <= (bitNumber_assign_4_fu_1016_p3 xor ap_const_lv3_7);
    xor_ln54_fu_684_p2 <= (shl_ln_fu_677_p3 xor ap_const_lv3_6);
    zext_ln1977_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1977_reg_1539),64));
    zext_ln2040_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_0_phi_fu_451_p4),17));
    zext_ln2040_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2040_fu_803_p2),64));
    zext_ln2040_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_447),64));
    zext_ln2049_1_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_1_phi_fu_474_p4),7));
    zext_ln2049_2_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2049_fu_926_p2),17));
    zext_ln2049_3_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2049_1_fu_936_p2),64));
    zext_ln2049_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_470),64));
    zext_ln2052_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_reg_482),17));
    zext_ln2058_1_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_2_phi_fu_522_p4),7));
    zext_ln2058_2_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_2_fu_1097_p2),17));
    zext_ln2058_3_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_1_fu_1107_p2),64));
    zext_ln2058_4_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_518),14));
    zext_ln2058_5_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2058_3_fu_1121_p2),64));
    zext_ln2058_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_988_p3),13));
    zext_ln2071_1_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_530),8));
    zext_ln2071_2_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_1_fu_1157_p2),17));
    zext_ln2071_3_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_2_fu_1167_p2),64));
    zext_ln2071_4_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2071_reg_1668),64));
    zext_ln2071_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_530),15));
    zext_ln2076_1_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_4_phi_fu_545_p4),7));
    zext_ln2076_2_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2076_fu_1203_p1),17));
    zext_ln2076_3_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2076_2_fu_1211_p2),64));
    zext_ln2076_4_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2076_fu_1225_p2),64));
    zext_ln2076_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_541),13));
    zext_ln2081_1_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_5_phi_fu_557_p4),7));
    zext_ln2081_2_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln2081_fu_1257_p1),17));
    zext_ln2081_3_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2081_2_fu_1265_p2),64));
    zext_ln2081_4_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2081_fu_1279_p2),64));
    zext_ln2081_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_553),13));
    zext_ln2087_10_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_7_fu_1414_p2),17));
    zext_ln2087_11_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_8_reg_1735),64));
    zext_ln2087_12_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1463_p3),64));
    zext_ln2087_1_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_1_fu_1328_p2),17));
    zext_ln2087_2_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_2_fu_1337_p2),64));
    zext_ln2087_3_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_fu_1351_p2),16));
    zext_ln2087_4_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_3_fu_1361_p2),17));
    zext_ln2087_5_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_4_fu_1370_p2),64));
    zext_ln2087_6_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_1_fu_1380_p2),16));
    zext_ln2087_7_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_5_fu_1390_p2),17));
    zext_ln2087_8_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2087_6_reg_1730),64));
    zext_ln2087_9_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2087_2_fu_1404_p2),16));
    zext_ln2087_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_565),16));
    zext_ln2088_fu_1475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_pn_reg_576),16));
    zext_ln382_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1000_p3),14));
    zext_ln386_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(challenge_2_fu_1064_p3),3));
    zext_ln54_12_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_6_fu_834_p4),64));
    zext_ln54_13_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_652_p2),64));
    zext_ln54_14_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln54_8_fu_969_p4),64));
    zext_ln54_15_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_684_p2),8));
    zext_ln54_16_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_2_fu_704_p2),8));
    zext_ln54_17_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_3_fu_856_p2),8));
    zext_ln54_18_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_4_fu_876_p2),8));
    zext_ln54_19_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_5_fu_1024_p2),8));
    zext_ln54_20_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_6_fu_1044_p2),8));
    zext_ln54_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_638_p4),17));
end behav;
