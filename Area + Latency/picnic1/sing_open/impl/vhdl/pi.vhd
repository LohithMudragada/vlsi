-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_fu_136_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_329 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln362_1_fu_142_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln362_1_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln361_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln362_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln361_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_5_fu_196_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_reg_360 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln364_2_fu_202_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_2_reg_365 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln363_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln364_3_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln364_3_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_fu_228_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_3_reg_378 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln364_4_fu_234_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_4_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln363_1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln364_fu_255_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tempA_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tempA_ce0 : STD_LOGIC;
    signal tempA_we0 : STD_LOGIC;
    signal tempA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_0_reg_86 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_97 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln364_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_1_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_2_fu_158_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln362_1_fu_170_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln3_fu_162_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln362_3_fu_175_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln362_fu_179_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_206_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_3_fu_246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_5_fu_251_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_1_fu_238_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln364_6_fu_261_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln363_fu_218_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln364_fu_265_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln364_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_280_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln364_1_fu_294_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln364_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_4_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_7_fu_311_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_3_fu_298_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_2_fu_315_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_280_ap_start : STD_LOGIC;
    signal grp_fu_280_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component crypto_sign_open_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component pi_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    tempA_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempA_address0,
        ce0 => tempA_ce0,
        we0 => tempA_we0,
        d0 => A_q0,
        q0 => tempA_q0);

    crypto_sign_open_bkb_U16 : component crypto_sign_open_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_280_ap_start,
        done => grp_fu_280_ap_done,
        din0 => grp_fu_280_p0,
        din1 => grp_fu_280_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_1_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_86 <= x_reg_329;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_86 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_1_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_1_reg_108 <= ap_const_lv3_0;
            elsif (((icmp_ln363_1_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                x_1_reg_108 <= x_5_reg_360;
            end if; 
        end if;
    end process;

    y_0_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_0_reg_97 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                y_0_reg_97 <= y_reg_342;
            end if; 
        end if;
    end process;

    y_1_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_1_reg_119 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                y_1_reg_119 <= y_3_reg_378;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_1_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln364_reg_388 <= add_ln364_fu_255_p2;
                    zext_ln364_4_reg_383(2 downto 0) <= zext_ln364_4_fu_234_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_5_reg_360 <= x_5_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_reg_329 <= x_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_3_reg_378 <= y_3_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_reg_342 <= y_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln362_1_reg_334(2 downto 0) <= zext_ln362_1_fu_142_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_1_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln362_reg_347(4 downto 0) <= zext_ln362_fu_185_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln364_2_reg_365(2 downto 0) <= zext_ln364_2_fu_202_p1(2 downto 0);
                    zext_ln364_3_reg_370(3 downto 1) <= zext_ln364_3_fu_214_p1(3 downto 1);
            end if;
        end if;
    end process;
    zext_ln362_1_reg_334(3) <= '0';
    zext_ln362_reg_347(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln364_2_reg_365(3) <= '0';
    zext_ln364_3_reg_370(0) <= '0';
    zext_ln364_3_reg_370(7 downto 4) <= "0000";
    zext_ln364_4_reg_383(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln361_fu_130_p2, ap_CS_fsm_state3, icmp_ln361_1_fu_146_p2, ap_CS_fsm_state5, icmp_ln363_fu_190_p2, ap_CS_fsm_state6, icmp_ln363_1_fu_222_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln361_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln361_1_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln363_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln363_1_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln362_fu_185_p1, ap_CS_fsm_state17, zext_ln364_1_fu_321_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            A_address0 <= zext_ln364_1_fu_321_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln362_fu_185_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= tempA_q0;

    A_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln362_1_fu_170_p2 <= std_logic_vector(unsigned(zext_ln362_1_reg_334) + unsigned(zext_ln362_2_fu_158_p1));
    add_ln362_fu_179_p2 <= std_logic_vector(unsigned(shl_ln3_fu_162_p3) + unsigned(zext_ln362_3_fu_175_p1));
    add_ln364_2_fu_315_p2 <= std_logic_vector(unsigned(zext_ln364_7_fu_311_p1) + unsigned(shl_ln364_3_fu_298_p3));
    add_ln364_3_fu_246_p2 <= std_logic_vector(unsigned(zext_ln364_4_fu_234_p1) + unsigned(zext_ln364_2_reg_365));
    add_ln364_4_fu_306_p2 <= std_logic_vector(unsigned(trunc_ln364_fu_290_p1) + unsigned(zext_ln364_4_reg_383));
    add_ln364_fu_255_p2 <= std_logic_vector(unsigned(zext_ln364_5_fu_251_p1) + unsigned(shl_ln364_1_fu_238_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln363_fu_190_p2)
    begin
        if ((((icmp_ln363_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln363_fu_190_p2)
    begin
        if (((icmp_ln363_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_280_ap_start_assign_proc : process(ap_CS_fsm_state6, icmp_ln363_1_fu_222_p2)
    begin
        if (((icmp_ln363_1_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_280_ap_start <= ap_const_logic_1;
        else 
            grp_fu_280_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_280_p0 <= std_logic_vector(unsigned(zext_ln364_3_reg_370) + unsigned(sext_ln364_fu_271_p1));
    grp_fu_280_p1 <= ap_const_lv8_5(4 - 1 downto 0);
    icmp_ln361_1_fu_146_p2 <= "1" when (y_0_reg_97 = ap_const_lv3_5) else "0";
    icmp_ln361_fu_130_p2 <= "1" when (x_0_reg_86 = ap_const_lv3_5) else "0";
    icmp_ln363_1_fu_222_p2 <= "1" when (y_1_reg_119 = ap_const_lv3_5) else "0";
    icmp_ln363_fu_190_p2 <= "1" when (x_1_reg_108 = ap_const_lv3_5) else "0";
        sext_ln364_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln364_fu_265_p2),8));

    shl_ln364_1_fu_238_p3 <= (y_1_reg_119 & ap_const_lv2_0);
    shl_ln364_3_fu_298_p3 <= (trunc_ln364_1_fu_294_p1 & ap_const_lv2_0);
    shl_ln3_fu_162_p3 <= (y_0_reg_97 & ap_const_lv2_0);
    shl_ln_fu_206_p3 <= (x_1_reg_108 & ap_const_lv1_0);
    sub_ln364_fu_265_p2 <= std_logic_vector(unsigned(zext_ln364_6_fu_261_p1) - unsigned(zext_ln363_fu_218_p1));

    tempA_address0_assign_proc : process(zext_ln362_reg_347, ap_CS_fsm_state16, ap_CS_fsm_state4, zext_ln364_fu_286_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            tempA_address0 <= zext_ln364_fu_286_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tempA_address0 <= zext_ln362_reg_347(5 - 1 downto 0);
        else 
            tempA_address0 <= "XXXXX";
        end if; 
    end process;


    tempA_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            tempA_ce0 <= ap_const_logic_1;
        else 
            tempA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempA_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tempA_we0 <= ap_const_logic_1;
        else 
            tempA_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln364_1_fu_294_p1 <= grp_fu_280_p2(3 - 1 downto 0);
    trunc_ln364_fu_290_p1 <= grp_fu_280_p2(4 - 1 downto 0);
    x_5_fu_196_p2 <= std_logic_vector(unsigned(x_1_reg_108) + unsigned(ap_const_lv3_1));
    x_fu_136_p2 <= std_logic_vector(unsigned(x_0_reg_86) + unsigned(ap_const_lv3_1));
    y_3_fu_228_p2 <= std_logic_vector(unsigned(y_1_reg_119) + unsigned(ap_const_lv3_1));
    y_fu_152_p2 <= std_logic_vector(unsigned(y_0_reg_97) + unsigned(ap_const_lv3_1));
    zext_ln362_1_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_86),4));
    zext_ln362_2_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_97),4));
    zext_ln362_3_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_1_fu_170_p2),5));
    zext_ln362_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_fu_179_p2),64));
    zext_ln363_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_119),6));
    zext_ln364_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_2_fu_315_p2),64));
    zext_ln364_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_108),4));
    zext_ln364_3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_206_p3),8));
    zext_ln364_4_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_119),4));
    zext_ln364_5_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_3_fu_246_p2),5));
    zext_ln364_6_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln364_1_fu_238_p3),6));
    zext_ln364_7_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_4_fu_306_p2),5));
    zext_ln364_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_reg_388),64));
end behav;
